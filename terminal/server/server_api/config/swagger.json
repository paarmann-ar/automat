{
  "x-generator": "NSwag v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "aqua REST API",
    "description": "ï»¿This is the REST API for aqua. The aqua REST API allows you to perform all kind of read and write operations in aqua.\r\nThe authentication is performed using OAuth 2.\r\n\r\nWe still actively work on the documentation. It might miss some information and the nullability information for the\r\nmodels does not reflect what is actually required by the REST API\r\n\r\n## FAQ\r\nThis FAQ contains some frequently asked questions and there answers.\r\n\r\n### Why are numbers sometimes deserialized incorrectly?\r\nThe aqua REST API supports different notations for numbers inside the JSON body. As in Javascript, a leading `0` or\r\n`0x` indicates an octal or hexadecimal representation. We recommend to remove any leading zeros when specifying numbers.\r\n\r\n### What format are the dates in?\r\nDate used for display is formatted in en-GB short date\r\nformat (2 digit day/2 digit month/4 digit year) when no\r\nAccept-Language header is provided. Alternatively if you\r\nprovide the Accept-Language header then the dates for display \r\nare formatted in the short date format of the provided culture.\r\nThe Accept-Language header also affect for input dates\r\nare interpreted i.e. POST /api/Navigation/ItemList with a date\r\nfilter.\r\n\r\nDates that are only for data purposes are formatted in the\r\nISO 8601 Date format. If the date in the result is in ISO format\r\nthen any corresponding update for that value must also be in the\r\nISO format.\r\n",
    "contact": {
      "name": "aqua cloud GmbH",
      "url": "https://aqua-cloud.io/",
      "email": "aqua-support@andagon.com"
    },
    "version": "24.33.0.0",
    "x-logo": {
      "url": "./Content/aqua_logo_2_white.svg",
      "backgroundColor": "#4b9cd2"
    }
  },
  "servers": [
    {
      "url": "https://app.aqua-cloud.io/aquaWebNG"
    }
  ],
  "paths": {
    "/api/Agent": {
      "post": {
        "tags": [
          "Agent"
        ],
        "summary": "Create agent",
        "description": "Create a new single agent, copy of single agent or a new pool.",
        "operationId": "Agent_CreateAgent",
        "requestBody": {
          "x-name": "apiAgentCreateOperation",
          "description": "The data required to execute agent - create operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAgentCreateOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Information on the created agent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAgentBase"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agent/{agentId}": {
      "patch": {
        "tags": [
          "Agent"
        ],
        "summary": "Update agent",
        "description": "Update agent with the given agentId.",
        "operationId": "Agent_Update",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "description": "The id of the agent.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "Request containing the modify information for the agent.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAgentPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Agent"
        ],
        "summary": "Delete agent",
        "description": "Delete the agent (single agent or pool) with the given *agentId* in the project with the given *projectId*",
        "operationId": "Agent_DeleteAgent",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "description": "Id of an agent to be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agent/{agentId}/CurrentlyExecuting": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "Get currently executing task",
        "description": "Get the task which currently executed by the given agent.",
        "operationId": "Agent_GetCurrentlyExecutingTask",
        "parameters": [
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "description": "The id of the agent",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The currently executed task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiCurrentlyExecutedStepInfo"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agile/ItemList": {
      "post": {
        "tags": [
          "Agile"
        ],
        "summary": "Get items",
        "description": "Get a list of items.",
        "operationId": "Agile_ItemListMultipleTypes",
        "requestBody": {
          "x-name": "request",
          "description": "Item list request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemListRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agile/ReorderItems": {
      "patch": {
        "tags": [
          "Agile"
        ],
        "summary": "Reorder agile backlog items",
        "description": "Reorder agile priority for the given *ids* according to the given *id*.",
        "operationId": "Agile_ReorderItems",
        "requestBody": {
          "x-name": "request",
          "description": "Reorder request data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAgileReorderItemsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAgileReorderItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agile/Settings/{projectId}": {
      "get": {
        "tags": [
          "Agile"
        ],
        "summary": "Get Agile settings",
        "description": "Get Agile settings for the project",
        "operationId": "Agile_GetSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAgileSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Agile"
        ],
        "summary": "Update Agile settings",
        "description": "Get Agile settings for the project",
        "operationId": "Agile_UpdateSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Project ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "agileSettings",
          "description": "Updated Agile settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAgileSettings"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agile/Sprint": {
      "post": {
        "tags": [
          "Agile"
        ],
        "summary": "Create sprint",
        "description": "Create a new sprint with the given data.",
        "operationId": "Agile_CreateSprint",
        "requestBody": {
          "x-name": "newItem",
          "description": "The data for the new sprint which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSprintNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Id of the created sprint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSprintNewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Agile/Sprint/{id}": {
      "get": {
        "tags": [
          "Agile"
        ],
        "summary": "Get sprint",
        "description": "Get the sprint with the given *id*.",
        "operationId": "Agile_GetSprint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the sprint as integer",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeStatistics",
            "in": "query",
            "description": "Flag that indicates if statistics are included or not, default false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested sprint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSprint"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Agile"
        ],
        "summary": "Update sprint",
        "description": "Allows to update the sprint with the given *id*.",
        "operationId": "Agile_UpdateSprint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the sprint as integer",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSprintUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Agile"
        ],
        "summary": "Delete sprint",
        "description": "Delete the sprint with the given *id*.",
        "operationId": "Agile_DeleteSprint",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the sprint as integer",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Batch": {
      "patch": {
        "tags": [
          "BatchOperation"
        ],
        "summary": "Modify generic collection",
        "description": "Batch operation that modifies objects matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.",
        "operationId": "BatchOperation_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Batch/AllowedValues": {
      "post": {
        "tags": [
          "BatchOperation"
        ],
        "summary": "Get allowed values",
        "description": "Get allowed values than can be used when batch-updating given items. \nFor each of requested fields returns an entry containing information about \nallowed values. ",
        "operationId": "BatchOperation_GetPossibleValues",
        "requestBody": {
          "x-name": "apiBatchAllowedValuesRequest",
          "description": "Request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBatchAllowedValuesRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Allowed values than can be used when batch-updating given items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBatchAllowedValuesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ConfigData/Default": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get default config elemets",
        "description": "Lookups default config element on given level (either project or global).",
        "operationId": "Config_LookupConfigDefault",
        "parameters": [
          {
            "name": "dataPath",
            "in": "query",
            "required": true,
            "description": "Path of the config element e.g. edit-template.defaults.defect.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The id of the project. Can be null what means looking up for non-project related config elements only.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true then returned elements contain data as well (Content field).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Matching config element or null if nothing found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigElement"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Config"
        ],
        "summary": "Replace default config elements",
        "description": "Replace default config elements.",
        "operationId": "Config_SaveOrUpdateConfigDefault",
        "requestBody": {
          "x-name": "config",
          "description": "Details of config element to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiConfigElementSave"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The saved config element.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigElement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Config"
        ],
        "summary": "Modify default config elements",
        "description": "Modify matching config elements according to patch operation.",
        "operationId": "Config_ModifyConfigDefault",
        "requestBody": {
          "x-name": "patchOperation",
          "description": "Details of the patch operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiConfigElementPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ConfigData/Entry/{id}": {
      "delete": {
        "tags": [
          "Config"
        ],
        "summary": "Delete my config element entry",
        "description": "Delete configuration element entry identified by given *id*.",
        "operationId": "Config_DeleteConfigUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the configuration element entry.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ConfigData/Unified": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get unified config elements",
        "description": "Lookups for configuration elements in \"unified\" way i.e. returning elements found on different layers together (see GET api/ConfigData/User). \n            So, assuming that for given user the configuration elements (for given path) exist on all the four layers (user-project, project, user-global and global) \n            this method will return array of these four config elements. If any of these is missing then of course array can be smaller \n            (and, in the end, the empty array if no configuration elements found on any of these four levels). \n            If projectId is null then only two levels are considered (project and global). ",
        "operationId": "Config_LookupConfigUnified",
        "parameters": [
          {
            "name": "dataPath",
            "in": "query",
            "required": true,
            "description": "Path of the config element e.g. edit-template.defaults.defect.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The id of the project. Can be null what means looking up for non-project related config elements only.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true then returned elements contain data as well (Content field).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The list of matching config elements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiConfigElement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ConfigData/User": {
      "get": {
        "tags": [
          "Config"
        ],
        "summary": "Get my config elements",
        "description": "Performs lookup of config elements from \"user\" point of view i.e. taking into consideration the following fallback rules:\n\na) When looking up for project-related entries (projectId is not null) then: \n  a1) at first try to find config element defined in the scope of current user and project \n  a2) if nothing found then try to find project-default config element \n  a3) if nothing found then try to find global config element defined in the scope of current user\n  a4) finally, if nothing found, then try to find global-default config element\nb) When looking up for global entries (projectId is null) then: \n  b1) at first try to find global config element defined in the scope of current user\n  b2) if nothing found then try to find global-default config element\n  ",
        "operationId": "Config_LookupConfigUser",
        "parameters": [
          {
            "name": "dataPath",
            "in": "query",
            "required": true,
            "description": "Path of the config element e.g. edit-template.defaults.defect.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The id of the project. Can be null what means looking up for non-project related config elements only.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true then returned elements contain data as well (Content field).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Matching config element or null if nothing found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigElement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Config"
        ],
        "summary": "Replace my config elements",
        "description": "Replace config elements for the current user.",
        "operationId": "Config_SaveOrUpdateConfigUser",
        "requestBody": {
          "x-name": "config",
          "description": "Details of config element to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiConfigElementSave"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The saved config element.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiConfigElement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Config"
        ],
        "summary": "Modify my config elements",
        "description": "Modify matching config elements for current user according to patch operation.",
        "operationId": "Config_ModifyConfigUser",
        "requestBody": {
          "x-name": "patchOperation",
          "description": "Details of the patch operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiConfigElementPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG": {
      "get": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Get my dashboards",
        "description": "Get all available dashboards for current user (either own or shared by other users).\nThe returned dashboards contains only basic data (without Widgets nor ProjectShares).\nReturned list is sorted by Title (natural sort). ",
        "operationId": "DashboardNG_GetDashboardsForUser",
        "responses": {
          "200": {
            "description": "All dashboards available for current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiDashboardNG"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Create dashboard.",
        "description": "Create a new dashboard with the given data. \nThe Id must be zero. The Widgets and ProjectShares collections need to be provided (even empty, but cannot be null). ",
        "operationId": "DashboardNG_CreateDashboard",
        "requestBody": {
          "x-name": "dashboard",
          "description": "Dashboard to be saved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDashboardNG"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Saved dashboard data (contains valid Id)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardNG"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}": {
      "get": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Get dashboard",
        "description": "Get dashboard with the given *dashboardId*. \nDepending on parameters the actual parts of the dashboard data can be filled or not (null). ",
        "operationId": "DashboardNG_GetDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "Id of the dashboard to retrieve",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeWidgets",
            "in": "query",
            "description": "If true then widgets collection will be returned. If false, then widgets collection will be null.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          },
          {
            "name": "includeShares",
            "in": "query",
            "description": "If true then shares collection will be returned. If false, then shares collection will be null.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "includeData",
            "in": "query",
            "description": "If true then actual data in widgets collection will be includes as well (implies includeWidgets).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardNG"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Update dashboard",
        "description": "Allows to update the dashboard with the given *dashboardId*. \nWidgets and ProjectShares collections are updated only if they are present in the received data - sending \nnull means the collection remains unchanged. ",
        "operationId": "DashboardNG_UpdateDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "If of the dashboard to be updated",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "dashboard",
          "description": "Dashboard data to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDashboardNG"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Updated dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardNG"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Delete dashboard",
        "description": "Delete the dashboard with the given *dashboardId*.",
        "operationId": "DashboardNG_DeleteDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}/Favourite": {
      "post": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Add favourite",
        "description": "Add dashboard with the given *dashboardId* to favourites of the current user.",
        "operationId": "DashboardNG_MarkDashboardFavourite",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard to add to favourites.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Remove favourite",
        "description": "Remove dashboard with the given *dashboardId* from favourites of current user (i.e. the dashboard will no longer be included on the list of favourites).",
        "operationId": "DashboardNG_UnMarkDashboardFavourite",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard to remove from favourites.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}/Widget": {
      "post": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Create widget",
        "description": "Create a new widget in an existing dashboard with the given *dashboardId*. The widget will be placed at the end of the list of existing widgets.",
        "operationId": "DashboardNG_AddWidgetInDashboard",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard where to add the widget",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "widget",
          "description": "Widget data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDashboardNGWidget"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardNGWidget"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Reorder widgets",
        "description": "Reorder widgets from the dashboard with the given *dashboardId* according to the given order, all widgets must be reordered.",
        "operationId": "DashboardNG_ReorderWidgets",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "apiReorderWidgets",
          "description": "List of widgetIds with new positions",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiDashboardNGReorderWidgets"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}/Widget/{widgetId}": {
      "patch": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Update dashboard",
        "description": "Allows to update the widget with the given *widgetId* in the dashboard with the given *dashboardId*.",
        "operationId": "DashboardNG_UpdateWidget",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "widgetId",
            "in": "path",
            "required": true,
            "description": "The id of the widget",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "widget",
          "description": "New widget data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDashboardNGWidget"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The updated widget",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDashboardNGWidget"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Delete widget",
        "description": "Delete the widget with the given *widgetId* from the dashboard with the given *dashboardId*.",
        "operationId": "DashboardNG_DeleteWidget",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "widgetId",
            "in": "path",
            "required": true,
            "description": "The id of the widget",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}/Widget/{widgetId}/Data": {
      "get": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Get widget",
        "description": "Get widget with the given *widgetId* from dashboard with the given *dashboardId*. All the settings are taken from widget settings saved in the dashboard.",
        "operationId": "DashboardNG_GetWidgetData",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "widgetId",
            "in": "path",
            "required": true,
            "description": "The id of the widget",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWidgetData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/DashboardNG/{dashboardId}/Widget/{widgetId}/Preview": {
      "post": {
        "tags": [
          "DashboardNG"
        ],
        "summary": "Create widget preview",
        "description": "Create data preview of the widget with the given *widgetId* according to criteria send in the request. The criteria do have to be persisted. \nThis allows to perform a \"preview\" of widget with changed configuration before actually persisting it. ",
        "operationId": "DashboardNG_GetWidgetPreview",
        "parameters": [
          {
            "name": "dashboardId",
            "in": "path",
            "required": true,
            "description": "The id of the dashboard",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "widgetId",
            "in": "path",
            "required": true,
            "description": "The id of the widget",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "widget",
          "description": "Widget data (including data specification)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDashboardNGWidget"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWidgetData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect": {
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create defect",
        "description": "Create a new defect with the given data and returns some basic information on\n            the new defect.",
        "operationId": "Defect_Create",
        "parameters": [
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newItem",
          "description": "The data for the new defect which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemNewWithEnclosures"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Basic information on the new defect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Defect"
        ],
        "summary": "Modify defect collection",
        "description": "Batch operation that modifies defects matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.  ",
        "operationId": "Defect_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get defect",
        "description": "Get the defect with the specified id.",
        "operationId": "Defect_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect as integer (without DF).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "Indicates whether information about the\n            edit lock should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "withEnclosure",
            "in": "query",
            "description": "Indicates whether enclosures are included or not.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "withEditLayout",
            "in": "query",
            "description": "Indicates whether information about the edit layout should be included.\n            Edit layout is a superset of view layout (you don't have to specify withViewLayout) and contains all information \n            required to display and edit the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "withViewLayout",
            "in": "query",
            "description": "Indicates whether information about the\n            view layout should be included. The view layout is a subset of edit layout and \n            contains all information required to display the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The requested defect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiDefect"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Defect"
        ],
        "summary": "Update defect",
        "description": "Update the defect with the specified id. The changes\n            to perform are provided in the ApiItemUpdate object.",
        "operationId": "Defect_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that the defect has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemUpdateWithEnclosures"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete defect",
        "description": "Delete the defect with the specified id.",
        "operationId": "Defect_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Attachment": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get attachments metadata as list",
        "description": "Get all attachments of the defect with the given *id*.",
        "operationId": "Defect_GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with meta information on all the attachments of this defect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAttachmentInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment. The attachment's content can be provided directly in the request body\n            or inside a multi part form data.",
        "operationId": "Defect_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The metadata of the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Attachment/{attachmentId}": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get attachment metadata",
        "description": "Get the meta information of the attachment with attachmentId\n            of the defect with the given *id*. The meta information does not contain\n            the content of the attachment which must be fetched separately.",
        "operationId": "Defect_GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information for the specified attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete attachment",
        "description": "Delete the attachment with the given attachmentId in the defect\n            with the given id.",
        "operationId": "Defect_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "Defect_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/EditMeta": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get fields edit meta",
        "description": "Get information on the fields of an existing defect when changing the status. \n            Change of status may cause changes to the characteristics of fields \n            (e.g. possible values, requireness etc.) due to workflow rules.",
        "operationId": "Defect_EditMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect for which the edit meta is requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "statusTo",
            "in": "query",
            "required": true,
            "description": "The id of the status we are switching to.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of the defect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/EditStatus": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the defect with the specified id.",
        "operationId": "Defect_GetEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Enclosure": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get enclosures as list",
        "description": "Get all enclosures of the defect with the id.",
        "operationId": "Defect_GetEnclosures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of all enclosures of the defect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiEnclosure"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create enclosure",
        "description": "Create a new enclosure in the defect with id.",
        "operationId": "Defect_CreateEnclosure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "apiEnclosure",
          "description": "The data for the new enclosure.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiEnclosureUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created enclousre.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEnclosure"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Enclosure/{enclosureId}": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get enclosure",
        "description": "Get the enclosure with enclosureId of the defect with id.",
        "operationId": "Defect_GetEnclosure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "enclosureId",
            "in": "path",
            "required": true,
            "description": "The id of the enclosure.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The enclosure with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEnclosure"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Defect"
        ],
        "summary": "Update enclosure",
        "description": "Update the enclosure with enclosureId of the defect with id.",
        "operationId": "Defect_UpdateEnclosure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "enclosureId",
            "in": "path",
            "required": true,
            "description": "The id of the enclosure.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "apiEnclosure",
          "description": "The data to update in the enclosure with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiEnclosureUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The enclosure with the given id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEnclosure"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete enclosure",
        "description": "Delete the enclosure with enclosureId of the defect with id.",
        "operationId": "Defect_DeleteEnclosure",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "enclosureId",
            "in": "path",
            "required": true,
            "description": "The id of the enclosure.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/History": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get history",
        "description": "Get the history with all changes to the defect.",
        "operationId": "Defect_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all changes in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHistoryEntryDefect"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Lock": {
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create lock",
        "description": "Create lock for the defect with the given id for exclusive editing. The provided\n            lockInfo must contain the latest version of the defect. This call\n            will fail when an outdated version is provided.",
        "operationId": "Defect_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the defect with the given id.",
        "operationId": "Defect_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Post": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get posts",
        "description": "Get posts (also known as comments or discussions) of the defect with the id.",
        "operationId": "Defect_GetPosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "The first result wich should be fetched. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximal number of results wich should be fetched. The default value is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "The sorting order of the result. If true sorted ascending otherwise descending. The default value is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "A list of paginated posts associated with the given defect and the total count of all posts for this defect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostPaginated"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create post",
        "description": "Create a new post with the given content in the defect with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current defect\n            can be mentioned.",
        "operationId": "Defect_CreatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect in which the new post should be created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The content of the new post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The meta information of the new post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Post/{postId}": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get post",
        "description": "Get the post with postId associated with the defect with id.",
        "operationId": "Defect_GetPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPost"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete post",
        "description": "Delete the post with *postId* in the defect with the given *id*.\n            Posts are not completely deleted but only marked as deleted and their content is removed.",
        "operationId": "Defect_DeletePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information of the deleted post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Defect"
        ],
        "summary": "Replace post",
        "description": "Replace the existing post with id postId in the defect with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current defect\n            can be mentioned.",
        "operationId": "Defect_UpdatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be replaced.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The new content of the post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The meta information of the replaced post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Relation": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get relations",
        "description": "Get all relations of the defect with the given id.",
        "operationId": "Defect_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: Relations.OtherItem.*Info to load basic info on the relation target,\n            Relations.OtherItem.*Details to load the details of the relation target,\n            Item.*Info to load basic info on the item for which the relations were requested,\n            Item.*Details to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the defect with the id\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "Defect_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Relation/{relationId}": {
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Delete relation",
        "description": "Delete relation of the defect with the given id and relationId.\n            Can delete only direct relations.",
        "operationId": "Defect_DeleteRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "description": "The id of the relation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "Defect_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Watchers": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get watching users as list",
        "description": "Get list of users watching this defect.",
        "operationId": "Defect_GetWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of users watching this defect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Defect"
        ],
        "summary": "Add to watch list",
        "description": "Add given user to list of watchers of the defect. \n            Warning! currently the only supported operation is to subscribe yourself.",
        "operationId": "Defect_AddWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newWatcher",
          "description": "Contains id of the user to be subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatcherNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Defect"
        ],
        "summary": "Updates the watch list",
        "operationId": "Defect_UpdateWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "watchersUpdate",
          "description": "Contains the id of the user to be (un-)subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatchersUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/{id}/Watchers/{userId}": {
      "delete": {
        "tags": [
          "Defect"
        ],
        "summary": "Remove from watch list",
        "description": "Remove given user from list of watchers of the defect. \n            Warning! currently the only supported operation is to unsubscribe yourself.",
        "operationId": "Defect_RemoveWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the defect.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to be unsubscribed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/CreateMeta": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get fields metadata",
        "description": "Get a basic information on the fields of a new defect created in given project and folder. \n            The information contains details about available fields and their characteristics.",
        "operationId": "Defect_CreateMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder where the item will be created (0 means root level).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "statusTo",
            "in": "query",
            "description": "The id of status with which the new item will be saved. Workflow\n            restrictions might depend on this status and hence the meta data might change depending\n            on the selected status. If no status id is provided, the default value for the status\n            is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of a new defect created in given project and folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemCreateMeta"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Defect/ItemList": {
      "get": {
        "tags": [
          "Defect"
        ],
        "summary": "Get defects",
        "description": "Get a list of defects.",
        "operationId": "Defect_GetItemList",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Environment": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Provides information about a system environment",
        "description": "Contains information about usage of a multitenant environment",
        "operationId": "Environment_GetEnvironmentInfo",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEnvironmentInfo"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ExportItems/{exportFileGuid}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Download the Result of an Export",
        "operationId": "Export_GetExportData",
        "parameters": [
          {
            "name": "exportFileGuid",
            "in": "path",
            "required": true,
            "description": "the file gui from api/System/LongOperation/{guid}",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ExportItems/{projectId}/{folderId}": {
      "patch": {
        "tags": [
          "Export"
        ],
        "summary": "Export item to zipped Excel",
        "description": "Exports all Items from a Folder to a Excel. \nAdds all Attach",
        "operationId": "Export_ExportToExcel",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The target project for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The target folderid for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Export options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemExportRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Guid of the import operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn the result of api/System/LongOperation/{guid} you can find the file guid to download the file from GET api/ExportItems/{fileguid}\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/File": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Upload file",
        "description": "Upload a file. The file is temporarily stored and its URL is included in the response.\nThis URL can then be used to add the file as an attachment when creating or updating \nan item.",
        "operationId": "File_UploadFile",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "description": "The file name to use. This parameter is optional. If it is not\n            specified the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The file to upload. Do NOT provide a JSON here. Instead,\n            directly upload the file by sending it as the request body or sending some multi part\n            form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The metadata of the uploaded file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFileUploadInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/File/{guid}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Get file",
        "description": "Get the file with the given *guid*.",
        "operationId": "File_GetFile",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "The guid of the file.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the file",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Upload file with GUID",
        "description": "Upload a file. This endpoint is used when the URL for a specific upload\nis created up front.",
        "operationId": "File_UploadFileWithGuid",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "The guid of the file.",
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The file to upload. Do NOT provide a JSON here. Instead,\n            directly upload the file by sending it as the request body.\n            ",
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/File/UploadUrl": {
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Create upload URL",
        "description": "Create a URL which can be used to upload a file.",
        "operationId": "File_CreateFileUploadUrL",
        "requestBody": {
          "x-name": "fileUploadUrlRequest",
          "description": "The file metadata which is required to create the upload URL.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFileUploadUrlRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFileUploadUrlResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/GlobalSearch": {
      "post": {
        "tags": [
          "GlobalSearch"
        ],
        "summary": "Returns aqua objects which types and names match the conditions represented \nin apiGlobalSearchRequest",
        "operationId": "GlobalSearch_Get",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGlobalSearchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGlobalSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Upload image",
        "description": "Upload an image. The image is temporarily stored and its URL is included in the response.\nThis URL can then be used to include images into rich text, e.g. in a description.",
        "operationId": "Image_UploadImage",
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The image to upload. Do NOT provide a JSON here. Instead,\n            directly upload the file by sending it as the request body or sending some multi part\n            form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The metadata of the uploaded image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiImageUploadInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image/{checksum}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Get image metadata by checksum",
        "description": "Get the metadata for the image with the given *checksum*. The image content\nmust be retrieved separately.",
        "operationId": "Image_GetImageInfo2",
        "parameters": [
          {
            "name": "checksum",
            "in": "path",
            "required": true,
            "description": "The checksum of the image",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiImageInfo"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image/{checksum}/data": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Get image by checksum",
        "description": "Get content of the image with the given *checksum*. When possible, the Content-Type\nwill be correctly set to match the type of the image.",
        "operationId": "Image_GetImageData2",
        "parameters": [
          {
            "name": "checksum",
            "in": "path",
            "required": true,
            "description": "The checksum of the image",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "resize",
            "in": "query",
            "description": "Indicates whether the image should be resized to the dimensions given in the rich text.\n            The original image can have different dimensions. The default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the image",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image/{id}/{checksum}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Get image metadata by id and checksum",
        "description": "Get the metadata for the image with the given *id* and *checksum*. The image content\nmust be retrieved separately.",
        "operationId": "Image_GetImageInfo",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the image",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "checksum",
            "in": "path",
            "required": true,
            "description": "The checksum of the image",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiImageInfo"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image/{id}/{checksum}/data": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Get image by id and checksum",
        "description": "Get content of the image with the given *id* and *checksum*. When possible, the Content-Type\nwill be correctly set to match the type of the image.",
        "operationId": "Image_GetImageData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the image",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "checksum",
            "in": "path",
            "required": true,
            "description": "The checksum of the image",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "resize",
            "in": "query",
            "description": "Indicates whether the image should be resized to the dimensions given in the rich text.\n            The original image can have different dimensions. The default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the image",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Image/Temp/{imageName}": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Get image by imageName",
        "operationId": "Image_GetImage",
        "parameters": [
          {
            "name": "imageName",
            "in": "path",
            "required": true,
            "description": "The name of the image",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the image",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ImportItems/{projectId}/{folderId}": {
      "patch": {
        "tags": [
          "Import"
        ],
        "summary": "Import item from Excel file",
        "description": "Reads a previously imported Excel file. Items from the file are imported into aqua.",
        "operationId": "Import_ImportFromExcel",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The target project for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The target folderid for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The file which should be imported.\nThe file should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nfirst.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemImportRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Guid of the import operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Information for Excel import file",
        "description": "Creates a template with information about the properties to import and worksheet information",
        "operationId": "Import_GetFieldInfo",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The target project for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The target folderid for the import",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "objectTypes",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The objecttype to create the template for",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "$ref": "#/components/schemas/ObjectType"
              }
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The information for the worksheet in the excel file",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Integration/Configuration": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get Configurations",
        "description": "Get the integration configurations.\n            When a user is not allowed to configure integrations globally, all sensitive information\n            (e.g. API password in case of JIRA) is masked (with nulls) if the request is for global integrations.",
        "operationId": "Integrations_GetIntegrationConfigurations",
        "parameters": [
          {
            "name": "onlyProjectLevel",
            "in": "query",
            "description": "The project level integrations are only returned if this is true",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The integration configurations for global or for the specified project together with\n            some necessary meta data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIntegrationConfigurations"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Integrations"
        ],
        "summary": "Replace global configurations",
        "description": "Replace the global integration configurations with the provided ones.",
        "operationId": "Integrations_SaveGlobalIntegrationConfigurations",
        "requestBody": {
          "x-name": "update",
          "description": "The new global integration configurations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiIntegrationConfigurationsUpdate"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Integration/Configuration/Project/{projectId}": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get project configurations",
        "description": "Get the integration configurations for the project with the given projectId.\n            When a user is not allowed to configure integrations for the given project\n            all sensitive information (e.g. API password in case of JIRA) is masked (with nulls).",
        "operationId": "Integrations_GetProjectIntegrationConfigurations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the integration configurations\n            are requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The integration configurations for the specified project together with\n            some necessary meta data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIntegrationConfigurations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Integrations"
        ],
        "summary": "Replace project configurations",
        "description": "Replace integration configurations of the project with the given projectId\n            with the provided ones.",
        "operationId": "Integrations_SaveProjectIntegrationConfigurations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project of which the integration configurations are replaced.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The new integration configurations for the specified project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiIntegrationConfigurationsUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Integration/Effective/{projectId}": {
      "get": {
        "tags": [
          "Integrations"
        ],
        "summary": "Get effective project configurations",
        "description": "Get effective integration configurations for the project with the given projectId.\n            This global and project-specific integration configurations will be combined\n            into a list of effective integration configurations. Project-specific integration\n            configurations overwrite the global ones.\n            Sensitive information (e.g. API password in case of JIRA) is always masked (with nulls)\n            independently of the user's permissions.",
        "operationId": "Integrations_GetEffectiveIntegrations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIntegrationConfigurations"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Integration/Enable": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Enable",
        "description": "Allows for enabling or disabling an integration",
        "operationId": "Integrations_Enable",
        "requestBody": {
          "x-name": "config",
          "description": "The details for the specific integration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiIntegrationEnable"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Integration/Verify": {
      "post": {
        "tags": [
          "Integrations"
        ],
        "summary": "Verify",
        "description": "Verify the supplied integration information",
        "operationId": "Integrations_Verify",
        "requestBody": {
          "x-name": "config",
          "description": "The integration details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiIntegrationConfigVerifyBase"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "An indication if the connection could be made or not",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiIntegrationVerifyResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Label": {
      "post": {
        "tags": [
          "Label"
        ],
        "summary": "Create new label",
        "description": "Create a new label. Expectes a unique name.",
        "operationId": "Label_CreateLabel",
        "parameters": [
          {
            "name": "itemTypes",
            "in": "query",
            "required": true,
            "description": "The item types this label supports as a comma-separated list. Possible values for item\ntype are: TestCase.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newLabel",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLabelNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabelNewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "List labels",
        "description": "Get a list of all available labels.",
        "operationId": "Label_ListLabels",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The item type for which to get labels. Possible values are: TestCase.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "folderId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLabelListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Label/{id}": {
      "patch": {
        "tags": [
          "Label"
        ],
        "summary": "Update label",
        "description": "Update a label",
        "operationId": "Label_UpdateLabel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLabelUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Label"
        ],
        "summary": "Delete label",
        "description": "Deletes the label with the provided id",
        "operationId": "Label_DeleteLabel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Navigation/DependencyList": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get dependent items",
        "description": "Get a list of dependent items of the given item type itemType which are dependent on at least one item specified in the list of ids ids.",
        "operationId": "Navigation_GetDependency",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "description": "Comma separated list of item ids where dependencies are searched for.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The type of dependent items which should be loaded.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNavigationDependencyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Navigation/GroupList": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get groups",
        "description": "Get a list with the groups created according to the grouping\n            instructions. The result will only contain a list of the groups with\n            the corresponding item counts. The items can be loaded separately.",
        "operationId": "Navigation_GetGroupsGET",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The type of items which should be grouped.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 1
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are grouped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder of which the items are grouped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be considered for the grouping",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "groups",
            "in": "query",
            "description": "The grouping syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support grouping. Grouping always includes\n            sorting by the grouped fields. The fields provided in sorting are used for additional sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemGroupsResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get groups",
        "description": "Get a list with the groups created according to the grouping\ninstructions. The result will only contain a list of the groups with\nthe corresponding item counts. The items can be loaded separately.",
        "operationId": "Navigation_GetGroupsPOST",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The type of items which should be grouped.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are grouped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder of which the items are grouped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          }
        ],
        "requestBody": {
          "x-name": "itemArrangementGrouping",
          "description": "Contains filter, sorting and search information and grouping.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemArrangementGrouping"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemGroupsResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Navigation/ItemList": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get items",
        "description": "Get a list of items.",
        "operationId": "Navigation_ItemListGET",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The type of items which should be loaded.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 1
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "If true permissions are returned as well (default is false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]].\n            The [field meta data](#operation/ProjectMeta_GetProjectFieldMeta) can be used to check which filter operators are supported for which fields.\n            \n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]].\n            The [field meta data](#operation/ProjectMeta_GetProjectFieldMeta) can be used to check which fields support sorting.\n            \n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 10
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 11
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get items",
        "description": "Get a list of items.",
        "operationId": "Navigation_ItemListPOST",
        "parameters": [
          {
            "name": "itemType",
            "in": "query",
            "required": true,
            "description": "The type of items which should be loaded.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "If true permissions are returned as well (default is false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "requestBody": {
          "x-name": "itemArrangement",
          "description": "Contains filter, sorting and search information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemArrangement"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Navigation/Tree": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get subfolders",
        "description": "Get project and folders according to the request. This method is mainly dedicated for rendering the project tree.",
        "operationId": "Navigation_GetProjectTreeData",
        "parameters": [
          {
            "name": "parentFolders",
            "in": "query",
            "required": true,
            "description": "JSON array of requested parent folders to retrieve subfolder for. For example:\n            ['5_0', '3_114'] where first number is a project id and second number is folder id (or zero for root).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "includeProjects",
            "in": "query",
            "description": "Indicate whether to return project list as well.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archived items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "A response object containing project list (if requested) and subfolders of all requested nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTreeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Navigation/TreePath/{projectId}/{folderId}": {
      "get": {
        "tags": [
          "Navigation"
        ],
        "summary": "Get folder path",
        "description": "Get a \"folder path\" of given folder i.e. information about all parent folders (up to the top)\n            as well as the project information.",
        "operationId": "Navigation_GetProjectTreePath",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project where folder is located.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "\"Folder path\" information for given folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTreePathResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/OperationLog/Category": {
      "get": {
        "tags": [
          "OperationLog"
        ],
        "summary": "Get log categories as list",
        "description": "Returns all 'leaf' log categories i.e. categories of entries that can be actually logged. \n            Note: it is possible to use a part of the cateogry (prefix) in Search action.",
        "operationId": "OperationLog_GetCategories",
        "responses": {
          "200": {
            "description": "List of all available categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiOperationLogCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/OperationLog/Search": {
      "get": {
        "tags": [
          "OperationLog"
        ],
        "summary": "Search log",
        "description": "Performs search of operation logs i.e. log entries that represent e.g. history of administrative\n            changes in the system. There are several search parameters available. Lack of parameter means no\n            filtering on given field.",
        "operationId": "OperationLog_SearchOperationLogs",
        "parameters": [
          {
            "name": "firstResults",
            "in": "query",
            "description": "Used for pagination, defines how many items to skip in the\n            found result set.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Used for pagination, defines how many items to take from the\n            found result set (starting from firstResults).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The id of the project the log entry is related to. When no project id\n            is provided, system level entries will be returned. Note that system level log entries are only\n            accessible by system administrators.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder the log entry is related to. If provided, projectId\n            must be specified as well.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "folderPath",
            "in": "query",
            "description": "Part of folder path the log entry is related to. If provided, projectId\n            must be specified as well.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "operationUserId",
            "in": "query",
            "description": "The id of the user who did the change.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "dateFromUTC",
            "in": "query",
            "description": "If provided, only operations performed at this date or later are matched.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "dateToUTC",
            "in": "query",
            "description": "If provided, only operations performed at this date or earlier are matched.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "category",
            "in": "query",
            "description": "Allows to filter by category. Supports partial categories (prefixes)\n            e.g. admin.project.automation",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "An array of ApiOperationLog matching the criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSearchOperationLogResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get my projects",
        "description": "Get projects the current user is assigned to.",
        "operationId": "Project_GetAll",
        "parameters": [
          {
            "name": "onlySharedWithProject",
            "in": "query",
            "description": "When the id of a project is provided, only projects which\n            share their template with specified project are included.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether the project permissions of the current user should be included\n            for each project.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archived projects should be returned. Default: true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "returns a list of available projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectInfo"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create project",
        "description": "Create a new project with the given data - either from scratch (from default template)\n            or as a copy of existing project. If required, items from source project are copied as well.\n            (note the copy process is asynchronous - the email is send when it finishes).",
        "operationId": "Project_CreateProject",
        "requestBody": {
          "x-name": "projectCreate",
          "description": "The data for the new project which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectCreate"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The id of the new project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectNewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project",
        "description": "Get the project with given id.",
        "operationId": "Project_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether the project permissions of the current user should be included\n            for each project.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Update project",
        "description": "Update project with the given id.",
        "operationId": "Project_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "Request containing the modify information for the project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{id}/Sprint": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get sprints as list",
        "description": "Get sprints for the project with given id, sprint statistics are not included.",
        "operationId": "Project_GetSprints",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeSprints",
            "in": "query",
            "description": "Include all, active or only inactive sprints. Default is all.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiSprintsInclude"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested project sprints",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiSprint"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Agent": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get agents as list",
        "description": "Get a list with automation agents and pools in the project with the given *projectId*.",
        "operationId": "Project_GetAgents",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The result contains a list with agents.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAgentBase"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Folder": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get top-level folders",
        "description": "Get top-level folders of the project with the given *projectId*.",
        "operationId": "Project_GetFolders",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project from which you want to get the folders.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether to include permissions information in each folder. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A flat list of (top level) folders available in the project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectFolder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Folder/{folderId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get folder",
        "description": "Get the folder with the given folderId.",
        "operationId": "Project_GetFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the of project to which the folder belongs.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder to fetch.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether to include permissions information. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The project folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectFolder"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Modify folder",
        "description": "Modifiy folder with the given *folderId*.",
        "operationId": "Project_ModifyFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "The modify operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectFolderPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Returns ApiLongOperation that either contains a result of the operation that has been performed synchronously (positive) \n            or guid that represents the move operation that is performed in background.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete folder",
        "description": "Delete a folder with the given *folderId*.",
        "operationId": "Project_DeleteFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "deleteContent",
            "in": "query",
            "description": "If true, then tries to delete folder content (items) before deleting the folder. \n            Otherwise (deleteContent is false) deletes the folder only if is empty. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Folder/{folderId}/Subfolder": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get subfolders",
        "description": "Get subfolders of a folder or load all subfolders including child subfolders.",
        "operationId": "Project_GetSubFolders",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the parent folder. Use 0 to get top level folders.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether to include permissions information in each folder. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "Indicates whether all folders in a certain folder are loaded (including children of children and so on). Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "A list of subfolders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectSubFolder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Modify subfolder collection",
        "description": "Modify collection of subfolders in given folder (or project, if parentFolderId=0). \n            Depending on OperationType, different patch operations are executed.\n            \n            Currently supported: \n            1) OperationType = BatchCreate\n            Batch-create subfolders in given folders. Allows to create whole subtree with single call. ",
        "operationId": "Project_ModifySubfolders",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the parent folder. Zero for root folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "A patch operation to be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectSubfoldersPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create folder",
        "description": "Create a new folder in given location (use folderId=0 to create a folder directly in the project's root).\n            If SourceFolder is provided then new folder is created as a copy of existing folder (all the items are copied as well), recursively. \n            Currently folder can be copied in scope of one project only (cross-project copy is not supported). \n            Note: folder names are unique in given level. If you try to create a duplicate the proper error will be returned.",
        "operationId": "Project_CreateFolder",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the parent folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "New folder details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectFolderCreate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Returns either id of the created folder (when creating from scratch) of LongOperation \n            identifier to track the asynchronous process of the copying. \n            Note: due to limitation, the information returned when tracking LongOperation-s of this type does not contain information about actual numbers,\n            contains only jos status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfInteger"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Folder/{folderId}/SubfolderPath": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get sub and parent folders as list",
        "description": "Get subfolders of a given folder and all its parents up to the top (excluding root folder i.e. project level).",
        "operationId": "Project_GetSubFoldersPath",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder. Use 0 to get top level folders.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether to include permissions information in each folder. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Returned list contains subfolders of a given folder but also subfolders of all folders going \"up\" in the folder tree. \n            The main purpose of this is to be able to render an expanded folder tree up to the given folder (so all parent folders are expanded as well).\n            a list of direct subfolders available in the given folder (optionally also subfolders of parent folders). \n            Returned list is ordered in a way that parent folder is always before the child folder and folders on same level are natural sorted by name. \n            ",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectSubFolder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Item": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Search items",
        "description": "Search for items in the project which contain the searchTerm in their id or name.\n            Note: although this method supports searching for items of any type (see itemType parameter) \n            the result of such a call is the aggregation of results retrived per each item type (what is specially important in regard to \n            firstResults/maxResults parameters). Please refer to description of firstResults/maxResults for details.",
        "operationId": "Project_SearchItems",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder. If zero then search through the whole project.\n              This parameter is optional (default is 0).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The string to seach for. The following wildcards are supported: \n              _ for a single character, % for zero or more characters. Empty search string returns all elements.\n              This parameter is optional (default is empty).\n            ",
            "schema": {
              "type": "string",
              "default": "",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "itemType",
            "in": "query",
            "description": "The item type to search for. \n            This parameter is optional (default behavior is to return items of all types).\n            Note: if itemType is not provided the result of a call is the aggregation of results retrived for all available item types. \n            The parameters firstResults/maxResults (if provided) are effective in each group separately. \n            ",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiItemType"
                    }
                  ]
                }
              ]
            },
            "x-position": 4
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "If true archived items are returned as well (default is false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          },
          {
            "name": "firstResults",
            "in": "query",
            "description": "Specifies how many items to skip when returning results from list of matching items ordered by last modification date.\n              Usefull for implementing pagination (see also maxResults parameter). \n              This parameter is optional (default value is 0 which means to not skip any items).\n              Note: if itemType is not specified, the firstResults parameter affects each of results group separately (per separate item type of all found).\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 6
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Specifies how many items to retrive (from list of matching items ordered by last modification date, \n              starting from location defined by firstResults). Usefull for implementing pagination. \n              This parameter is optional (default value is 0 which means to retrive all found items).\n              Note: if itemType is not specified, the maxResults parameter affects each of results group separately (per separate item type of all found).\n              WARNING! if this parameter is not specified, all matching items are returned despite of actual number. \n              Please use with caution in bigger projects as might lead to performance problems.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 7
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "If true permissions are returned as well (default is false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "The result contains a list with basic information on the found items and some meta information.\n            The results are ordered descending by date of last modification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemSearchResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/{itemType}/FieldRules": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get item type field rules",
        "description": "Get the field rules for the given itemType in the project\n            with the given projectId.",
        "operationId": "ProjectMeta_GetFieldRules2",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the field rules are requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the field rules are requested.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all field rules for the specified item type in the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFieldRulesWithOwnership"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Replace item type field rules",
        "description": "Replace the field rules for the specified itemType in the project\n            with the given projectId. The field rules will be completely replaced\n            with the rules provided in this request.",
        "operationId": "ProjectMeta_ReplaceFieldRules",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project in which the field rules are replaces.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the field rules are replaced.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The changes which should be applied to the field rules.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFieldRulesUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/{itemType}/Fields": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get fields meta-data as list",
        "description": "Get meta-data of fields in the project with the given *projectId* and *itemType*.\n            also returns the EditMeta of each field.",
        "operationId": "ProjectMeta_GetProjectFieldsMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to look in",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The type of the item (Defect, Requirement etc.)",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "includeRichTextFields",
            "in": "query",
            "description": "Indicates whether richtext fields should be included",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "sortMode",
            "in": "query",
            "description": "The way in which the fields are sorted",
            "schema": {
              "default": "ByTitle",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiFieldSortMode"
                }
              ]
            },
            "x-position": 4
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Indicates whether deactivated fields should be included",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The list of fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiFieldMeta"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/{itemType}/Fields/{fieldId}": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get field meta-data",
        "description": "Get meta-data of field in the project with the given *projectId*, *itemType* and *fieldName*.\n            Note: For performance reasons, this does not include the EditMeta of the field.",
        "operationId": "ProjectMeta_GetProjectFieldMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Id of the project to look in",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "Type of the item (Defect, Requirement etc.)",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "PropertyName of a field to be retrieved",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "includeDeactivated",
            "in": "query",
            "description": "Indicates whether deactivated fields should be included",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The requested field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFieldMeta"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/{itemType}/Fields/{fieldId}/Entries": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get dictionary entries",
        "description": "Get the set of dictionary entries of the specified dictionary field.",
        "operationId": "ProjectMeta_GetProjectFieldDictionaryEntries",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the set of dictionary entries is retrieved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the set of dictionary entries is retrieved.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "The id of the field for which the set of dictionary entries is retrieved.\n            The field must be a dictionary field. The id of a field is its internal property name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The set of dictionary entries of the specified field including some metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTemplateDictionary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Add dictionary entry",
        "description": "Add a new entry to the specified dictionary field.\n            Note that shared dictionaries cannot be extended with use of this method. Please use PUT /Project/{id}/Meta/SharedDictionary/{id} instead.",
        "operationId": "ProjectMeta_AddProjectFieldDictionaryEntry",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to which the dictionary entry is added.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type to which the dictionary entry is added.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "The id of the field to which the dictionary entry is added. The field\n            must be a dictionary field. The id of a field is its internal property name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "entry",
          "description": "The new dictionary entry which should be added to the dictionary.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntryNew"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntry"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Replace dictionary entries",
        "description": "Replace the list of entries of the specified dictionary field. You should get the list of dictionary entries first, modify this list and\n            then save it here. The API will verify that your changes are based on the most recent version\n            of the dictionary.",
        "operationId": "ProjectMeta_UpdateProjectFieldDictionaryEntries",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the dictionary values are modified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the dictionary values are modified.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          },
          {
            "name": "fieldId",
            "in": "path",
            "required": true,
            "description": "The id of the field for which the dictionary values are modified. The field\n            must be a dictionary field. The id of a field is its internal property name.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "updatedDictionary",
          "description": "The modified dictionary values which should be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectTemplateDictionaryUpdate"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/FieldRules": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get field rules",
        "description": "Get the field rules for all item types in the project with\n            the given projectId.",
        "operationId": "ProjectMeta_GetFieldRules",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the field rules are requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all field rules for all item types in the specified project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectFieldRules"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Update field rules",
        "description": "Update the field rules for all item types in the project with the given\n            projectId. The rules for a certain item type will only be modified\n            if an update for the item type is provided in the request.",
        "operationId": "ProjectMeta_ModifyFieldRules",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project in which the field rules are modified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The changes which should be applied to the field rules.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectFieldRulesUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/Fields": {
      "patch": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Modify fields",
        "description": "Modify multiple fields in the project with the given projectId\n            each field should be specified by the FieldId and by the ItemType.",
        "operationId": "ProjectMeta_ModifyFields",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Id of the project to look in.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "forceLayoutChange",
            "in": "query",
            "description": "indicates that the changes should be made even though they causes\n            significant changes to layout in desktop client accordingly.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "patchOperations",
          "description": "The requested patchoperations.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiFieldPatchOperation"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/NotificationRule": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get notification rules as list",
        "description": "Get default notification rules of the project with the given *projectId*.",
        "operationId": "ProjectMeta_GetProjectDefaultNotificationRule",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectNotificationRule"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Replace notification rule",
        "description": "Replace the project default notification rule in the project with the given *projectId*.",
        "operationId": "ProjectMeta_UpdateProjectDefaultNotificationRule",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newRules",
          "description": "Necessary information to create a new default notification rules.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiFolderNotificationRuleReplacementWithType"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/Options": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get setting options",
        "description": "Get options for the project with the given projectId together\n            with some additional information regarding the ownership of the \n            project options (either project itself or the master project, \n            in case of shared template setup).",
        "operationId": "ProjectMeta_GetProjectOptions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectOptionsWithOwnership"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Replace setting options",
        "description": "Replace options for the project with the given projectId.",
        "operationId": "ProjectMeta_SaveProjectOptions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "apiProjectOptions",
          "description": "The new options of the project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectOptions"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/ProjectTemplateInfo": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get project template info",
        "description": "Get the project template information which other projects are affected by the change \nand contains for each api item layout the information if the layout is webclient conform.",
        "operationId": "ProjectMeta_GetProjectTemplateInfos",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Id of the project to look in.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTemplateInformation"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/SharedDictionary": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get shared dictionaries as list",
        "description": "Get list of shared dictionaries defined in the project with the given *projectId*. \n            Each of the shared dictionaries is enriched by the usage information \n            i.e. names and locations of custom fields that reference this shared dictionary. ",
        "operationId": "ProjectMeta_GetSharedDictionaries",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to look in.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeEntries",
            "in": "query",
            "description": "If true then returned dictionaries include also entries (default: true).",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The list of shared dictionaries in the project with/without entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectTemplateDictionaryWithUsage"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Create shared dictionary",
        "description": "Create shared dictionary in the project with the given *projectId*.",
        "operationId": "ProjectMeta_CreateSharedDictionary",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newDictionary",
          "description": "Data of new dictionary to be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectTemplateDictionaryNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTemplateDictionary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/SharedDictionary/{dictionaryId}": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Get shared dictionary",
        "description": "Get shared dictionary defined in the project with the given *projectId*. \n            Returned data includes information about usage of the dictionary \n            i.e. names and locations of custom fields that reference this shared dictionary.",
        "operationId": "ProjectMeta_GetSharedDictionary",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "dictionaryId",
            "in": "path",
            "required": true,
            "description": "The id of the dictionary.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Shared dictionary defined in given project identified by given Id.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTemplateDictionaryWithUsage"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Delete shared dictionary",
        "description": "Delete shared dictionary with the given *dictionaryId*.\n            Note: only unused dictionaries can be deleted (unused means they are not referenced by any of the custom fields).",
        "operationId": "ProjectMeta_DeleteSharedDictionary",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "dictionaryId",
            "in": "path",
            "required": true,
            "description": "The id of the dictionary.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Update shared dictionary",
        "description": "Update shared dictionary in the project with the given *projectId*.",
        "operationId": "ProjectMeta_UpdateSharedDictionary",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "dictionaryId",
            "in": "path",
            "required": true,
            "description": "The id of the dictionary.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "updatedDictionary",
          "description": "The data of the shared dictionary wich should be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectTemplateDictionaryUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/Transfer": {
      "get": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Export configuration",
        "description": "Export the configuration of the project with the given *projectId* in to a file.",
        "operationId": "ProjectMeta_Export",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project of which the configuration should be exported",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The file containing the exported project configuration",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Import configuration",
        "description": "Import the project configuration from the given file.",
        "operationId": "ProjectMeta_ImportFromFile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to which the project configuration should be imported",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemTypes",
            "in": "query",
            "description": "The item types to import as comma-separated list.\n            By default, all item types are imported.\n            Possible values for item type are: Defect, Requirement, TestCase, TestScenario, TestExecution and Script.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "importSubtemplates",
            "in": "query",
            "description": "Indicates whether sub templates should be imported.\n            By default, sub templates are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          },
          {
            "name": "importWorkflows",
            "in": "query",
            "description": "Indicates whether workflows should be imported.\n            By default, workflows are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "projectConfig",
          "description": "The file which contains the project configuration to import",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": false
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Import configuration",
        "description": "Import the project configuration from the given file.",
        "operationId": "ProjectMeta_Import",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to which the project configuration should be imported",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemTypes",
            "in": "query",
            "description": "The item types to import as comma-separated list.\n            By default, all item types are imported.\n            Possible values for item type are: Defect, Requirement, TestCase, TestScenario, TestExecution and Script.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "importSubtemplates",
            "in": "query",
            "description": "Indicates whether sub templates should be imported.\n            By default, sub templates are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          },
          {
            "name": "importWorkflows",
            "in": "query",
            "description": "Indicates whether workflows should be imported.\n            By default, workflows are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "projectConfig",
          "description": "The file which contains the project configuration to import.\nThe file should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nfirst.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFileUploadInfo"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Meta/Transfer/Preview": {
      "post": {
        "tags": [
          "ProjectMeta"
        ],
        "summary": "Import configuration preview",
        "description": "Creates an import configuration preview for the project from the given file.",
        "operationId": "ProjectMeta_ImportPreview",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to which the project configuration should be imported.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemTypes",
            "in": "query",
            "description": "The item types to import as comma-separated list.\n            Possible values for item type are: Defect, Requirement, TestCase, TestScenario and Script.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "importSubtemplates",
            "in": "query",
            "description": "Indicates whether sub templates should be imported.\n            By default, sub templates are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          },
          {
            "name": "importWorkflows",
            "in": "query",
            "description": "Indicates whether workflows should be imported.\n            By default, workflows are imported",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 5
          }
        ],
        "requestBody": {
          "x-name": "projectConfig",
          "description": "The file which contains the project configuration to import.\nThe file should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nfirst.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiFileUploadInfo"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiImportProjectTemplatePreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Notification/Templates": {
      "get": {
        "tags": [
          "ProjectNotification"
        ],
        "summary": "Get notification templates",
        "description": "Get notification templates in the project with the given *projectId*. \nNote: as for now, only base-item related notification templates are returned (project plan related are ignored). ",
        "operationId": "ProjectNotification_GetProjectNotificationTemplates",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to look in",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectNotificationTemplates"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProjectNotification"
        ],
        "summary": "Replace notification templates",
        "description": "Replace notification templates in the project with the given *projectId* with new set of templates. \nIt is expected the set contains templates for all possible notification types \nand they are all in the same culture. \nNote: as for now, only base-item related notification templates are considered \n(project plan related notification remain unchanged, if there are any). ",
        "operationId": "ProjectNotification_SaveProjectNotificationTemplates",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Id of the project to save templates in",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "templates",
          "description": "Data of templates to be saved",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiProjectNotificationTemplate"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Notification/Templates/Transfer": {
      "get": {
        "tags": [
          "ProjectNotification"
        ],
        "summary": "Export notification templates",
        "description": "Get content (.aquanotif file) of the email notification templates in given project. \nThe Content-Type is set to 'application/octet-stream'.",
        "operationId": "ProjectNotification_ExportProjectNotificationTemplates",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The content of email notification templates",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProjectNotification"
        ],
        "summary": "Import notification templates",
        "description": "Import one or more notification templates to the project with the given\n*projectId* from the export file (.aquanotif) which is included in the request body.",
        "operationId": "ProjectNotification_ImportProjectNotificationTemplates",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to which the notification templates are imported",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "file",
          "description": "The content of the export file (.aquanotif). The content can be\n            provided either plain in the body or as multipart form data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": false
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectNotificationTemplates"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/ReportDefinition": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get report definitions as list",
        "description": "Get report definitions of the project with the given projectId.",
        "operationId": "Project_GetReportDefinitions",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates whether to include permissions information. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiReportDefinitionInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Import report defintions",
        "description": "\"Confirms\" import of previously uploaded report definitions (using [POST]:api/File)",
        "operationId": "Project_ImportReportDefinition",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project where the reports should be imported.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request containing a list of uploaded report definitions and the patch operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/ReportDefinition/Transfer": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Import report definition",
        "description": "Direct import for a single report definition file.",
        "operationId": "Project_ImportSingleReportDefinition",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The file name to use. This parameter is optional. If it is not\n            specified the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The file to upload. Do NOT provide a JSON here. Instead,\n            directly upload the file by sending it as the request body or sending some multi part\n            form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": false
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "The metadata of the uploaded file."
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/ReportPlugin": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get report plugins as list",
        "description": "Get report plugins available in the project with the given *projectId*.",
        "operationId": "Project_GetReportPlugins",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The result contains a list with report plugins.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiReportPlugin"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/Requirement": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get requirement information as list",
        "description": "Get a list with basic information on all requirements in the given project.",
        "operationId": "Project_GetRequirements",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first result to include. This allows to skip items which are not included in the response. Can be used to implement pagination. This parameter is optional and default is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of results to return. This parameter is optional and default is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "The result contains a list with basic information on the items and some meta information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResultOfApiItemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/User": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project users as list",
        "description": "Get (active) users assigned to the project with the given *projectId*.",
        "operationId": "Project_GetUsers",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of a project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filter",
            "in": "query",
            "description": "If provided then only users containing the given string are returned. Default value is null (no filter).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Indicates how many users to skip (useful for implementing pagination). \n            This parameter is optional, default value is 0, what means not to skip anything.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Indicates how many users should be returned. \n            This parameter is optional, default value is 0, what indicates returning all found users.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available users in given project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/UserAssignment": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create user role assignment",
        "description": "Create a new user role assignment for the project or folder level.",
        "operationId": "Project_CreateUserAssignment",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "assignementCreate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserProjectFolderAssignment"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete user role assignment",
        "description": "Delete user role assignment for the project or folder level.",
        "operationId": "Project_DeleteUserAssignment",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "cascadeDelete",
            "in": "query",
            "description": "Indicates whether the deletion is cascaded. When this flag is true and a project-level\n            role assignment for a certain user is deleted, all folder-level role assignments are deleted as well.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get user role assignments",
        "description": "Get user role assignments for the project or folder level.",
        "operationId": "Project_GetUserAssignments",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "recursive",
            "in": "query",
            "description": "This flag is only applicable on project level, it indicates that all assignments (folder level) will be integrated in the response.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGetUserAssignmentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Project"
        ],
        "summary": "Modify user role assignment",
        "description": "Modify user role assignment for the project or folder level.",
        "operationId": "Project_ModifyUserAssignment",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "operation",
          "description": "The modify operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserProjectFolderAssignmentPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/UserRoles": {
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Modify user role assignments",
        "description": "Add and delete project-level and folder-level role assignments for multiple users in scope of\n            a single project. This method supports partial execution. You must check the ErrorOccurred property\n            in the response to be sure that all updates were performed successfully.",
        "operationId": "Project_CreateFolderUserRoles",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "cascadeDelete",
            "in": "query",
            "description": "Indicates whether the deletion is cascaded. When this flag is true and a project-level\n            role assignment for a certain user is deleted, all folder-level role assignments are deleted as well.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "Update data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectUpdateProjectFolderRolesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectUpdateProjectFolderRolesResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Project/{projectId}/UserView": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get user views as list",
        "description": "Get available user views for the project with the given projectId.",
        "operationId": "Project_GetUserViews",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includePermissions",
            "in": "query",
            "description": "Indicates if permissions are loaded.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          },
          {
            "name": "restrictToType",
            "in": "query",
            "description": "Restrict the user views to this item type.",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiItemType"
                    }
                  ]
                }
              ]
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserViewInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/{reportId}/Lock": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Create lock",
        "description": "Create lock for the report with the given *reportId* for exclusive editing.\nRaises error if someone else is currently editing the report. ",
        "operationId": "Report_CreateLock",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report to lock",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the report with the given *reportId*.",
        "operationId": "Report_DeleteLock",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report for which the lock should be released",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/{reportId}/Options": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get report options",
        "description": "Get options of the report with the given *reportId*.",
        "operationId": "Report_GetReportOptions",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeParameter",
            "in": "query",
            "description": "If true the report includes parameter as well, this will significantly slow down the end point.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Report options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReportOptions"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "Update report",
        "description": "Allows to update options of the report with the given *reportId*.",
        "operationId": "Report_UpdateReportDefinitionOptions",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report definition",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "If true, indicates the report is expected to be already locked by the current user and the lock will not be released after the operation finishes.\n            If explicitLock is 'false' then we try to automatically get edit lock (if possible) and then release it after the operation finishes",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "optionsUpdate",
          "description": "This object contains the updated report options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportOptionsUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/Definition": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Create report",
        "description": "Create a new report with given options and default layout.",
        "operationId": "Report_CreateReportDefinition",
        "requestBody": {
          "x-name": "createRequest",
          "description": "This object contains the report details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportCreateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Id of the created report",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Report"
        ],
        "summary": "Modify the collection of reports",
        "description": "Perform operations on the collection of report definitions.",
        "operationId": "Report_UpdateReportDefinitionCollection",
        "requestBody": {
          "x-name": "update",
          "description": "Contains the relevant data to perform an update on the definition collection",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportDefinitionPatchCollectionOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiReportDefinitionPatchCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/Definition/{reportId}": {
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Delete report",
        "description": "Delete report definition with given *reportId*.",
        "operationId": "Report_DeleteReportDefinition",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report definition to be deleted",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Report"
        ],
        "summary": "Modify report",
        "description": "Perform operations on report definition with given *reportId* (e.g. publishing a report).",
        "operationId": "Report_PublishReportDefinition",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report definition to be modified",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "Request containing the type for the report definition modify operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportDefinitionPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/Definition/{reportId}/EditStatus": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the report definition with the given *reportId*.",
        "operationId": "Report_GetEditStatus",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report definition.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/Definition/{reportId}/Transfer": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get report",
        "description": "Get content (.arp file) of the report definition with the given *reportId*.",
        "operationId": "Report_ExportReportDefinition",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "description": "The id of the report definition",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The content of the report definition",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Report/FilePrintout": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Create report printout",
        "description": "Create printout of the given report. \nWARNING! Report generation might take much time. The response is returned when report is fully generated.",
        "operationId": "Report_CreateReportFile",
        "requestBody": {
          "x-name": "request",
          "description": "Report id, source data specification and report options",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Stream containing the generated printout data in requested format.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement": {
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create requirement",
        "description": "Create a new requirement with the given data and returns some basic information on\n            the new requirement.",
        "operationId": "Requirement_Create",
        "parameters": [
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newItem",
          "description": "The data for the new requirement which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemNewWithDescription"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Basic information on the new requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Modify requirement collection",
        "description": "Perform a batch operation with all the requirements\n            specified in the batch operation.",
        "operationId": "Requirement_PerformBatchOperation",
        "requestBody": {
          "x-name": "batchOperation",
          "description": "The batch operation to perform.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Requirement"
        ],
        "summary": "Modify requirement collection",
        "description": "Batch operation that modifies requirements matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.",
        "operationId": "Requirement_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get requirement",
        "description": "Get the requirement with the specified id.",
        "operationId": "Requirement_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement as integer (without RQ).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "Indicates whether information about the\n            edit lock should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "withEditLayout",
            "in": "query",
            "description": "Indicates whether information about the edit layout should be included.\n            Edit layout is a superset of view layout (you don't have to specify withViewLayout) and contains all information \n            required to display and edit the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "withViewLayout",
            "in": "query",
            "description": "Indicates whether information about the\n            view layout should be included. The view layout is a subset of edit layout and \n            contains all information required to display the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The requested requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRequirement"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Update requirement",
        "description": "Update the requirement with the specified id. The changes\n            to perform are provided in the ApiItemUpdate object.",
        "operationId": "Requirement_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement to modify.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that the requirement has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemUpdateWithDescription"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Delete requirement",
        "description": "Delete the requirement with the specified id.",
        "operationId": "Requirement_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Attachment": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get attachments metadata as list",
        "description": "Get all attachments of the requirement with the given *id*.",
        "operationId": "Requirement_GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with meta information on all the attachments of this requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAttachmentInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment with the given *filename* in the requirement with\n            the given *id*. The attachment's content can be provided directly in the request body\n            or inside a multi part form data.",
        "operationId": "Requirement_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The metadata of the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Attachment/{attachmentId}": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get attachment metadata",
        "description": "Get the meta information of the attachment with *attachmentId*\n            of the requirement with the given *id*. The meta information does not contain\n            the content of the attachment which must be fetched separately.",
        "operationId": "Requirement_GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information for the specified attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Delete attachment",
        "description": "Delete the attachment with the given *attachmentId* in the requirement\n            with the given *id*.",
        "operationId": "Requirement_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "Requirement_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/EditMeta": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get fields edit meta",
        "description": "Get information on the fields of an existing requirement when changing the status. \n            Change of status may cause changes to the characteristics of fields \n            (e.g. possible values, requireness etc.) due to workflow rules.",
        "operationId": "Requirement_EditMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement for which the edit meta is requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "statusTo",
            "in": "query",
            "required": true,
            "description": "The id of the status we are switching to.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of the requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/EditStatus": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the requirement with the specified id.",
        "operationId": "Requirement_GetEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/History": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get history",
        "description": "Get the history with all changes to the requirement.",
        "operationId": "Requirement_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all changes in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHistoryEntryRequirement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Lock": {
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create lock",
        "description": "Create lock for the requirement with the given *id* for exclusive editing. The provided\n            *lockInfo* must contain the latest version of the requirement. This call\n            will fail when an outdated version is provided.",
        "operationId": "Requirement_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the requirement with the given *id*.",
        "operationId": "Requirement_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Post": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get posts",
        "description": "Get posts (also known as comments or discussions) of requirement with the id.",
        "operationId": "Requirement_GetPosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "The first result wich should be fetched. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximal number of results wich should be fetched. The default value is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "The sorting order of the result. If true sorted ascending otherwise descending. The default value is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "A list of paginated posts associated with the given requirement and the total count of all posts for this requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostPaginated"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create post",
        "description": "Create a new post with the given content in the requirement with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current requirement\n            can be mentioned.",
        "operationId": "Requirement_CreatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement in which the new post should be created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The content of the new post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The meta information of the new post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Post/{postId}": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get post",
        "description": "Get the post with postId associated with the requirement with id.",
        "operationId": "Requirement_GetPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPost"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Replace post",
        "description": "Replace the existing post with id postId in the requirement with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current requirement\n            can be mentioned.",
        "operationId": "Requirement_UpdatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be replaced.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The new content of the post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The meta information of the replaced post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Delete post",
        "description": "Delete the post with *postId* in the requirement with the given *id*.\n            Posts are not completely deleted but only marked as deleted and their content is removed.",
        "operationId": "Requirement_DeletePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information of the deleted post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Relation": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get relations",
        "description": "Get all relations of the requirement with the given *id*.",
        "operationId": "Requirement_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: Relations.OtherItem.*Info to load basic info on the relation target,\n            Relations.OtherItem.*Details to load the details of the relation target,\n            Item.*Info to load basic info on the item for which the relations were requested,\n            Item.*Details to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the requirement with the *id*\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "Requirement_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Relation/{relationId}": {
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Delete relation",
        "description": "Delete relation of the requirement with the given *id* and *relationId*.\n            Can delete only direct relations.",
        "operationId": "Requirement_DeleteRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "description": "The id of the relation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "Requirement_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Subrequirement": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get subrequirements as list",
        "description": "Get all subrequirements of the requirement with the given *id*.",
        "operationId": "Requirement_GetSubrequirements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth up to which the subrequirements are loaded.\n            The default is 1 which means that only the immediate childs are included.\n            ",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A list with basic information on all the subrequirements.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiSubrequirement"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Add subrequirement",
        "description": "Add the requirement specified in *newSubrequirement* as subrequirement\n            to the requirement with *id*. The new subrequirement will be added as the last\n            child of the requirement with *id*. When the new subrequirement is already a subrequirement\n            of another requirement, it will be silently removed from that requirement.",
        "operationId": "Requirement_CreateSubrequirement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newSubrequirement",
          "description": "Information on the requirement which should be added as a sub requirement.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSubrequirementNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The new subrequirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSubrequirement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Subrequirement/{subrequirementId}": {
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Update subrequirement",
        "description": "Update the subrequirement with *subrequirementId* in the\n            requirement with *id*. Currently, this call only allows to change\n            the position of the subrequirement in the parent requirement. You can only\n            change first-level subrequirements. To change the parent of a subrequirement,\n            you can just create the subrequirement at the new parent. The create will take\n            care of detaching the subrequirement from its old parent.",
        "operationId": "Requirement_UpdateSubrequirement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "subrequirementId",
            "in": "path",
            "required": true,
            "description": "The id of the subrequirement to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The information which should be updated in the subrequirement.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSubrequirementUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The updated subrequirement.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSubrequirement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Remove subrequirement",
        "description": "Remove the subrequirement with *subrequirementId* from the\n            requirement with *id*. This only removes the subrequirement\n            from the requirement but does not delete the subrequirement itself.\n            You can only remove first-level subrequirements.",
        "operationId": "Requirement_DeleteSubrequirement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "subrequirementId",
            "in": "path",
            "required": true,
            "description": "The id of the subrequirement to remove.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/SubrequirementTree": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get subrequirement tree",
        "description": "Gets the full subrequirement tree which contains the requirement with the\n            given *id*. The tree contains both ancestors and descendents of the given\n            requirement.",
        "operationId": "Requirement_GetSubrequirementTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "If true, locking information is included in the result.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A list with basic information on all requirements in the tree.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiSubrequirement"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Rearrange subrequirement tree",
        "description": "Rearrange the subrequirements in the tree.",
        "operationId": "Requirement_UpdateSubrequirementTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "Contains the information how the sub requirement tree\n            should be rearranged.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSubrequirementsUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "A list with basic information on all requirements in the tree."
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Add subrequirements",
        "description": "Add given list of requirements as new subrequirements to the specified requirement.\n            The new subrequirements are added at the end.",
        "operationId": "Requirement_AddSubrequirements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newSubrequirements",
          "description": "The list of new subrequirements to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiSubrequirementsNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "A list with basic information on all requirements in the tree."
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/SubrequirementTree/Lock": {
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Create subrequirment locks",
        "description": "Create locks for all subrequirements of the requirement with the given *id* for editing\n            which can be locked by the current user. This depends on whether the user has edit permission\n            and whether the item is not already locked.\n            The returned list contains the full requirement tree and not only the subrequirements of\n            the requirement with the given *id*.",
        "operationId": "Requirement_LockSubrequirementTree",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with basic information on all requirements in the tree including the\n            information whether the subrequirement was successfully locked.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiSubrequirement"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Watchers": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get watching users as list",
        "description": "Get list of users watching this requirement.",
        "operationId": "Requirement_GetWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of users watching this requirement.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Requirement"
        ],
        "summary": "Add to watch list",
        "description": "Add given user to list of watchers of the requirement. \n            Warning! currently the only supported operation is to subscribe yourself.",
        "operationId": "Requirement_AddWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newWatcher",
          "description": "Contains id of the user to be subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatcherNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Requirement"
        ],
        "summary": "Updates the watch list",
        "operationId": "Requirement_UpdateWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "watchersUpdate",
          "description": "Contains the id of the user to be (un-)subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatchersUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/{id}/Watchers/{userId}": {
      "delete": {
        "tags": [
          "Requirement"
        ],
        "summary": "Remove from watch list",
        "description": "Remove given user from list of watchers of the requirement. \n            Warning! currently the only supported operation is to unsubscribe yourself.",
        "operationId": "Requirement_RemoveWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the requirement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to be unsubscribed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/CreateMeta": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get fields metadata",
        "description": "Get a basic information on the fields of a new requirement created in given project and folder. \n            The information contains details about available fields and their characteristics.",
        "operationId": "Requirement_CreateMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder where the requirement will be created (0 means root level).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "statusTo",
            "in": "query",
            "description": "The id of status with which the new item will be saved. Workflow\n            restrictions might depend on this status and hence the meta data might change depending\n            on the selected status. If no status id is provided, the default value for the status\n            is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of a new requirement created in given project and folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemCreateMeta"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Requirement/ItemList": {
      "get": {
        "tags": [
          "Requirement"
        ],
        "summary": "Get requirements",
        "description": "Get a list of requirements.",
        "operationId": "Requirement_GetItemList",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ResetPassword": {
      "post": {
        "tags": [
          "ResetPassword"
        ],
        "summary": "Resets the user's password",
        "description": "Resets the user's password based on provided email and tenant's name \n(if multitenant environment is used)",
        "operationId": "ResetPassword_Reset",
        "requestBody": {
          "x-name": "apiResetPasswordUser",
          "description": "Information about email and tenant",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiResetPasswordUser"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResetPasswordResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script": {
      "patch": {
        "tags": [
          "Script"
        ],
        "summary": "Modify script collection",
        "description": "Batch operation that modifies scripts matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.",
        "operationId": "Script_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get script",
        "description": "Get the script with the specified *id*.",
        "operationId": "Script_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script as integer.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "Indicates whether information about the\n            edit lock should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "withEditLayout",
            "in": "query",
            "description": "Indicates whether information about the edit layout should be included.\n            Edit layout is a superset of view layout (you don't have to specify withViewLayout) and contains all information \n            required to display and edit the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "withViewLayout",
            "in": "query",
            "description": "Indicates whether information about the\n            view layout should be included. The view layout is a subset of edit layout and \n            contains all information required to display the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The requested script.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiScript"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Attachment": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get attachments metadata as list",
        "description": "Get all attachments of the script with the given *id*.",
        "operationId": "Script_GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with meta information on all the attachments of this script.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAttachmentInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment with the given *filename* in the script with\n            the given *id*. The attachment's content can be provided directly in the request body\n            or inside a multi part form data.",
        "operationId": "Script_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The metadata of the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Attachment/{attachmentId}": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get attachment metadata",
        "description": "Get the meta information of the attachment with *attachmentId*\n            of the script with the given *id*. The meta information does not contain\n            the content of the attachment which must be fetched separately.",
        "operationId": "Script_GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information for the specified attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Delete attachment",
        "description": "Delete the attachment with the given *attachmentId* in the script\n            with the given *id*.",
        "operationId": "Script_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "Script_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/EditStatus": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the script with the specified *id*.",
        "operationId": "Script_GetEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/History": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get history",
        "description": "Get the history with all changes to the script.",
        "operationId": "Script_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all changes in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHistoryEntry"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Lock": {
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Create lock",
        "description": "Create lock for the script with the given *id* for exclusive editing. The provided\n            *lockInfo* must contain the latest version of the script. This call\n            will fail when an outdated version is provided.",
        "operationId": "Script_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the script with the given *id*.",
        "operationId": "Script_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Relation": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get relations",
        "description": "Get all relations of the script with the given *id*.",
        "operationId": "Script_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: Relations.OtherItem.*Info to load basic info on the relation target,\n            Relations.OtherItem.*Details to load the details of the relation target,\n            Item.*Info to load basic info on the item for which the relations were requested,\n            Item.*Details to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the script with the *id*\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "Script_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Relation/{relationId}": {
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Delete relation",
        "description": "Delete relation of the script with the given *id* and *relationId*.\n            Can delete only direct relations.",
        "operationId": "Script_DeleteRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "description": "The id of the relation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "Script_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Watchers": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get watching users as list",
        "description": "Get list of users watching this script.",
        "operationId": "Script_GetWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of users watching this script.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "Script"
        ],
        "summary": "Add to watch list",
        "description": "Add given user to list of watchers of the script. \n            Warning! currently the only supported operation is to subscribe yourself.",
        "operationId": "Script_AddWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newWatcher",
          "description": "Contains id of the user to be subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatcherNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "Script"
        ],
        "summary": "Updates the watch list",
        "operationId": "Script_UpdateWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "watchersUpdate",
          "description": "Contains the id of the user to be (un-)subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatchersUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/{id}/Watchers/{userId}": {
      "delete": {
        "tags": [
          "Script"
        ],
        "summary": "Remove from watch list",
        "description": "Remove given user from list of watchers of the script. \n            Warning! currently the only supported operation is to unsubscribe yourself. ",
        "operationId": "Script_RemoveWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the script.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to be unsubscribed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Script/ItemList": {
      "get": {
        "tags": [
          "Script"
        ],
        "summary": "Get scripts",
        "description": "Get a list of scripts.",
        "operationId": "Script_ItemList",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/ServerAdministrator/Tree": {
      "get": {
        "tags": [
          "ServerAdministrator"
        ],
        "summary": "Get subfolders",
        "description": "Get project and folders according to the request. This method is mainly dedicated for rendering the project tree.",
        "operationId": "ServerAdministrator_GetProjectTreeData",
        "parameters": [
          {
            "name": "parentFolders",
            "in": "query",
            "required": true,
            "description": "JSON array of requested parent folders to retrieve subfolder for. For example:\n            ['5_0', '3_114'] where first number is a project id and second number is folder id (or zero for root).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "includeProjects",
            "in": "query",
            "description": "Indicate whether to return project list as well.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archived items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "A response object containing project list (if requested) and subfolders of all requested nodes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectTreeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Session": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Use this to get info on current user",
        "operationId": "Session_Get",
        "responses": {
          "200": {
            "description": "Returns information about the currently authenticated user.\nIf the caller is not authenticated they will get a 401 Unauthorized status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMyUserInfo"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Logs the current user out of aqua, destroying the existing session, if any.",
        "operationId": "Session_Delete",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Colors": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get predefined colors",
        "description": "Get a list with predefined colors used for reports and user views.",
        "operationId": "System_GetColors",
        "responses": {
          "200": {
            "description": "The list of colors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemGetColorsResponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/License": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get licenses",
        "description": "Get a list with all licenses which are defined in the system.",
        "operationId": "System_GetLicenses",
        "responses": {
          "200": {
            "description": "The list of licenses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGetLicenseResponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/License/Incidents": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get login incidents",
        "description": "Get a list with all the login incidents.\nThe results are ordered descending from the .",
        "operationId": "System_GetLoginIncidents",
        "parameters": [
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 2
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of login incidents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResultOfApiLoginIncident"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/License/LastUserActivity": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get last user activity",
        "description": "This shows the last logins with licenses on a per user basis.",
        "operationId": "System_GetLastUserActivity",
        "parameters": [
          {
            "name": "startAt",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 1
          },
          {
            "name": "maxResults",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 2
          },
          {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "List of logins with licenses.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResultOfApiUserLastActivityInfo"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/License/Permissions": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get licenses permissions",
        "description": "Get a list with all the licenses permissions.",
        "operationId": "System_GetLicensePermissions",
        "parameters": [
          {
            "name": "licenseProfileCode",
            "in": "query",
            "required": true,
            "description": "The profile code of the license.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The permissions list\n            .",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGetLicensePermissionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/LongOperation/{guid}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get long operation information",
        "description": "Get information (including status) of a long operation identified by given guid. \n            The actual data returned from this call depends on operation type - please refer \n            to documentation of the method that starts the operation for information what kind of \n            information is returned in ApiLongOperationInfo. \n            The information returned here might sometimes be heavyweight (e.g. include list of failures). \n            Please consider using GET LongOperation/{guid}/Status if you are only interested \n            in the current status of the operation.\n            Please also consider using SignalR to receive an event when long operation finishes. \n            Warning! Server keeps information about finished long operations only for certain time (few hours or until server is recycled).\n            After that the information is not available any more.\n            ",
        "operationId": "System_GetLongOperationInfo",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the long operation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Record containing information about long operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationInfoBase"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify long operation",
        "description": "Performs modification of a long operation identified by given guid.",
        "operationId": "System_ModifyLongOperation",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the long operation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "modification",
          "description": "The change to be performed (e.g. abort).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLongOperationPatchOperation"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/LongOperation/{guid}/Status": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get long operations status",
        "description": "Get current status of a long operation identified by given guid. \n            This is a lightweight version of the GET LongOperation/{guid} call and returns only the status information. \n            Please also consider using SignalR to receive an event when long operation finishes. \n            Warning! Server keeps information about finished long operations only for certain time (few hours or until server is recycled).\n            After that the information is not available any more.",
        "operationId": "System_GetLongOperationStatus",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the long operation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the long operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationStatus"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/NotifyUsers": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Send email notification",
        "description": "Sends custom email notification to given users. \n            Warning! Allows to send notification to \"known\" users only i.e. users that are assigned \n            to projects where current user is assigned.",
        "operationId": "System_SendNotification",
        "requestBody": {
          "x-name": "notification",
          "description": "Email notification to be send.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiCustomNotificationNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Permissions": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get system permissions",
        "description": "Get the system permissions.",
        "operationId": "System_GetPermissions",
        "parameters": [
          {
            "name": "reload",
            "in": "query",
            "description": "If true then forces reload of user permissions before returning the result. Default: false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "System permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemPermissions"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Permissions/All": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get all system available permissions",
        "operationId": "System_GetAllPermissions",
        "responses": {
          "200": {
            "description": "All avaliable permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericPermissionInfo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Permissions/Dependencies": {
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Validate permission dependencies",
        "description": "Validates the permission dependencies.",
        "operationId": "System_ValidatePermissionDependencies",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiDependenciesPermissionPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The dependencies information about the permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPermissionDependenciesPatchResponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Project": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get all projects",
        "description": "Get all projects. ",
        "operationId": "System_GetProjects",
        "parameters": [
          {
            "name": "excludeArchived",
            "in": "query",
            "description": "Indicates whether archived projects are excluded or not",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectIdName"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/RegisteredEditor": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get registered editors",
        "description": "Get information about registered editors used e.g. in automation.",
        "operationId": "System_GetRegisteredEditors",
        "responses": {
          "200": {
            "description": "Registered editors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRegisteredFileEditorsRepository"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Role": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get roles as list",
        "description": "Get a list with all roles which are defined in the system.",
        "operationId": "System_GetRoles",
        "responses": {
          "200": {
            "description": "The list of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiRoleIdName"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Create new role",
        "description": "Create a new role with the given data.",
        "operationId": "System_CreateRole",
        "requestBody": {
          "x-name": "newRole",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRoleNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The new role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRoleNewResponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Role/{roleId}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get role",
        "description": "Get a role whith permissions.",
        "operationId": "System_GetRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The role.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRole"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "Update role",
        "description": "Update the role with the specified *roleId*.",
        "operationId": "System_UpdateRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "The id of the role",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateRole"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete role",
        "description": "Delete the role with the specified *roleId*.",
        "operationId": "System_DeleteRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "The id of the role.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify role",
        "description": "Modify the role with the specified *roleId*.",
        "operationId": "System_ModifyRole",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "description": "The id of the role.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRolePatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/Settings": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get system settings",
        "description": "Get the system wide settings.",
        "operationId": "System_GetSettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSystemSettings"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/ShellAutomationProfile": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get shell automation profiles",
        "description": "Get array of registered shell automation profiles. Each profile is a JSON structure similar to this:\n            \n            \n            \n            {\n                \"Type\": \"PowerShell\",\n                \"Key\": \"Profile-1\",\n                \"Name\": {\n                    \"De\": \"Profile name (de)\",\n                    \"En\": \"Profile name (en)\"\n                },\n                \"Icon16\": \"[base64 serialized icon data here or null]\",\n                \"Icon32\": \"[base64 serialized icon data here or null]\",\n                \"Script\": {\n                    \"Header\": {\n                        \"De\": null,\n                        \"En\": null,\n                    },\n                    \"Visible\": false,\n                    \"Editable\": false,\n                    \"Content\": \"[base64 serialized script content here or null]\",\n                },\n            \n                \"Files\": {\n                    \"Header\": {\n                        \"De\": \"File 1 (de)\",\n                        \"En\": \"File 1 (en)\"\n                    },\n                    \"Visible\": true,\n                    \"FileButtons\": {\n                        \"DeleteFile\": false,\n                        \"EditFile\": true,\n                        \"DownloadFile\": false,\n                    },\n                    \"UploadFile\": false,\n            \n                    \"DefaultFiles\": [\n                        {\n                            \"FileName\": \"cycle.csq\",\n                            \"Content\": \"[base64 serialized icon data here or null]\",\n                            \"Visible\": true,\n                            \"FileButtons\": {\n                                \"DeleteFile\": false,\n                                \"EditFile\": true,\n                                \"DownloadFile\": false,\n                            },\n                        }\n                    ]\n                },\n            }\n            \n            ",
        "operationId": "System_GetShellAutomationProfiles",
        "responses": {
          "200": {
            "description": "An array of registered shell automation profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/User": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get all users",
        "description": "Get all users. ",
        "operationId": "System_GetUsers",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserMinimalInfo"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Create user",
        "description": "Create a new user with the given data.",
        "operationId": "System_CreateUser",
        "parameters": [
          {
            "name": "sendNotification",
            "in": "query",
            "description": "This parameter allows to disable notifications to the user.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newUser",
          "description": "The data for the new user which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "200": {
            "description": "Id of the created user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserNewReponse"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/User/{userId}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get user",
        "description": "Get the user with the specified *userId*.",
        "operationId": "System_GetUserInformation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeProjects",
            "in": "query",
            "description": "Indicates whether projects are included or not.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "includeLicenses",
            "in": "query",
            "description": "Indicates whether licenses are included or not.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete user",
        "description": "Delete the user with the specified *userId*.",
        "operationId": "System_DeleteUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "System"
        ],
        "summary": "Update user",
        "description": "Update the user with the specified *userId*.",
        "operationId": "System_UpdateUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUpdateUser"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify user",
        "description": "Modify the user with the specified *userId*.",
        "operationId": "System_ModifyUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/User/{userId}/License": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Assigne license",
        "description": "Assigne license to the user with the specified *userId*.",
        "operationId": "System_AssigneLicense",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "licenseAssignment",
          "description": "License information",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserLicenseAssignment"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/User/{userId}/License/{licenseCode}": {
      "patch": {
        "tags": [
          "System"
        ],
        "summary": "Modify license",
        "description": "Modify license type for the user with the specified *userId*.",
        "operationId": "System_ModifyLicense",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "licenseCode",
            "in": "path",
            "required": true,
            "description": "The code of the license.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The necessary information to modify the license assignment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserLicenseAssignmentPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "System"
        ],
        "summary": "Delete license assignment",
        "description": "Remove license assignment for the user with the specified *userId*.",
        "operationId": "System_DeleteLicense",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "licenseCode",
            "in": "path",
            "required": true,
            "description": "The code of the license.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/System/User/{userId}/Photo": {
      "put": {
        "tags": [
          "System"
        ],
        "summary": "Upload user picture",
        "description": "Upload picture that replaces profile photo of the user with the specified *userId*.",
        "operationId": "System_ChangeUserPhoto",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "Picture data.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create test case",
        "description": "Create a new test case with the given data and returns some basic information on\n            the new test case.",
        "operationId": "TestCase_Create",
        "parameters": [
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newItem",
          "description": "The data for the new test case which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemNewWithTestDataAndTestSteps"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Basic information on the new test case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "TestCase"
        ],
        "summary": "Modify test case collection",
        "description": "Batch operation that modifies test cases matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.",
        "operationId": "TestCase_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test case",
        "description": "Get the test case with the specified *id*.",
        "operationId": "TestCase_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case as integer (without TC).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "Indicates whether information about the\n            edit lock should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "withEditLayout",
            "in": "query",
            "description": "Indicates whether information about the edit layout should be included.\n            Edit layout is a superset of view layout (you don't have to specify withViewLayout) and contains all information \n            required to display and edit the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "withViewLayout",
            "in": "query",
            "description": "Indicates whether information about the\n            view layout should be included. The view layout is a subset of edit layout and \n            contains all information required to display the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The requested test case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestCase"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Update test case",
        "description": "Update the test case with the specified *id*. The changes\n            to perform are provided in the *ApiItemUpdate* object.",
        "operationId": "TestCase_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case to modify.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that the test case has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemUpdateWithTestDataAndTestSteps"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete test case",
        "description": "Delete the test case with the specified *id*.",
        "operationId": "TestCase_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Attachment": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get attachments metadata as list",
        "description": "Get all attachments of the test case with the given *id*.",
        "operationId": "TestCase_GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with meta information on all the attachments of this test case.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAttachmentInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment with the given *filename* in the test case with\n            the given *id*. The attachment's content can be provided directly in the request body\n            or inside a multi part form data.",
        "operationId": "TestCase_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The metadata of the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Attachment/{attachmentId}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get attachment metadata",
        "description": "Get the meta information of the attachment with *attachmentId*\n            of the test case with the given *id*. The meta information does not contain\n            the content of the attachment which must be fetched separately.",
        "operationId": "TestCase_GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information for the specified attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete attachment",
        "description": "Delete the attachment with the given *attachmentId* in the test case\n            with the given *id*.",
        "operationId": "TestCase_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "TestCase_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/AutomatedExecution": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Start automated test case execution",
        "description": "Start an execution of test case with *testCaseId*.",
        "operationId": "TestCase_ExecuteAutomated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "executionInfo",
          "description": "Contains the information necessary to start the test case execution.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAutomatedTestCaseExecution"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/EditMeta": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get fields edit meta",
        "description": "Get information on the fields of an existing test case when changing the status. \n            Change of status may cause changes to the characteristics of fields \n            (e.g. possible values, requireness etc.) due to workflow rules.",
        "operationId": "TestCase_EditMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case for which the edit meta is requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "statusTo",
            "in": "query",
            "required": true,
            "description": "The id of the status we are switching to.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of the test case.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestCaseEditMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/EditStatus": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the test case with the specified *id*.",
        "operationId": "TestCase_GetEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Execution": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test case executions as list",
        "description": "Get executions of this test case. Pagination, sorting and filtering are supported.",
        "operationId": "TestCase_GetTestExecutions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [ExecutionDate]=#2022-01-21# and [Version]!=12 and [TestedVersion]='v1'\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Number of results to skip when the results are fetched.\n            Can be used for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Maximum number of results which are fetched.\n            Can be used for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 4
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Comma-separated list of properties which should be used to order\n            the result list. ASC or DESC can be appended to indicate the sort order. Ascending sort\n            order is assumed by default.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResultOfApiTestExecutionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Execution/Preview": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create test case execution preview",
        "description": "Allows to perform a 'preview' of test case execution.",
        "operationId": "TestCase_PreviewTestExecution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "richTextFormatToInclude",
            "in": "query",
            "description": "This enum determinates wich information should be included in the richtext.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiRichTextIncludeType"
                }
              ]
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "tePreviewModel",
          "description": "List of values which will be considered in the preview.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestCaseExecutionPreviewRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestCaseExecutionPreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/ExecutionDefaults": {
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Update test case execution defaults",
        "description": "Update the test case execution defaults for the specified test case *id*.",
        "operationId": "TestCase_UpdateExecutionDefaults",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestCaseExecutionDefaultsUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Executions/{max}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test case executions as list",
        "description": "**This operation is obsolete**. Please use the /Execution endpoint instead.\n            Returns executions of this test case. Up to *max* most recently modified executions is returned.",
        "operationId": "TestCase_GetTestJobExecutions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "max",
            "in": "path",
            "required": true,
            "description": "Maximum number of executions to return. Default is 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "excludeIrrelevantExecutions",
            "in": "query",
            "description": "If set, executions which are marked as irrelevant will be excluded. Default is false.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestExecutionInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/History": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get history",
        "description": "Get the history with all changes to the test case.",
        "operationId": "TestCase_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all changes in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHistoryEntryTestCase"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Lock": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create lock",
        "description": "Create lock for the test case with the given *id* for exclusive editing. The provided\n            *lockInfo* must contain the latest version of the test case. This call\n            will fail when an outdated version is provided.",
        "operationId": "TestCase_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the test case with the given *id*.",
        "operationId": "TestCase_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Post": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get posts",
        "description": "Get posts (also known as comments or discussions) of testcase with the id.",
        "operationId": "TestCase_GetPosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "The first result wich should be fetched. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximal number of results wich should be fetched. The default value is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "The sorting order of the result. If true sorted ascending otherwise descending. The default value is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "A list of paginated posts associated with the given testcase and the total count of all posts for this testcase.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostPaginated"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create post",
        "description": "Create a new post with the given content in the testcase with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current testcase\n            can be mentioned.",
        "operationId": "TestCase_CreatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase in which the new post should be created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The content of the new post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The meta information of the new post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Post/{postId}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get post",
        "description": "Get the post with postId associated with the testcase with id.",
        "operationId": "TestCase_GetPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPost"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Replace post",
        "description": "Replace the existing post with id postId in the testcase with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current testcase\n            can be mentioned.",
        "operationId": "TestCase_UpdatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be replaced.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The new content of the post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The meta information of the replaced post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete post",
        "description": "Delete the post with *postId* in the testcase with the given *id*.\n            Posts are not completely deleted but only marked as deleted and their content is removed.",
        "operationId": "TestCase_DeletePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information of the deleted post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Relation": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get relations",
        "description": "Get all relations of the test case with the given *id*.",
        "operationId": "TestCase_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: Relations.OtherItem.*Info to load basic info on the relation target,\n            Relations.OtherItem.*Details to load the details of the relation target,\n            Item.*Info to load basic info on the item for which the relations were requested,\n            Item.*Details to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the test case with the *id*\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "TestCase_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Relation/{relationId}": {
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete relation",
        "description": "Delete relation of the test case with the given *id* and *relationId*.\n            Can delete only direct relations.",
        "operationId": "TestCase_DeleteRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "description": "The id of the relation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "TestCase_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestData": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create new value set (in test data)",
        "description": "Create new value set in test data of the given test case (identified by *id*).\n            When adding new value set to already existing test data then number of variables (and names) must match \n            and value set name cannot be a duplicate of already existing value set. \n            ",
        "operationId": "TestCase_AddTestDataValueSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "valueSet",
          "description": "Value set to be saved.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestDataValueSetNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Update test data (of a test case)",
        "description": "Update test data of test case identified by *id*.",
        "operationId": "TestCase_UpdateTestData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "testData",
          "description": "Updated test data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestDataUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test data",
        "description": "Get the test data of test case with the given *id*. The amount of\n            data to load can be controlled with the include parameter.",
        "operationId": "TestCase_GetTestData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "include",
            "in": "query",
            "description": "Controls the amount of data to load. The comma-separated list\n            can contain the following values: ValueSets, Variables, Values, IsReferenced, Fields. The default is\n            ValueSets.",
            "schema": {
              "type": "string",
              "default": "ValueSets",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "resolveFormulas",
            "in": "query",
            "description": "If true all formulas are resolved and returned as text (default: false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestData"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestData/{valueSetGuid}": {
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete value set",
        "description": "Delete a value set in the test case with the given *id* and *guid*.",
        "operationId": "TestCase_DeleteTestDataValueSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "valueSetGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the value set.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Update a given value set",
        "description": "Update a given value set, identified by *guid*, being part of test data of test case identified by *id*.",
        "operationId": "TestCase_UpdateTestDataValueSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "valueSetGuid",
            "in": "path",
            "required": true,
            "description": "The guid of the value set.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "valueSet",
          "description": "Value set data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestDataValueSetUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get value set",
        "description": "Get the value set with the given *valueSetGuid* of test case\n            with the given *id*.",
        "operationId": "TestCase_GetValueSet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "valueSetGuid",
            "in": "path",
            "required": true,
            "description": "The GUID of the value set.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "resolveFormulas",
            "in": "query",
            "description": "If true all formulas are resolved and returned as text (default: false).",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestDataValueSet"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestData/Transfer": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Export test data",
        "description": "Export the test data of this test case in the specified file format and allows\n            to download the resulting file.",
        "operationId": "TestCase_ExportTestData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testcase.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fileFormat",
            "in": "query",
            "description": "The file format in which the testdata should be exported",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiTestDataFileFormat"
                    }
                  ]
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The exported test data in the requested file format.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Import test data",
        "description": "Import test data for this test case from the provided file. The content of the \n            file to import can be provided directly in the request body or inside a multi part\n            form data. The following file formats are supported: csv, xml, xls, xlsx.",
        "operationId": "TestCase_ImportTestData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file to import. This parameter is optional.\n            The file name must be specified either here or as part of the multipart form data. \n            The name must include the file extension otherwise the request will be rejected.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "convertDateTime",
            "in": "query",
            "description": "A flag to convert DateTime fields in xls and xlsx to String on import.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "testData",
          "description": "The content of the file to import. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or by sending some\n            multi form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": false
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestData/Transfer/NoSave": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Import test data preview",
        "description": "Shows how the test data will be imported from the provided file. The content of the \n            file to import can be provided directly in the request body or inside a multi part\n            form data. The following file formats are supported: csv, xml, xls, xlsx.",
        "operationId": "TestCase_ImportTestDataWithoutSave",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The name of the file to import. This parameter is optional.\n            The file name must be specified either here or as part of the multipart form data. \n            The name must include the file extension otherwise the request will be rejected.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "convertDateTime",
            "in": "query",
            "description": "A flag to convert DateTime fields in xls and xlsx to String on import.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "testData",
          "description": "The content of the file to import. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or by sending some\n            multi form data containing the file.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": false
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": false
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestStep": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test steps as list",
        "description": "Get the test steps of test case with the given *id*.",
        "operationId": "TestCase_GetTestSteps",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "includeAutomation",
            "in": "query",
            "description": "If true, then automation (if any) is returned as part of step data. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestStep"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create test step",
        "description": "Create a test step of test case with the given *id*.",
        "operationId": "TestCase_CreateTestStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newStep",
          "description": "New step data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestStepNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddSingleTestStepResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestStep/{stepId}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test step",
        "description": "Get the test step of test case with the given *id* and *stepId*.",
        "operationId": "TestCase_GetTestStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "description": "The id of the step.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "includeAutomation",
            "in": "query",
            "description": "If true, then automation (if any) is returned as part of step data. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestStep"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Update test step",
        "description": "Update the test step of test case with the given *id* and *stepId*.",
        "operationId": "TestCase_UpdateTestStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "description": "The id of the step.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "Updated step data.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestStepUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Delete test step",
        "description": "Delete the test step of test case with the given *id* and *stepId*.",
        "operationId": "TestCase_DeleteTestStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "description": "The id of the step.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestStep/{stepId}/AttachedScriptFile/{attachmentScriptFileId}/data": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get automation script",
        "description": "Get the file content of the specified attached script file (used in automation). \n            When possible, the content-type header will contain a fitting mime type for the returned content.",
        "operationId": "TestCase_GetTestCaseAttachedScriptFileData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "description": "The id of the test step.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "attachmentScriptFileId",
            "in": "path",
            "required": true,
            "description": "The id of the attached file.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attached file.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/TestStep/{stepId}/Automation": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test step automation",
        "description": "Get the automation of a given test step.",
        "operationId": "TestCase_GetTestStepAutomation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "stepId",
            "in": "path",
            "required": true,
            "description": "The id of the step.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestStep"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Watchers": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get watching users as list",
        "description": "Get list of users watching this test case.",
        "operationId": "TestCase_GetWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of users watching this test case.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Add to watch list",
        "description": "Add given user to list of watchers of the test case. \n            Warning! currently the only supported operation is to subscribe yourself.",
        "operationId": "TestCase_AddWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newWatcher",
          "description": "Contains id of the user to be subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatcherNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestCase"
        ],
        "summary": "Updates the watch list",
        "operationId": "TestCase_UpdateWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "watchersUpdate",
          "description": "Contains the id of the user to be (un-)subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatchersUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{id}/Watchers/{userId}": {
      "delete": {
        "tags": [
          "TestCase"
        ],
        "summary": "Remove from watch list",
        "description": "Removes given user from list of watchers of the test case. \n            Warning! currently the only supported operation is to unsubscribe yourself.",
        "operationId": "TestCase_RemoveWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test case.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to be unsubscribed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/{testCaseId}/ExternalRef": {
      "put": {
        "tags": [
          "TestCase"
        ],
        "operationId": "TestCase_ConnectByExternalId",
        "parameters": [
          {
            "name": "testCaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "data",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "\nor\n"
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/CreateMeta": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get fields metadata",
        "description": "Get a basic information on the fields of a new test case created in given project and folder. \n            The information contains details about available fields and their characteristics.",
        "operationId": "TestCase_CreateMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder where the test case will be created (0 means root level).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "statusTo",
            "in": "query",
            "description": "The id of status with which the new item will be saved. Workflow\n            restrictions might depend on this status and hence the meta data might change depending\n            on the selected status. If no status id is provided, the default value for the status\n            is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of a new test case created in given project and folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestCaseCreateMeta"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/ExternalRef/{integrationTypeStr}/{externalId}": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "operationId": "TestCase_FetchByExternalId",
        "parameters": [
          {
            "name": "integrationTypeStr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiExternalInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/HaveSteps": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "For each test case check if there are steps",
        "description": "The quick execute operation can not be applied to a test\n            case that has no test steps",
        "operationId": "TestCase_TestCasesHaveSteps",
        "requestBody": {
          "x-name": "testCaseIds",
          "description": "The array of test case Ids",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A boolean indicating for each test case if there are test steps or not ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestCasesHaveStepsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/ItemList": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "summary": "Get test cases",
        "description": "Get a list of test cases.",
        "operationId": "TestCase_GetItemList",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/TestData/Placeholder": {
      "get": {
        "tags": [
          "TestCase"
        ],
        "operationId": "TestCase_GetTestDataPlaceholders",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiFieldPlaceholders"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestCase/TestData/Preview": {
      "post": {
        "tags": [
          "TestCase"
        ],
        "summary": "Create test data preview",
        "description": "Allows to perform a 'preview' of test data values. \n            By preview we mean that all formulas are resolved to actual values (the same way as during actual execution).",
        "operationId": "TestCase_PreviewTestData",
        "requestBody": {
          "x-name": "data",
          "description": "Matrix of test data (doesn't have to be saved - it is just a matrix of strings).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestDataPreview"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Converted test data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestDataPreview"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Create manual test executions",
        "description": "Create one or more manual test executions. When creating more than one\n            test execution, all test executions must belong to the same test scenario. \n            You can create executions with test steps different from the test cases and\n            you can associate executions with a test scenario even if the test case\n            is not part of the test scenario.",
        "operationId": "TestExecution_Create",
        "requestBody": {
          "x-name": "apiExecutions",
          "description": "The list of test executions to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionNew"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "A list with basic information regarding the created test executions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestExecutionNewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Update manual test executions",
        "description": "Update one or more manual test executions. When updating more than one\n            test execution, all test executions must belong to the same test scenario.",
        "operationId": "TestExecution_Update2",
        "parameters": [
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that all test executions has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "apiExecutions",
          "description": "The list of test executions to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionUpdate"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Modify test executions",
        "description": "Modify test executions for the given id's.",
        "operationId": "TestExecution_ModifyExecutionsRelevance",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestExecutionPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The guid of the long running task if the operation was cancel otherwise nothing.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestExecutionPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get test execution",
        "description": "Get test execution with given *testExecutionId*.",
        "operationId": "TestExecution_GetTestExecution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution to retrive.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "richTextFormatToInclude",
            "in": "query",
            "description": "This enum determinates wich information should be included in the richtext.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiRichTextIncludeType"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Test execution object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestExecution"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Update manual test execution",
        "description": "Update test execution with the given *id*.",
        "operationId": "TestExecution_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of test execution to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that all test executions has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "apiExecution",
          "description": "The test execution to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestExecutionUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Attachment": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Add attachment",
        "description": "Add a single attachment to the test execution with the testJobExecutionId.",
        "operationId": "TestExecution_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The short information about the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Attachment/{attachmentId}": {
      "delete": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Delete attachment",
        "description": "Delete attachment with attachmentId from the test execution with the testJobExecutionId.",
        "operationId": "TestExecution_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "TestExecution_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/EditStatus": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the test execution with the specified *id*.",
        "operationId": "TestExecution_GetTestExecutionEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Lock": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Create lock",
        "description": "Create lock for the test execution with the given *id* for exclusive editing.",
        "operationId": "TestExecution_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the test execution with the given *id*.",
        "operationId": "TestExecution_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Relation": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get test execution relations",
        "description": "Get all relations of the test execution with the given id. The list\n            will also contain the relations of the test case which was executed.",
        "operationId": "TestExecution_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: \n            `Relations.OtherItem.*Info` to load basic info on the relation target,\n            `Relations.OtherItem.*Details` to load the details of the relation target,\n            `Item.*Info` to load basic info on the item for which the relations were requested,\n            `Item.*Details` to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the test execution with the id\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "TestExecution_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "TestExecution_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{id}/testStep/{testStepId}": {
      "put": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Update test execution step",
        "description": "Update one test step from test execution.",
        "operationId": "TestExecution_UpdateStep",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of test execution.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "testStepId",
            "in": "path",
            "required": true,
            "description": "The id of test step to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "apiStep",
          "description": "The test execution to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestStepExecutionUpdateSingleStep"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/{testExecutionId}/Continue": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Continue test executions",
        "description": "Get a list of test executions, if the execution was made in context of test scenario, \n            otherwise there will be only one test execution.",
        "operationId": "TestExecution_ContinueTestExecution",
        "parameters": [
          {
            "name": "testExecutionId",
            "in": "path",
            "required": true,
            "description": "The id of the test execution to retrive.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "richTextFormatToInclude",
            "in": "query",
            "description": "This enum determinates wich information should be included in the richtext.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiRichTextIncludeType"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Test execution object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestExecutionContinueResponse"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/BulkExecutions": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Execute test cases",
        "description": "Batch operation that creates a test execution for each of the specified test cases\n            The operation is performed asynchronously.",
        "operationId": "TestExecution_BulkExecutions",
        "requestBody": {
          "x-name": "request",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiBulkExecutionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/CreateMeta": {
      "get": {
        "tags": [
          "TestExecution"
        ],
        "operationId": "TestExecution_GetCreateMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestExecutionCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/ItemList": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Get list of basic test executions",
        "description": "Get a list of test execution basic information for the requested ids.\n            This end point is intended primarily for the internal use by the aqua client. \n            After the partial update the given executions can be loaded.",
        "operationId": "TestExecution_GetTestExecutionAll",
        "parameters": [
          {
            "name": "richTextFormatToInclude",
            "in": "query",
            "description": "This enum determinates wich information should be included in the richtext.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiRichTextIncludeType"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "testExecutionIds",
          "description": "List of ids of the test executions to retrive.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestExecutionExtendedInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/Lock": {
      "patch": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Create locks",
        "description": "Create locks for the given test executions for exclusive editing.",
        "operationId": "TestExecution_CreateLocks",
        "requestBody": {
          "x-name": "itemsToLock",
          "description": "The list of test execution ids with necessary information for creating an lock",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionCreateLock"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/Log/{testJobExecutionId}/{testStepExecutionId}": {
      "post": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Create execution log entry",
        "description": "Creates a new execution log entry based on the information provided\n            by a end user.",
        "operationId": "TestExecution_CreateExecutionLog",
        "parameters": [
          {
            "name": "testJobExecutionId",
            "in": "path",
            "required": true,
            "description": "The id of the test execution",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "testStepExecutionId",
            "in": "path",
            "required": true,
            "description": "The id of the test step execution",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newLogEntry",
          "description": "The log entry to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestExecutionLogUserEntryNew"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestExecution/Unlock": {
      "patch": {
        "tags": [
          "TestExecution"
        ],
        "summary": "Delete locks",
        "description": "Delete the edit lock for the test executions with the given *ids*.",
        "operationId": "TestExecution_DeleteLocks",
        "requestBody": {
          "x-name": "ids",
          "description": "The ids of the test execution for which the lock should be released.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create test scenario",
        "description": "Create a new test scenario with the given data and returns some basic information on\n            the new test scenario.",
        "operationId": "TestScenario_Create",
        "parameters": [
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "newItem",
          "description": "The data for the new test scenario which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemNewWithTestJobs"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Basic information on the new test scenario.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Modify test scenario collection",
        "description": "Batch operation that modifies test scenarios matching criteria given in the request. \n            The actual modification is specified in the request as well (by providing proper subclass of ApiItemsPatchRequest)\n            The operation is performed asynchronously.",
        "operationId": "TestScenario_ModifyItems",
        "requestBody": {
          "x-name": "patchRequest",
          "description": "Operation details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemsPatchRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Guid of the batch operation. \nStatus of the the operation can be retrieved using GET api/System/LongOperation/{guid}/Status or GET api/System/LongOperation/{guid}.\nIn case of this batch operation the data retrieved from 'GET api/System/LongOperation/{guid}' contains additional information \nas defined in ApiItemLongOperationInfo (FailedItems).\nAdditionally, you SignalR (group \"LongOperation_{customerId}_{guid}\") can be used to receive information when operation finishes. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiLongOperationOfBoolean"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get test scenario",
        "description": "Get the test scenario with the specified *id*.",
        "operationId": "TestScenario_Get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario as integer (without TS).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "withEditableInfo",
            "in": "query",
            "description": "Indicates whether information about the\n            edit lock should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          },
          {
            "name": "withEditLayout",
            "in": "query",
            "description": "Indicates whether information about the edit layout should be included.\n            Edit layout is a superset of view layout (you don't have to specify withViewLayout) and contains all information \n            required to display and edit the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "withViewLayout",
            "in": "query",
            "description": "Indicates whether information about the\n            view layout should be included. The view layout is a subset of edit layout and \n            contains all information required to display the item.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "The requested test scenario.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestScenario"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Update test scenario",
        "description": "Update the test scenario with the specified *id*. The changes\n            to perform are provided in the *ApiItemUpdate* object.",
        "operationId": "TestScenario_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario to modify.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "explicitLock",
            "in": "query",
            "description": "Indicates that the test scenario has been explicitly locked before this request.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "applyDefaultValues",
            "in": "query",
            "description": "Indicates whether default values should be applied for fields which are not included in the request.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "This object contains the changes which should be performed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiItemUpdateWithTestJobs"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete test scenario",
        "description": "Delete the test scenario with the specified *id*.",
        "operationId": "TestScenario_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Attachment": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get attachments metadata as list",
        "description": "Get all attachments of the test scenario with the given *id*.",
        "operationId": "TestScenario_GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with meta information on all the attachments of this test scenario.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiAttachmentInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create attachment",
        "description": "Create a new attachment with the given *filename* in the test scenario with\n            the given *id*. The attachment's content can be provided directly in the request body\n            or inside a multi part form data.",
        "operationId": "TestScenario_AddAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename of the attachment. This parameter is optional. If it\n            is not specified, the file name from the multi part form data will be used.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "The content of the new attachment. Do NOT provide a JSON here.\n            Instead, directly upload the file by sending it as the request body or sending some\n            multi form data containing the file.\n            ",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The metadata of the created attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Attachment/{attachmentId}": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get attachment metadata",
        "description": "Get the meta information of the attachment with *attachmentId*\n            of the test scenario with the given *id*. The meta information does not contain\n            the content of the attachment which must be fetched separately.",
        "operationId": "TestScenario_GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information for the specified attachment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete attachment",
        "description": "Delete the attachment with the given *attachmentId* in the test scenario\n            with the given *id*.",
        "operationId": "TestScenario_DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Attachment/{attachmentId}/data": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get attachment",
        "description": "Get the file content of the specified attachment. When possible, the content-type\n            header will contain a fitting mime type for the returned content. The response might\n            redirect to the actual download URL.\n            ",
        "operationId": "TestScenario_GetAttachmentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "description": "The id of the attachment.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "When true, the response contains a content-disposition header to\n            force the browser to download the attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          },
          {
            "name": "access_token",
            "x-originalName": "token",
            "in": "query",
            "description": "Optional OAuth token.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The ID of the tenant. Only required in multi-tenant environments.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "The file content of the attachment.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "307": {
            "description": "The request is redirected.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRedirectResult"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/AutomatedExecution": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Start automated test scenario execution",
        "description": "Start an execution of test scenario with *testScenarioId*.",
        "operationId": "TestScenario_ExecuteAutomated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "executionInfo",
          "description": "Contains the information necessary to start the test scenario execution.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiAutomatedTestScenarioExecutionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAutomatedTestScenarioExecutionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/EditMeta": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get fields edit meta",
        "description": "Get information on the fields of an existing test scenario when changing the status. \n            Change of status may cause changes to the characteristics of fields \n            (e.g. possible values, requireness etc.) due to workflow rules.",
        "operationId": "TestScenario_EditMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario for which the edit meta is requested.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "statusTo",
            "in": "query",
            "required": true,
            "description": "The id of the status we are switching to.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of the test scenario.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/EditStatus": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get edit status",
        "description": "Get the edit status of the test scenario with the specified *id*.",
        "operationId": "TestScenario_GetEditStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemEditStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Execution": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get test scenario executions as list",
        "description": "Get executions of this test scenario. Pagination and sorting are supported.",
        "operationId": "TestScenario_GetTestExecutions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [ExecutionDate]=#2022-01-21# and [Version]!=12 and [TestedVersion]='v1'\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "Number of results to skip when the results are fetched.\n            Can be used for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 3
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Maximum number of results which are fetched.\n            Can be used for pagination.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            },
            "x-position": 4
          },
          {
            "name": "orderBy",
            "in": "query",
            "description": "Comma-separated list of properties which should be used to order\n            the result list. ASC or DESC can be appended to indicate the sort order. Ascending sort\n            order is assumed by default.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "includeStatistics",
            "in": "query",
            "description": "Include test case execution status statistics in the test scenario execution.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPaginatedResultOfApiTestExecutionInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Execution/Preview": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create test scenario execution preview",
        "description": "Allows to perform a 'preview' of test scenario execution.",
        "operationId": "TestScenario_PreviewTestExecution",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "richTextFormatToInclude",
            "in": "query",
            "description": "This enum determinates wich information should be included in the richtext.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiRichTextIncludeType"
                }
              ]
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "tePreviewModel",
          "description": "List of values which will be considered in the preview.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestScenarioExecutionPreviewRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestScenarioExecutionPreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/History": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get history",
        "description": "Get the history with all changes to the test scenario.",
        "operationId": "TestScenario_GetHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all changes in chronological order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiHistoryEntryTestScenario"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Lock": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create lock",
        "description": "Create lock for the test scenario with the given *id* for exclusive editing. The provided\n            *lockInfo* must contain the latest version of the test scenario. This call\n            will fail when an outdated version is provided.",
        "operationId": "TestScenario_CreateLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario to lock.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "lockInfo",
          "description": "Contains the information necessary to acquire a lock.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete lock",
        "description": "Delete the edit lock for the test scenario with the given *id*.",
        "operationId": "TestScenario_DeleteLock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario for which the lock should be released.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Post": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get posts",
        "description": "Get posts (also known as comments or discussions) of testscenario with the id.",
        "operationId": "TestScenario_GetPosts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testscenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "firstResult",
            "in": "query",
            "description": "The first result wich should be fetched. The default value is 0.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximal number of results wich should be fetched. The default value is 100.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            },
            "x-position": 3
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "The sorting order of the result. If true sorted ascending otherwise descending. The default value is true.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "A list of paginated posts associated with the given testscenario and the total count of all posts for this testscenario.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostPaginated"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create post",
        "description": "Create a new post with the given content in the testscenario with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current testscenario\n            can be mentioned.",
        "operationId": "TestScenario_CreatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testscenario in which the new post should be created.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The content of the new post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The meta information of the new post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Post/{postId}": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get post",
        "description": "Get the post with postId associated with the testscenario with id.",
        "operationId": "TestScenario_GetPost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testscenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPost"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Replace post",
        "description": "Replace the existing post with id postId in the testscenario with the given id.\n            Users can be mentioned in the content with @UserName. The mentioned users\n            will be extracted automatically. Only users which are members of the current testscenario\n            can be mentioned.",
        "operationId": "TestScenario_UpdatePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testscenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be replaced.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "content",
          "description": "The new content of the post. The content must be provided in exactly one format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRichText"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "The meta information of the replaced post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete post",
        "description": "Delete the post with *postId* in the testscenario with the given *id*.\n            Posts are not completely deleted but only marked as deleted and their content is removed.",
        "operationId": "TestScenario_DeletePost",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the testscenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "description": "The id of the post which should be deleted.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The meta information of the deleted post.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiPostInfo"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Relation": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get relations",
        "description": "Get all relations of the test scenario with the given *id*.",
        "operationId": "TestScenario_GetRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "depth",
            "in": "query",
            "description": "The depth to which the relations are loaded. Depth 2 means that\n            that the relations of relations are also loaded and so on. The default is 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            },
            "x-position": 2
          },
          {
            "name": "maxItemsPerType",
            "in": "query",
            "description": "The next level of relations is only loaded if at most\n            this number of items of a certain type is present. Otherwise, the tree is cutoff.\n            When this limit is not specified, this call might take a long time if the depth is\n            greater than 1.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma separated list of the data to include in the response.\n            Supported includes: Relations.OtherItem.*Info to load basic info on the relation target,\n            Relations.OtherItem.*Details to load the details of the relation target,\n            Item.*Info to load basic info on the item for which the relations were requested,\n            Item.*Details to load the details of the item for which the relations were requested.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "fields",
            "in": "query",
            "description": "The ids of the fields which should be included when details are included.\n            When left empty, all fields will be included.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "A list with all the relations together with some additional information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelations"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Create relation",
        "description": "Create a new relation between the test scenario with the *id*\n            and the other specified item. An existing relation between the two items\n            might be overwritten. Not all relation types are allowed between all\n            item types.",
        "operationId": "TestScenario_CreateRelation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "relation",
          "description": "The other information necessary to create the relation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiRelationNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "The created relation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Relation/{relationId}": {
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete relation",
        "description": "Delete relation of the test scenario with the given *id* and *relationId*.\n            Can delete only direct relations.",
        "operationId": "TestScenario_DeleteRelations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "relationId",
            "in": "path",
            "required": true,
            "description": "The id of the relation.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Relation/CreateMeta": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get relation metadata",
        "description": "Get the metadata necessary to create new relation. This metadata specifies\n            which types of relation are possible to which item types.",
        "operationId": "TestScenario_GetRelationCreateMeta",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata required to create new relations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiRelationCreateMeta"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/TestJob": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Add test job",
        "description": "Add the test job to a test scenario with specified *id*.",
        "operationId": "TestScenario_AddTestJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "testJob",
          "description": "Test job data to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestJobNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiAddSingleTestJobResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get test jobs as list",
        "description": "Get the list of test jobs from a test scenario with specified *id*.",
        "operationId": "TestScenario_GetTestJobs",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiTestJob"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/TestJob/{testJobId}": {
      "put": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Update test job",
        "description": "Update the test job from a test scenario with specified *id*.",
        "operationId": "TestScenario_UpdateTestJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "testJobId",
            "in": "path",
            "required": true,
            "description": "The id of the test job.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "testJob",
          "description": "Test job data to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiTestJobUpdate"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Delete test job",
        "description": "Delete the test job from a test scenario with specified *id*.",
        "operationId": "TestScenario_DeleteTestJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "testJobId",
            "in": "path",
            "required": true,
            "description": "The id of the test job.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get test job",
        "description": "Get the test job from a test scenario with specified *id*.",
        "operationId": "TestScenario_GetTestJob",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "testJobId",
            "in": "path",
            "required": true,
            "description": "The id of the test job.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestJob"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Watchers": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get watching users as list",
        "description": "Returns list of users watching this test scenario.",
        "operationId": "TestScenario_GetWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of users watching this test scenario.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Add to watch list",
        "description": "Add given user to list of watchers of the test scenario. \n            Warning! currently the only supported operation is to subscribe yourself.",
        "operationId": "TestScenario_AddWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "newWatcher",
          "description": "Contains id of the user to be subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatcherNew"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Updates the watch list",
        "operationId": "TestScenario_UpdateWatchers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "watchersUpdate",
          "description": "Contains the id of the user to be (un-)subscribed.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiWatchersUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{id}/Watchers/{userId}": {
      "delete": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Remove from watch list",
        "description": "Remove given user from list of watchers of the test scenario. \n            Warning! currently the only supported operation is to unsubscribe yourself.",
        "operationId": "TestScenario_RemoveWatcher",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the test scenario.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The id of the user to be unsubscribed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/{testScenarioId}/ExternalRef": {
      "put": {
        "tags": [
          "TestScenario"
        ],
        "operationId": "TestScenario_ConnectByExternalId",
        "parameters": [
          {
            "name": "testScenarioId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "data",
          "content": {
            "application/json": {
              "schema": {}
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "\nor\n"
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/CreateMeta": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get fields metadata",
        "description": "Get a basic information on the fields of a new test scenario created in given project and folder. \n            The information contains details about available fields and their characteristics.",
        "operationId": "TestScenario_CreateMeta",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "required": true,
            "description": "The id of the folder where the item is to be created (0 means root level).",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "statusTo",
            "in": "query",
            "description": "The id of status with which the new item will be saved. Workflow\n            restrictions might depend on this status and hence the meta data might change depending\n            on the selected status. If no status id is provided, the default value for the status\n            is assumed.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Basic information on the fields of a new test scenario created in given project and folder.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemCreateMeta"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/ExternalRef/{integrationTypeStr}/{externalId}": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "operationId": "TestScenario_FetchByExternalId",
        "parameters": [
          {
            "name": "integrationTypeStr",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "externalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiExternalInfo"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/ItemList": {
      "get": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get test scenarios",
        "description": "Get a list of test scenarios.",
        "operationId": "TestScenario_GetItemList",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": true,
            "description": "The id of the project of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "query",
            "description": "The id of the folder of which the items are loaded.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 2
          },
          {
            "name": "includeSubfolders",
            "in": "query",
            "description": "Indicates whether items from sub folders should be included.",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          },
          {
            "name": "includeArchived",
            "in": "query",
            "description": "Indicates whether archieved items should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 4
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The filter syntax is as follows:\n            [[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\n            The field meta data can be used to check which filter operators are supported for which fields.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "The sorting syntax is as follows:\n            [[\"Significane\", \"desc\"], [\"Status\", \"asc]]\n            The field meta data can be used to check which fields support sorting.\n            ",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "search",
            "in": "query",
            "description": "A fulltext search will be performed with this term and only matching\n            items will be included in the result",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "startAt",
            "in": "query",
            "description": "The index of the first item which should be included. Allows pagination\n            of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            },
            "x-position": 8
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "The maximum number of items to return. Allows pagination of the results.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 9
          }
        ],
        "responses": {
          "200": {
            "description": "A list of items matching the given criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiItemListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/TestScenario/TestJobPreview": {
      "post": {
        "tags": [
          "TestScenario"
        ],
        "summary": "Get preview of test jobs",
        "description": "For internal use by the aqua client. Creates a preview of the testjob specific data\nfor the given test cases.",
        "operationId": "TestScenario_GetTestJobPreview",
        "requestBody": {
          "x-name": "testCaseIds",
          "description": "Ids of the test cases for which the preview should be generated.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The preview of the test jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiTestJobPreviewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/FolderFavourite": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get folder favourites",
        "description": "Get user's folder favourites (for all projects).",
        "operationId": "User_GetProjectFolderFavourites",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiProjectFolderFavourite"
                  }
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create folder favourite",
        "description": "Create a new folder favourite with the given data.",
        "operationId": "User_CreateProjectFolderFavourite",
        "requestBody": {
          "x-name": "newFavourite",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectFolderFavouriteNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiProjectFolderFavourite"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/FolderFavourite/{id}": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete folder favourite",
        "description": "Delete the folder favourite with the given *id*.",
        "operationId": "User_DeleteProjectFolderFavourite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The id of the folder favourite",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update folder favourite",
        "description": "Allows to update the folder favourite with the given *id*.",
        "operationId": "User_PatchProjectFolderFavourite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The if of the Folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "patch",
          "description": "Update details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiProjectFolderFavouritePatch"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/FolderNotificationRule/Project/{projectId}": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update folder notification rules",
        "description": "Allows to update user's folder notification rules for the given *projectId*. The existing\n            notifications rules will be overwritten.",
        "operationId": "User_UpdateFolderNotificationRule",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "patchRequests",
          "description": "Contains information about the patch request (many rules can be modified at once).",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ApiFolderNotificationRulePatchRequest"
                }
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/FolderNotificationRule/Project/{projectId}/Folder/{folderId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get folder notification rules",
        "description": "Get user's folder notification rules for the given *projectId* and *folderId* (for all possible item types).",
        "operationId": "User_GetFolderNotificationRule",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "description": "The id of the folder.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiFolderNotificationRuleResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/GridConfig/Project/{projectId}/{itemType}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get grid config",
        "description": "Get the persisted grid config for the given *projectId* and *itemType*.\nThis endpoint should only be used by the web client.",
        "operationId": "User_GetGridConfig",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the grid\n            config should be loaded",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the grid config\n            should be loaded.",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The grid config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiGridConfig"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Replace grid config",
        "description": "Replace the grid config for the given *projectId* and *itemType*. Any invalid data is silently ignored.\nThis endpoint should only be used by the web client.",
        "operationId": "User_UpdateGridConfig",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the grid config is\n            saved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the grid config is saved",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "gridConfig",
          "description": "The grid config to save",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiGridConfig"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete grid config",
        "description": "Delete the grid config for the given *projectId* and *itemType*.\nThis endpoint should only be used by the web client.",
        "operationId": "User_DeleteGridConfig",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project for which the grid config is\n            saved.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "The item type for which the grid config is saved",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/Photo": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Upload picture",
        "description": "Upload picture that replaces profile photo of the current user.",
        "operationId": "User_ChangeUserPhoto",
        "requestBody": {
          "x-name": "uploadedFile",
          "description": "Picture data",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary",
                      "nullable": true
                    }
                  }
                }
              }
            },
            "*/*": {
              "schema": {
                "type": "string",
                "format": "binary",
                "nullable": true
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/User/ProjectFavourite/{projectId}": {
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Add favourite",
        "description": "Add project with the given *projectId* to favourites of the current user.",
        "operationId": "User_AddProjectFavourite",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to add to favourite",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Remove favourite",
        "description": "Remove project with the given *projectId* from favourites of the current user.",
        "operationId": "User_RemoveProjectFavourite",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to remove from favourites",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/UserImage/{userId}/picture": {
      "get": {
        "tags": [
          "UserImage"
        ],
        "summary": "Get a user's profile pricture",
        "description": "Get the profile picture for a particular user",
        "operationId": "UserImage_GetProfilPicture",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user who's profile picture should be returned",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "initials",
            "in": "query",
            "description": "Defines if the complete intials or only one letter will be returned.\n            If there is no picture for the user available.",
            "schema": {
              "default": "All",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ApiIntialType"
                }
              ]
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The image data",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/UserImage/Data": {
      "get": {
        "tags": [
          "UserImage"
        ],
        "summary": "Get user image",
        "description": "Get or create the user image for the given *initialLetters*.",
        "operationId": "UserImage_GetImageData",
        "parameters": [
          {
            "name": "initialLetters",
            "in": "query",
            "required": true,
            "description": "The intial letters of the user if available, if not 2 letters from firstname or surname if not available 2 letters from username.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata of the image",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/UserView": {
      "post": {
        "tags": [
          "UserView"
        ],
        "summary": "Create user view",
        "description": "Create a new user view with the given data. The id of the created user view\n            is included in the response.",
        "operationId": "UserView_Create",
        "requestBody": {
          "x-name": "newUserView",
          "description": "The data for the new user view which should be created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserViewNew"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Id of the view",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserViewNewResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "patch": {
        "tags": [
          "UserView"
        ],
        "summary": "Modify the collection of user views",
        "description": "Perform patch operation on the collection of user views.",
        "operationId": "UserView_UpdateCollection",
        "requestBody": {
          "x-name": "update",
          "description": "The necessary information to modify the user view collection.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserViewPatchCollectionOperation"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserViewPatchCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/UserView/{userViewId}": {
      "patch": {
        "tags": [
          "UserView"
        ],
        "summary": "Update user view",
        "description": "Allows to update the user view with the given *userViewId*.",
        "operationId": "UserView_Update",
        "parameters": [
          {
            "name": "userViewId",
            "in": "path",
            "required": true,
            "description": "The id of the view",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "update",
          "description": "The data for the user view which should be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserViewUpdate"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "UserView"
        ],
        "summary": "Delete user view",
        "description": "Delete the user view with the given *userViewId*.",
        "operationId": "UserView_DeleteView",
        "parameters": [
          {
            "name": "userViewId",
            "in": "path",
            "required": true,
            "description": "The id of the view",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "get": {
        "tags": [
          "UserView"
        ],
        "summary": "Get user view",
        "description": "Get the user view with the given *userViewId*.",
        "operationId": "UserView_GetView",
        "parameters": [
          {
            "name": "userViewId",
            "in": "path",
            "required": true,
            "description": "The id of the view",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "query",
            "description": "The item type for which the field-specific information\n            of the user view should be included. When not specified, the user view will not\n            contains any field-specific information.\n            If true, then permissions are included as well (default: true)\n            ",
            "schema": {
              "oneOf": [
                {
                  "nullable": true,
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ApiItemType"
                    }
                  ]
                }
              ]
            },
            "x-position": 2
          },
          {
            "name": "includePermissions",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUserView"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/UserView/{userViewId}/Favourite": {
      "post": {
        "tags": [
          "UserView"
        ],
        "summary": "Mark user view as favourite",
        "description": "Mark user view with the given *userViewId* as a favourite of the\n            current user.",
        "operationId": "UserView_MarkUserViewAsFavourite",
        "parameters": [
          {
            "name": "userViewId",
            "in": "path",
            "required": true,
            "description": "The id of the user view to mark as favourite.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      },
      "delete": {
        "tags": [
          "UserView"
        ],
        "summary": "Un-mark user view as favourite",
        "description": "Un-mark user view with the given *userViewId* as a favourite of the\n            current user.",
        "operationId": "UserView_UnMarkUserViewFavourite",
        "parameters": [
          {
            "name": "userViewId",
            "in": "path",
            "required": true,
            "description": "The id of the user view to un-mark as favourite.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/api/Workflow/{itemType}/{projectId}": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Get workflow",
        "description": "Get the workflow for the given *projectId* and *itemType*",
        "operationId": "Workflow_GetWorkflow",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "Id of project",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "itemType",
            "in": "path",
            "required": true,
            "description": "Type of the item",
            "schema": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "The requested workflow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiWorkflow"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request. Check the error for additional information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiArgumentError"
                }
              }
            }
          },
          "403": {
            "description": "Not allowed to perform the requested operation. Check the error for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiForbiddenError"
                }
              }
            }
          },
          "404": {
            "description": "The entity was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "No valid authentication.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Something went wrong in the REST API. Ask your administrator to check the logs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiInternalError"
                }
              }
            }
          },
          "503": {
            "description": "aqua backend is not available. Please try again later or contact your administrator",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBackendNotAvailableError"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApiCurrentlyExecutedStepInfo": {
        "type": "object",
        "description": "Encapsulates basic information about currently executing task on an agent. ",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project where the execution is performed",
            "format": "int32"
          },
          "TestStepExecutionId": {
            "type": "integer",
            "description": "The id of the step execution",
            "format": "int32"
          },
          "TestJobExecutionId": {
            "type": "integer",
            "description": "The id of the execution",
            "format": "int32"
          },
          "TestCaseId": {
            "type": "integer",
            "description": "The id of related test case.",
            "format": "int32"
          },
          "TestScenarioId": {
            "type": "integer",
            "description": "The id of related test scenario (or 0 if none).",
            "format": "int32"
          },
          "CanViewTestScenario": {
            "description": "If the user can view the testscenario for the testjobexecution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewTestCase": {
            "description": "If the user can view the testscenario for the testjobexecution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewTestJobExecution": {
            "description": "If the user can view the testjobexecution itself",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiPermissionResult": {
        "type": "string",
        "description": "Defined possible results of a permission check. \r\nThis enum has the following values:\r\n  - `Denied` The given permission is deined, although is included in the license. \r\n  - `Granted` The given permission is granted.\r\n  - `NotLicensed` The given permission is not even licensed (so denied). \r\n",
        "x-enumNames": [
          "Denied",
          "NotLicensed",
          "Granted"
        ],
        "enum": [
          "Denied",
          "NotLicensed",
          "Granted"
        ]
      },
      "ApiUnauthorizedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "The request requires a valid authentication. Please authenticate first and\nmake sure to include the Authorization header in your request.",
            "additionalProperties": false
          }
        ]
      },
      "ApiError": {
        "type": "object",
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "ArgumentError": "#/components/schemas/ApiArgumentError",
            "BackendNotAvailable": "#/components/schemas/ApiBackendNotAvailableError",
            "Forbidden": "#/components/schemas/ApiForbiddenError",
            "InternalError": "#/components/schemas/ApiInternalError",
            "MediaTypeNotSupported": "#/components/schemas/ApiMediaTypeNotSupportedError",
            "MethodNotAllowed": "#/components/schemas/ApiMethodNotAllowedError",
            "NotFound": "#/components/schemas/ApiNotFoundError",
            "Unauthorized": "#/components/schemas/ApiUnauthorizedError"
          }
        },
        "description": "Contains information about an error which occurred during an API call.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Message",
          "Code",
          "Type"
        ],
        "properties": {
          "Message": {
            "type": "string",
            "description": "A human-readable description of the error.",
            "minLength": 1
          },
          "Code": {
            "type": "string",
            "description": "The error code to be used for tracking the error a the server side.",
            "minLength": 1
          },
          "FurtherInfo": {
            "type": "string",
            "description": "Further information about the error as unstructured text. This text is\nnot localized.",
            "nullable": true
          },
          "ErrorData": {
            "description": "Additional data about the error (if any). Depends on actual error type.",
            "nullable": true
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "ApiArgumentError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "The request data is invalid.",
            "additionalProperties": false,
            "properties": {
              "ArgumentErrorType": {
                "description": "The reason why the request data is invalid.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiArgumentErrorType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiArgumentErrorType": {
        "type": "string",
        "description": "Identifies the type of \"argument error\" which occurred. \nArument error is a situation when information received from the caller \nis invalid (e.g. does not fit into expected limits, is of invalid type etc.) \nor does not correspond to system state (e.g. trying to update a locked item). \nArgument errors are not system errors, but rather client errors. \r\nThis enum has the following values:\r\n  - `ActualResultsMissing` The actual results are not specified but are required.\r\n  - `AgentNotFound` The agent does not exist.\r\n  - `ArchiveJobAlreadyStarted` Archive job is already running, cannot start new one.\r\n  - `AssignmentDeleteFailed` Delete the user assignment failed.\r\n  - `AttachmentMaxSizeExceeded` Attachment size exceeds maximum size.\r\n  - `AttachmentMaxTransferSizeExceeded` Attachments size exceeds maximum transfer size for one upload.\r\n  - `AttachmentNotFound` Attachment does not exist.\r\n  - `AutomationInTestStepNotPresentOrInvalid` Automation in given step was not present or was invalid (not as expected). \r\n  - `AutomationScriptUnsupportedTechnologySave` The save for automation script technology is not supported. \r\n  - `CalculatedFieldModified` The request tries to set the value of a field which is set to a calculated\nvalue by the workflow. Such a field cannot be modified by the end user.\r\n  - `CannotModifyAutomaticDependencies` Automatic dependencies cannot be deleted or modified\r\n  - `CannotUpdateReferencedTestData` It is not possible update test data which is referenced. Please update it in the other test case (owner of test data). \r\n  - `CustomFilterAcceptedStatusesNotRecognized` Custom filter accepted statuses contains unrecognized value.\r\n  - `CustomFilterOptionsNotEmpty` Custom filter options are not empty.\r\n  - `DefaultEntriesUserIdNotAllowed` Default configuration data (global or project) must not\ncontain a user id.\r\n  - `DictionaryEntryNotFound` The dictionary entry with the given id was not found.\r\n  - `DuplicateAgentCode` The agent code must be unique in the project.\r\n  - `DuplicateAgentName` An agent name must be unique in the project.\r\n  - `DuplicateDictionary` The name or id of a dictionary is not unique.\r\n  - `DuplicateDictionaryEntry` The name or id of a dictionary entry is not unique.\r\n  - `DuplicateLabelName` The label name must be unique.\r\n  - `DuplicateProjectFolderFavourite` There is already a project folder favourite for given project & folder \r\n  - `DuplicateProjectName` The name of the project is not unique.\r\n  - `DuplicateReportParameter` Duplicate report parameter.\r\n  - `DuplicateRoleName` The name of a role is not unique.\r\n  - `DuplicateSprintName` The name of a sprint entry is not unique.\r\n  - `DuplicateUserName` The name of a user entry is not unique.\r\n  - `EmptyAgentName` Agent name is empty.\r\n  - `EmptyDashboardTitle` The dashboard title must be set.\r\n  - `EmptyItemName` The name of the item in the request is empty.\r\n  - `EmptyListNotAllowed` The list of elements is expected to be non empty. \r\n  - `EmptySprintName` The sprint name is empty.\r\n  - `EnclosureNotFound` The enclosure with the given id does not exist.\r\n  - `ExecutableFilesUploadBlocked` The upload of executable files is blocked..\r\n  - `ExecuteAllWithTestJobIds` If a automated execution for all Testjobs in a Testscenario is to be started\nand also a List of Testjobids is provided. Only one of both can be used.\r\n  - `ExecutionDependencyViolation` The provided execution dependencies are violated.\r\n  - `ExecutionNotForSingleTestScenario` The test executions to save do not belong to a single\ntest scenario.\r\n  - `ExpectedLockMissing` The specified item is expected to be locked for exclusive editing by the current user\nbut the edit lock is missing.\r\n  - `ExpectedResultsMissing` The expected results are not specified but are required.\r\n  - `ExpectedResultsNotAllowedForCondition` A condition step must not have an expected result.\r\n  - `FieldIsNotCustomField` A field which is not a custom field is modified using the mechanism\nfor custom fields.\r\n  - `FieldNotSupported` A field specified in the request is not supported for this request.\r\n  - `FieldRulesCycle` The requested would create a cyclic rule for the field rules.\r\n  - `FieldRuleValueChangedNotSupported` A field rule specifies a value change for field for which changing\nthe value by a field rule is not supported.\r\n  - `FieldValueDuplicatedName` A field specified in the request has duplicated field value name.\r\n  - `FieldValueDuplicatedPosition` A field specified in the request has duplicated field value position.\r\n  - `FieldValueEmptyName` A field specified in the request has empty field value name.\r\n  - `FieldValueReservedName` A field specified in the request has reserved field value name.\r\n  - `FieldValueTooLongName` A field specified in the request has too long field value name.\r\n  - `FileExtensionInvalid` The provided file extension for the uploaded file is invalid. Please make sure that\nfile extension is not null or empty.\r\n  - `FileInvalid` The uploaded file is invalid and cannot be processed. Either the request is not\ncorrectly constructed or the file content is incorrect.\r\n  - `FileNameInvalid` The provided file name for the uploaded file is invalid. Please make sure that\nfile name is not null or empty.\r\n  - `FileNameUsedWithMultipart` The file name for the file is provided while multipart form data is used. Please make sure that\nfile name is null or empty.\r\n  - `FileNotFound` File does not exist.\r\n  - `FileUploadAlreadyUploaded` The file was already uploaded. Each upload URL can only be used once.\r\n  - `FileUploadSizeMismatch` The size uploaded file content does not match the provided file size.\r\n  - `FileUploadWrongAzureBlobType` The blob type of the uploaded file is incorrect. Check the documentation\nregarding uploading to Azure Blob Storage\r\n  - `FilterClauseFieldInvalid` The field part of a filter clause is invalid.\r\n  - `FilterClauseFieldNotSupported` A field in the filter expression does not support filtering.\r\n  - `FilterClauseIncorrectNumberOfValues` A filter clause contains an incorrect number of values\nfor the given operator.\r\n  - `FilterClauseInvalid` A clause in the filter expression is malformed.\r\n  - `FilterClauseOperatorInvalid` A filter operator in a filter clause is invalid.\r\n  - `FilterClauseOperatorNotSupported` A filter operator is not supported for field with\nwhich it is used.\r\n  - `FilterClauseUnknownField` A field in the filter expression does not exist.\r\n  - `FilterClauseValueInvalid` A value in a filter clause is invalid.\r\n  - `FilterGroupInvalid` A group in the filtere expression is malformed.\r\n  - `FilterGroupOperatorInvalid` A group in the filter expression contains an invalid\ngroup operator.\r\n  - `FilterGroupOperatorsMixed` A group in the filter expression contains several different\ngroup operators. Each group in a filter expression must contain\nonly a single type of group operator.\r\n  - `FilterInvalid` The filter expression is malformed.\r\n  - `FolderCycle` Cycle detected in folder path. \r\n  - `FolderNameEmpty` Folder name is empty.\r\n  - `FolderNameNotUnique` Folder name is not unique (there already exists a folder with same name). \r\n  - `FolderNotEmpty` Folder is not empty.\r\n  - `FolderNotFound` The folder does not exist.\r\n  - `FolderNotificationRuleNotEmpty` Folder notification rule is not empty.\r\n  - `ImageFormatInvalid` Image file format is invalid.\r\n  - `ImageMaxSizeExceeded` Image size exceeds maximum size.\r\n  - `InvalidAgent` The provided agent is not set or cant execute the item.\r\n  - `InvalidAgentTypeForCopy` Only single agent supports copy operation.\r\n  - `InvalidApiImportErrorType` Import is reporting an import error with no equivalent in ApiImportErrorType\r\n  - `InvalidApiImportPhase` Import is reporting an import phase with no equivalent in ApiImportPhase\r\n  - `InvalidApiItemTypeToObjectTypeMask` The type of the item is not valid for this operation.\r\n  - `InvalidApiPermission` The permission is not valid.\r\n  - `InvalidApplicableItemTypes` The applicable item types are not suitable for the user view.\r\n  - `InvalidArgument` Represents generic \"argument error\" in situation when it is not possible\nto provide more detailed information about the problem.\r\n  - `InvalidBodyValue` The request contains a body value which is invalid. Most likely, there is a datatype\nmismatch or the value is empty.\r\n  - `InvalidColor` The color does not match any of the predefined colors.\r\n  - `InvalidDependencyDependentOnItSelf` The item cannot be dependent on itself.\r\n  - `InvalidEmail` The email is not valid.\r\n  - `InvalidFieldValue` The request contains a field value which is invalid. Most likely, there is a datatype\nmismatch or the value specified for a dictionary field does not exist at all.\r\n  - `InvalidFolderIdMultiProjectReport` Multi project report only possible on root folder.\r\n  - `InvalidIntialLetters` The intial letters are invalid.\r\n  - `InvalidItemPath` The item type does not match the path.\r\n  - `InvalidLicenseAssignmentAlreadyAssigned` The license is already assigned to the user.\r\n  - `InvalidLicenseAssignmentNotAssigned` The license is not assigned to the user.\r\n  - `InvalidLicenseCode` The license with the give code does not exist.\r\n  - `InvalidNestedTestCaseId` Invalid nested test case id.\r\n  - `InvalidParameterValue` The provided parameter value is invalid.\r\n  - `InvalidPatchType` The type of the patch request is not valid.\r\n  - `InvalidProjectAssignment` The permission elevation is not allowed.\r\n  - `InvalidProjectTreeParentFolder` The value for the parameter ParentFolder is invalid.\r\n  - `InvalidReorderWidgets` The reorder of widgets is invalid.\r\n  - `InvalidReportDefinitionFile` The file is not valid for report definitions.\r\n  - `InvalidReportParameterValue` The provided value for a report parameter is invalid. Please\ncheck that the provided value fits to the type of the parameter.\r\n  - `InvalidStepType` Invalid test step type.\r\n  - `InvalidTestData` Invalid test data e.g. syntax error in formula \r\n  - `InvalidTestDataLength` The requested test data has not equal length between values and valuesets or values and variables.\r\n  - `InvalidTestJobId` The provided test job id is invalid.\r\n  - `InvalidTestJobIndex` The provided test job index is not valid.\r\n  - `InvalidTestJobRunDependencyIndex` The provided test job run dependency index is not valid.\r\n  - `InvalidTestStepExecutionStatusType` Invalid test step execution status type.\r\n  - `InvalidTestStepId` Invalid test step id.\r\n  - `InvalidTestStepIndex` The provided test step index is not valid.\r\n  - `InvalidUsername` The user name is not valid.\r\n  - `InvalidValueSet` The provided value set is invalid.\r\n  - `InvalidVersionOfProjectConfigFile` Trying to import project config of incompatible version\r\n  - `ItemNotFound` The item does not exist.\r\n  - `ItemTypeNotSupported` Indicates that the given item type is not supported for the given\nrequest.\r\n  - `ItemTypeNotSupportedInDashboards` The ItemType is not supported in dashboards\r\n  - `LicenseTypeNotChanged` The license has already this type.\r\n  - `LockByAnotherUser` The item is currently locked for exclusive editing. The item is locked by\nanother user.\r\n  - `Locked` The item is currently locked for exclusive editing. The item might be locked by\nanother user or by the same user.\r\n  - `LowPasswordComplexity` The user password has low complexity.\r\n  - `ManualExecutionsWithStatusAndWithout` Mixed executions with and without arbitrary status. \r\n  - `ManualTestExecution` The manual test execution type is not supported. \r\n  - `MultiChoiceFieldValueExceededMaxLength` The value of the MultiChoiceField has exceeded the maximum length.\r\n  - `MultiPartNotOneFile` Your request body does not contain exactly one file in the multipart form data.\nExactly one file must be provided in the multipart form data.\r\n  - `MultipleDefaultEntries` Multiple default entries have been defined. There must be\nonly one default entry.\r\n  - `NestedTestCaseLoop` The nested test case creates an Infinite loop.\r\n  - `NoExecutions` The list of executions is empty.\r\n  - `NoFreeLicenses` There are no free licenses for the given type.\r\n  - `None` Represents void argument error.\r\n  - `NoTestData` No test data is defined.\r\n  - `NoTestSteps` Test steps must be defined to execute a test case.\r\n  - `NotificationTemplateInvalidLanguage` The language for the notification template is invalid.\r\n  - `NotificationTemplateMixedLanguage` The language for the item event templates in the notification template is not unique.\r\n  - `NotManualTestExecution` Test execution is not of the manual type (only manual test execution supported). \r\n  - `NotOwnerOfProjectTemplate` You are not allowed to perform the requested operation with the template\nof the specified project as the project template is shared and the current\nproject is not the owner of the template.\r\n  - `NotSupported` Represents generic error type in situation when the feature is not supported.\r\n  - `NoValueSetSelected` The specified test case is parameterized but no value\nset has been selected.\r\n  - `OperationBlockedByOtherTask` The batch operation cannot be started because there is already running other task that prevents new one from starting \n(running on the same domain of items). \r\n  - `OutdatedVersion` Your request included an item version which is not identical to the version\nof the item currently stored in the database. Most likely, the item was modified\nin between.\r\n  - `ProjectConfigImportFailed` The import of the provided project configuration was not possible with the\ncurrent import settings. Please check the provided list of errors.\r\n  - `ProjectFolderUserIsAlreadyAssigned` The project and/or folder has already an user assignment.\r\n  - `ProjectMaximumNumberReached` The maximum number of project is reached.\r\n  - `ProjectNotFound` The project does not exist.\r\n  - `ProjectRoleNotFound` The project role not found.\r\n  - `ProjectRoleUpdateDuplicateEntry` The project update contains duplicated entries.\r\n  - `ProjectRoleUpdateInvalidEntry` The project update contains invalid entries.\r\n  - `ProjectTemplateDuplicateFieldOperations` The request contains duplicate operations for one or more fields.\r\n  - `ProjectTemplateFieldIsActivated` The project template field is already activated.\nHence the request operation is not possible.\r\n  - `ProjectTemplateFieldIsDeactivated` The project template field is already deactivated.\nHence the request operation is not possible.\r\n  - `ProjectTemplateFieldOperationNotAllowed` The project template field does not allow the operation\ne.g. (FixedTitle can't be deactivated).\r\n  - `ProjectTemplateNotIntendedLayoutChange` The last configuration of this project has been saved in desktop client. \nSaving in web client will work but causes significant changes to layout in desktop client accordingly. \nIf this is intended, please provide the necessary parameter otherwise please change your configuration in desktop client.\r\n  - `ProjectUserNotAssigned` The user is not assigned to the folder.\r\n  - `ReportDefinitionNotFound` Report definition does not exist.\r\n  - `ReportPluginNotRecognized` Report plugin has not been recognized. Is it deployed properly?\r\n  - `ReportScriptingNotAllowed` Scripting in reports is not allowed\r\n  - `RichtextInvalidImageUrl` The provided rich text contains invalid images. All images are expected to be\nuploaded to aqua before including them in the rich text. Please check the API\ndocumentation.\r\n  - `RichtextMultipleFormatsProvided` The current request contains rich text in multiple formats at the same time.\nWhen saving rich text, the request must contain the rich text only in one\nformat.\r\n  - `RoleNotFound` The role with the given id does not exist.\r\n  - `RunDependenciesMissing` Run dependencies are missing. When executing a test scenario,\nall run dependencies must be included in the execution as well.\r\n  - `SharedDictionaryNotAllowed` The operation does not support shared dictionaries.\r\n  - `SharedFieldValueDuplicatedName` A shared field specified in the request has duplicated field value name.\r\n  - `SharedFieldValueDuplicatedPosition` A shared field specified in the request has duplicated field value position.\r\n  - `SharedFieldValueEmptyName` A shared field specified in the request has empty field value name.\r\n  - `SharedFieldValueSetDuplicatedName` A shared field specified in the request has duplicated field name.\r\n  - `SharedFieldValueSetEmptyName` A shared field specified in the request has empty field name.\r\n  - `SharedFieldValueSetTooLongName` A shared field specified in the request has too long field name.\r\n  - `SharedFieldValueTooLongName` A shared field specified in the request has too long field value name.\r\n  - `SortClauseDirectionInvalid` The direction specified in a sorting/grouping clause\nis invalid\r\n  - `SortClauseFieldInvalid` The field part in a sorting/grouping is invalid.\r\n  - `SortClauseFieldNotSupported` A field specified in a sorting/grouping clause\ndoes not support sorting or grouping.\r\n  - `SortClauseInvalid` A clause in the sorting or grouping expression\nis invalid.\r\n  - `SortClauseUnknownField` A field specified in a sorting/grouping clause\ndoes not exist.\r\n  - `SortInvalid` The sorting or grouping expression is invalid.\r\n  - `SprintStillContainsItems` There are still some items included in the sprint. Can not delete sprint.\r\n  - `SubrequirementsCircleFound` The requested operation would create a circle in the sub requirement tree\nstructure.\r\n  - `SubrequirementsInconsistent` The sub requirement tree structure is inconsistent. Please make, sure that\nall child indexes are correct.\r\n  - `SubrequirementsOtherLocked` The requested operation must also update other sub requirements in the\nsub requirement tree structure but at least one of them is already\nlocked for exclusive editing.\r\n  - `SubrequirementsOtherNotPermitted` The requested operation must also update other sub requirements in the\nsub requirement tree structure but the current user is not permitted to\nmodify all of them.\r\n  - `SupportOnlyAutomatedItem` The provided item is not valid for automated run.\r\n  - `SystemFieldModified` The request tries to set the value of a field which is handled by the system\nand cannot be modified by the end user.\r\n  - `TestCaseNotFound` One or more executions do refer to invalid test cases.\nThe test case might not exist or not be accessible.\r\n  - `TestDataExportTooManyVariablesForFileFormat` The requested file format does not support the number of variables contained\nin the test data.\r\n  - `TestDataFileFormatNotSupported` The requested file format is not supported for the export or import of test data.\r\n  - `TestDataImportFailed` The import of the test data failed.\r\n  - `TestDataImportInvalidFile` The file import format is not the same as in the filename.\r\n  - `TestDataImportInvalidXml` The XML to import is invalid.\r\n  - `TestDataImportNoSheet` The file to import does not contain any work sheets.\r\n  - `TestDataImportNoValueSets` The file to import does not contain any value sets.\r\n  - `TestDataImportNoVariables` The file to import does not contain any variables.\r\n  - `TestDataImportXmlMissingVariableName` A variable is missing in one of the value sets to import.\r\n  - `TestDataImportXmlValueSetNotFound` A value set was not found when importing from XML.\r\n  - `TestDataImportXmlVariableNotFound` A variable was not found when importing from XML.\r\n  - `TestDataMisMatchVariablesNamesOrLength` The variables names or the number of variables are not the same\r\n  - `TestDataNoValueSets` The test data does not contain any value sets.\r\n  - `TestDataNumberOfValuesMisMatchToValueSets` The number of values does not match the number of valuesets\r\n  - `TestDataNumberOfValuesMisMatchToVariables` The number of values does not match the number of variables\r\n  - `TestDataRemoteTCAlreadyReferences` The other test case already references another test case, so it is not possible to reference test data from that test case. \r\n  - `TestDataRemoteTCDeleted` The other test case is deleted so it is not possible to reference test data from that test case. \r\n  - `TestDataRemoteTCNotAccessible` The other test case is not accessible so it is not possible to reference test data from that test case. \r\n  - `TestDataRemoteTCNoTestData` The other test case has no test data so it is not possible to reference test data from that test case. \r\n  - `TestDataTooManyValues` The test data contains too many values. The number of variables and/or value\nsets needs to be reduced.\r\n  - `TestDataValueSetNameInvalid` The name of a value set is invalid.\r\n  - `TestDataValueSetNameNotUnique` A variable name is not unique.\r\n  - `TestDataValueSetNameTooLong` A value set name is too long.\r\n  - `TestDataValueSetNotFound` The test data value set for a specific guid not found.\r\n  - `TestDataValueTooLong` A value is too long.\r\n  - `TestDataVariableNameInvalid` A variable name is invalid.\r\n  - `TestDataVariableNameNotUnique` A variable name is not unique.\r\n  - `TestDataVariableNameTooLong` A variable name is too long.\r\n  - `TestExecutionFinalized` Cannot update finalized test execution.\r\n  - `TestExecutionNotFound` Test execution does not exist.\r\n  - `TestJobAgentNotFound` The agent specified in a test job cannot be found.\nMost likely the agent has been deleted.\r\n  - `TestJobAgentNotSelected` The Agent for the test job is not selected.\r\n  - `TestJobDisallowAgent` The non-automated test job forbids setting the agent.\r\n  - `TestJobNotFound` The Testjob with the given id does not exist.\r\n  - `TestScenarioNotFound` The test scenario with the given id does not exist.\r\n  - `TestStepEmptyNestedTestCase` The test step of type NestedTestCase contains empty NastedCase.\r\n  - `TestStepMandatoryExpectedResultIsEmpty` The test step contains empty mandatory expected result.\r\n  - `TestStepNotEmptyNestedTestCase` The test step of type Condition or Step contains NestedTestCase.\r\n  - `TestStepNotFound` The Teststep with the given id does not exist.\r\n  - `TestStepOfTypeConditionContainsExpectedResult` The test step of type condition contains expected result.\r\n  - `TestStepOfTypeNestedTestCaseNotEmptyValues` The test step of type NestedTestCase contains description and/or expected result.\r\n  - `TooManyTestJobs` The current test scenario or test scenario execution contains\ntoo many test jobs.\r\n  - `UnknownField` The request specifies a field or contains data for a field which does not exist.\r\n  - `UnknownReportParameter` No report parameter with the specified name was found.\r\n  - `UpdateOncePerTestExecution` Test execution already updated in this request.\r\n  - `UserEntriesCannotBeLocked` User-level configuration data cannot be marked as Locked.\r\n  - `UserEntriesMustHaveUserId` User-level configuration data must contain the id of the\ncurrent user.\r\n  - `UserNotFound` User not found.\r\n  - `ValueTooBig` The provided value is too big for the argument. \r\n  - `ViolatedPermissionDependencies` The permission dependencies are violated.\r\n  - `WorkflowTransitionNotAllowed` The requested status transition is not allowed by the workflow.\r\n  - `WorkflowViolated` The given value for a field violates the workflow.\r\n  - `WrongDictionary` The dictionary in the request does not belong to the\ncurrent field.\r\n  - `WrongFieldType` The field specified in the requested is of the wrong type. Most likely,\nthe current endpoint is not meant to be used with fields of this type.\r\n  - `WrongPatchType` Wrong patch operation type is used.\r\n",
        "x-enumNames": [
          "None",
          "InvalidArgument",
          "NotSupported",
          "Locked",
          "LockByAnotherUser",
          "OutdatedVersion",
          "ExpectedLockMissing",
          "UnknownField",
          "InvalidFieldValue",
          "InvalidBodyValue",
          "SystemFieldModified",
          "WorkflowViolated",
          "FieldNotSupported",
          "FieldIsNotCustomField",
          "FieldValueEmptyName",
          "FieldValueDuplicatedName",
          "FieldValueTooLongName",
          "FieldValueDuplicatedPosition",
          "FieldValueReservedName",
          "SharedFieldValueSetEmptyName",
          "SharedFieldValueSetDuplicatedName",
          "SharedFieldValueSetTooLongName",
          "SharedFieldValueEmptyName",
          "SharedFieldValueDuplicatedName",
          "SharedFieldValueTooLongName",
          "SharedFieldValueDuplicatedPosition",
          "WrongFieldType",
          "FileInvalid",
          "FileNameInvalid",
          "FileNameUsedWithMultipart",
          "FileExtensionInvalid",
          "FileUploadAlreadyUploaded",
          "FileUploadSizeMismatch",
          "FileUploadWrongAzureBlobType",
          "MultiPartNotOneFile",
          "NotOwnerOfProjectTemplate",
          "SubrequirementsOtherLocked",
          "SubrequirementsOtherNotPermitted",
          "SubrequirementsCircleFound",
          "SubrequirementsInconsistent",
          "RichtextMultipleFormatsProvided",
          "RichtextInvalidImageUrl",
          "ProjectConfigImportFailed",
          "FieldRulesCycle",
          "FieldRuleValueChangedNotSupported",
          "EnclosureNotFound",
          "InvalidParameterValue",
          "CalculatedFieldModified",
          "SupportOnlyAutomatedItem",
          "InvalidAgent",
          "AgentNotFound",
          "TestJobDisallowAgent",
          "ExecutionDependencyViolation",
          "InvalidValueSet",
          "NoValueSetSelected",
          "InvalidTestJobIndex",
          "TestJobNotFound",
          "TestJobAgentNotFound",
          "TestJobAgentNotSelected",
          "InvalidTestJobRunDependencyIndex",
          "WorkflowTransitionNotAllowed",
          "NestedTestCaseLoop",
          "NoTestData",
          "TestDataTooManyValues",
          "TestDataValueSetNotFound",
          "TestDataNumberOfValuesMisMatchToVariables",
          "TestDataMisMatchVariablesNamesOrLength",
          "TestDataNumberOfValuesMisMatchToValueSets",
          "TestDataVariableNameTooLong",
          "TestDataVariableNameNotUnique",
          "TestDataVariableNameInvalid",
          "TestDataValueSetNameTooLong",
          "TestDataValueSetNameNotUnique",
          "TestDataValueSetNameInvalid",
          "TestDataValueTooLong",
          "TestDataImportNoSheet",
          "TestDataImportNoVariables",
          "TestDataImportNoValueSets",
          "TestDataNoValueSets",
          "TestDataImportInvalidXml",
          "TestDataImportInvalidFile",
          "TestDataImportXmlMissingVariableName",
          "TestDataImportXmlValueSetNotFound",
          "TestDataImportXmlVariableNotFound",
          "TestDataImportFailed",
          "TestDataExportTooManyVariablesForFileFormat",
          "TestDataFileFormatNotSupported",
          "InvalidTestDataLength",
          "ValueTooBig",
          "TestDataRemoteTCNotAccessible",
          "TestDataRemoteTCDeleted",
          "TestDataRemoteTCAlreadyReferences",
          "TestDataRemoteTCNoTestData",
          "CannotUpdateReferencedTestData",
          "InvalidTestStepIndex",
          "TestStepNotFound",
          "TestScenarioNotFound",
          "TestStepOfTypeConditionContainsExpectedResult",
          "TestStepMandatoryExpectedResultIsEmpty",
          "TestStepEmptyNestedTestCase",
          "TestStepOfTypeNestedTestCaseNotEmptyValues",
          "TestStepNotEmptyNestedTestCase",
          "InvalidNestedTestCaseId",
          "ExecutionNotForSingleTestScenario",
          "TestCaseNotFound",
          "InvalidTestJobId",
          "NoTestSteps",
          "ExpectedResultsMissing",
          "ExpectedResultsNotAllowedForCondition",
          "ActualResultsMissing",
          "RunDependenciesMissing",
          "TooManyTestJobs",
          "NoExecutions",
          "UserNotFound",
          "ProjectUserNotAssigned",
          "ProjectFolderUserIsAlreadyAssigned",
          "AssignmentDeleteFailed",
          "ProjectRoleNotFound",
          "ProjectRoleUpdateDuplicateEntry",
          "ProjectRoleUpdateInvalidEntry",
          "FolderNotFound",
          "ItemNotFound",
          "ProjectNotFound",
          "DuplicateProjectName",
          "ProjectMaximumNumberReached",
          "DuplicateDictionary",
          "DuplicateDictionaryEntry",
          "MultipleDefaultEntries",
          "DictionaryEntryNotFound",
          "WrongDictionary",
          "EmptyItemName",
          "AutomationInTestStepNotPresentOrInvalid",
          "NotManualTestExecution",
          "ManualTestExecution",
          "AttachmentNotFound",
          "AttachmentMaxSizeExceeded",
          "ImageMaxSizeExceeded",
          "ImageFormatInvalid",
          "AttachmentMaxTransferSizeExceeded",
          "FileNotFound",
          "TestExecutionNotFound",
          "TestExecutionFinalized",
          "InvalidTestStepId",
          "ManualExecutionsWithStatusAndWithout",
          "ArchiveJobAlreadyStarted",
          "UpdateOncePerTestExecution",
          "EmptyListNotAllowed",
          "AutomationScriptUnsupportedTechnologySave",
          "InvalidTestData",
          "UserEntriesCannotBeLocked",
          "UserEntriesMustHaveUserId",
          "DefaultEntriesUserIdNotAllowed",
          "FolderNameNotUnique",
          "FolderCycle",
          "FolderNameEmpty",
          "FolderNotEmpty",
          "DuplicateSprintName",
          "EmptySprintName",
          "InvalidStepType",
          "InvalidTestStepExecutionStatusType",
          "FolderNotificationRuleNotEmpty",
          "CustomFilterAcceptedStatusesNotRecognized",
          "CustomFilterOptionsNotEmpty",
          "FilterInvalid",
          "FilterGroupInvalid",
          "FilterGroupOperatorInvalid",
          "FilterGroupOperatorsMixed",
          "FilterClauseInvalid",
          "FilterClauseFieldInvalid",
          "FilterClauseUnknownField",
          "FilterClauseFieldNotSupported",
          "FilterClauseOperatorInvalid",
          "FilterClauseOperatorNotSupported",
          "FilterClauseValueInvalid",
          "FilterClauseIncorrectNumberOfValues",
          "SortInvalid",
          "SortClauseInvalid",
          "SortClauseFieldInvalid",
          "SortClauseUnknownField",
          "SortClauseFieldNotSupported",
          "SortClauseDirectionInvalid",
          "ReportDefinitionNotFound",
          "InvalidReportDefinitionFile",
          "ReportScriptingNotAllowed",
          "ReportPluginNotRecognized",
          "InvalidPatchType",
          "WrongPatchType",
          "ExecuteAllWithTestJobIds",
          "DuplicateAgentName",
          "DuplicateAgentCode",
          "DuplicateLabelName",
          "EmptyAgentName",
          "InvalidAgentTypeForCopy",
          "InvalidApiItemTypeToObjectTypeMask",
          "InvalidItemPath",
          "DuplicateReportParameter",
          "InvalidFolderIdMultiProjectReport",
          "InvalidColor",
          "InvalidApplicableItemTypes",
          "InvalidVersionOfProjectConfigFile",
          "OperationBlockedByOtherTask",
          "ItemTypeNotSupported",
          "EmptyDashboardTitle",
          "InvalidReorderWidgets",
          "DuplicateProjectFolderFavourite",
          "SprintStillContainsItems",
          "InvalidIntialLetters",
          "InvalidProjectTreeParentFolder",
          "InvalidDependencyDependentOnItSelf",
          "CannotModifyAutomaticDependencies",
          "MultiChoiceFieldValueExceededMaxLength",
          "NotificationTemplateInvalidLanguage",
          "InvalidReportParameterValue",
          "UnknownReportParameter",
          "InvalidApiImportPhase",
          "InvalidApiImportErrorType",
          "SharedDictionaryNotAllowed",
          "NotificationTemplateMixedLanguage",
          "ExecutableFilesUploadBlocked",
          "ItemTypeNotSupportedInDashboards",
          "InvalidUsername",
          "DuplicateUserName",
          "InvalidEmail",
          "LowPasswordComplexity",
          "InvalidLicenseCode",
          "NoFreeLicenses",
          "InvalidLicenseAssignmentAlreadyAssigned",
          "InvalidLicenseAssignmentNotAssigned",
          "LicenseTypeNotChanged",
          "InvalidApiPermission",
          "ViolatedPermissionDependencies",
          "DuplicateRoleName",
          "RoleNotFound",
          "InvalidProjectAssignment",
          "ProjectTemplateFieldIsActivated",
          "ProjectTemplateFieldIsDeactivated",
          "ProjectTemplateDuplicateFieldOperations",
          "ProjectTemplateNotIntendedLayoutChange",
          "ProjectTemplateFieldOperationNotAllowed"
        ],
        "enum": [
          "None",
          "InvalidArgument",
          "NotSupported",
          "Locked",
          "LockByAnotherUser",
          "OutdatedVersion",
          "ExpectedLockMissing",
          "UnknownField",
          "InvalidFieldValue",
          "InvalidBodyValue",
          "SystemFieldModified",
          "WorkflowViolated",
          "FieldNotSupported",
          "FieldIsNotCustomField",
          "FieldValueEmptyName",
          "FieldValueDuplicatedName",
          "FieldValueTooLongName",
          "FieldValueDuplicatedPosition",
          "FieldValueReservedName",
          "SharedFieldValueSetEmptyName",
          "SharedFieldValueSetDuplicatedName",
          "SharedFieldValueSetTooLongName",
          "SharedFieldValueEmptyName",
          "SharedFieldValueDuplicatedName",
          "SharedFieldValueTooLongName",
          "SharedFieldValueDuplicatedPosition",
          "WrongFieldType",
          "FileInvalid",
          "FileNameInvalid",
          "FileNameUsedWithMultipart",
          "FileExtensionInvalid",
          "FileUploadAlreadyUploaded",
          "FileUploadSizeMismatch",
          "FileUploadWrongAzureBlobType",
          "MultiPartNotOneFile",
          "NotOwnerOfProjectTemplate",
          "SubrequirementsOtherLocked",
          "SubrequirementsOtherNotPermitted",
          "SubrequirementsCircleFound",
          "SubrequirementsInconsistent",
          "RichtextMultipleFormatsProvided",
          "RichtextInvalidImageUrl",
          "ProjectConfigImportFailed",
          "FieldRulesCycle",
          "FieldRuleValueChangedNotSupported",
          "EnclosureNotFound",
          "InvalidParameterValue",
          "CalculatedFieldModified",
          "SupportOnlyAutomatedItem",
          "InvalidAgent",
          "AgentNotFound",
          "TestJobDisallowAgent",
          "ExecutionDependencyViolation",
          "InvalidValueSet",
          "NoValueSetSelected",
          "InvalidTestJobIndex",
          "TestJobNotFound",
          "TestJobAgentNotFound",
          "TestJobAgentNotSelected",
          "InvalidTestJobRunDependencyIndex",
          "WorkflowTransitionNotAllowed",
          "NestedTestCaseLoop",
          "NoTestData",
          "TestDataTooManyValues",
          "TestDataValueSetNotFound",
          "TestDataNumberOfValuesMisMatchToVariables",
          "TestDataMisMatchVariablesNamesOrLength",
          "TestDataNumberOfValuesMisMatchToValueSets",
          "TestDataVariableNameTooLong",
          "TestDataVariableNameNotUnique",
          "TestDataVariableNameInvalid",
          "TestDataValueSetNameTooLong",
          "TestDataValueSetNameNotUnique",
          "TestDataValueSetNameInvalid",
          "TestDataValueTooLong",
          "TestDataImportNoSheet",
          "TestDataImportNoVariables",
          "TestDataImportNoValueSets",
          "TestDataNoValueSets",
          "TestDataImportInvalidXml",
          "TestDataImportInvalidFile",
          "TestDataImportXmlMissingVariableName",
          "TestDataImportXmlValueSetNotFound",
          "TestDataImportXmlVariableNotFound",
          "TestDataImportFailed",
          "TestDataExportTooManyVariablesForFileFormat",
          "TestDataFileFormatNotSupported",
          "InvalidTestDataLength",
          "ValueTooBig",
          "TestDataRemoteTCNotAccessible",
          "TestDataRemoteTCDeleted",
          "TestDataRemoteTCAlreadyReferences",
          "TestDataRemoteTCNoTestData",
          "CannotUpdateReferencedTestData",
          "InvalidTestStepIndex",
          "TestStepNotFound",
          "TestScenarioNotFound",
          "TestStepOfTypeConditionContainsExpectedResult",
          "TestStepMandatoryExpectedResultIsEmpty",
          "TestStepEmptyNestedTestCase",
          "TestStepOfTypeNestedTestCaseNotEmptyValues",
          "TestStepNotEmptyNestedTestCase",
          "InvalidNestedTestCaseId",
          "ExecutionNotForSingleTestScenario",
          "TestCaseNotFound",
          "InvalidTestJobId",
          "NoTestSteps",
          "ExpectedResultsMissing",
          "ExpectedResultsNotAllowedForCondition",
          "ActualResultsMissing",
          "RunDependenciesMissing",
          "TooManyTestJobs",
          "NoExecutions",
          "UserNotFound",
          "ProjectUserNotAssigned",
          "ProjectFolderUserIsAlreadyAssigned",
          "AssignmentDeleteFailed",
          "ProjectRoleNotFound",
          "ProjectRoleUpdateDuplicateEntry",
          "ProjectRoleUpdateInvalidEntry",
          "FolderNotFound",
          "ItemNotFound",
          "ProjectNotFound",
          "DuplicateProjectName",
          "ProjectMaximumNumberReached",
          "DuplicateDictionary",
          "DuplicateDictionaryEntry",
          "MultipleDefaultEntries",
          "DictionaryEntryNotFound",
          "WrongDictionary",
          "EmptyItemName",
          "AutomationInTestStepNotPresentOrInvalid",
          "NotManualTestExecution",
          "ManualTestExecution",
          "AttachmentNotFound",
          "AttachmentMaxSizeExceeded",
          "ImageMaxSizeExceeded",
          "ImageFormatInvalid",
          "AttachmentMaxTransferSizeExceeded",
          "FileNotFound",
          "TestExecutionNotFound",
          "TestExecutionFinalized",
          "InvalidTestStepId",
          "ManualExecutionsWithStatusAndWithout",
          "ArchiveJobAlreadyStarted",
          "UpdateOncePerTestExecution",
          "EmptyListNotAllowed",
          "AutomationScriptUnsupportedTechnologySave",
          "InvalidTestData",
          "UserEntriesCannotBeLocked",
          "UserEntriesMustHaveUserId",
          "DefaultEntriesUserIdNotAllowed",
          "FolderNameNotUnique",
          "FolderCycle",
          "FolderNameEmpty",
          "FolderNotEmpty",
          "DuplicateSprintName",
          "EmptySprintName",
          "InvalidStepType",
          "InvalidTestStepExecutionStatusType",
          "FolderNotificationRuleNotEmpty",
          "CustomFilterAcceptedStatusesNotRecognized",
          "CustomFilterOptionsNotEmpty",
          "FilterInvalid",
          "FilterGroupInvalid",
          "FilterGroupOperatorInvalid",
          "FilterGroupOperatorsMixed",
          "FilterClauseInvalid",
          "FilterClauseFieldInvalid",
          "FilterClauseUnknownField",
          "FilterClauseFieldNotSupported",
          "FilterClauseOperatorInvalid",
          "FilterClauseOperatorNotSupported",
          "FilterClauseValueInvalid",
          "FilterClauseIncorrectNumberOfValues",
          "SortInvalid",
          "SortClauseInvalid",
          "SortClauseFieldInvalid",
          "SortClauseUnknownField",
          "SortClauseFieldNotSupported",
          "SortClauseDirectionInvalid",
          "ReportDefinitionNotFound",
          "InvalidReportDefinitionFile",
          "ReportScriptingNotAllowed",
          "ReportPluginNotRecognized",
          "InvalidPatchType",
          "WrongPatchType",
          "ExecuteAllWithTestJobIds",
          "DuplicateAgentName",
          "DuplicateAgentCode",
          "DuplicateLabelName",
          "EmptyAgentName",
          "InvalidAgentTypeForCopy",
          "InvalidApiItemTypeToObjectTypeMask",
          "InvalidItemPath",
          "DuplicateReportParameter",
          "InvalidFolderIdMultiProjectReport",
          "InvalidColor",
          "InvalidApplicableItemTypes",
          "InvalidVersionOfProjectConfigFile",
          "OperationBlockedByOtherTask",
          "ItemTypeNotSupported",
          "EmptyDashboardTitle",
          "InvalidReorderWidgets",
          "DuplicateProjectFolderFavourite",
          "SprintStillContainsItems",
          "InvalidIntialLetters",
          "InvalidProjectTreeParentFolder",
          "InvalidDependencyDependentOnItSelf",
          "CannotModifyAutomaticDependencies",
          "MultiChoiceFieldValueExceededMaxLength",
          "NotificationTemplateInvalidLanguage",
          "InvalidReportParameterValue",
          "UnknownReportParameter",
          "InvalidApiImportPhase",
          "InvalidApiImportErrorType",
          "SharedDictionaryNotAllowed",
          "NotificationTemplateMixedLanguage",
          "ExecutableFilesUploadBlocked",
          "ItemTypeNotSupportedInDashboards",
          "InvalidUsername",
          "DuplicateUserName",
          "InvalidEmail",
          "LowPasswordComplexity",
          "InvalidLicenseCode",
          "NoFreeLicenses",
          "InvalidLicenseAssignmentAlreadyAssigned",
          "InvalidLicenseAssignmentNotAssigned",
          "LicenseTypeNotChanged",
          "InvalidApiPermission",
          "ViolatedPermissionDependencies",
          "DuplicateRoleName",
          "RoleNotFound",
          "InvalidProjectAssignment",
          "ProjectTemplateFieldIsActivated",
          "ProjectTemplateFieldIsDeactivated",
          "ProjectTemplateDuplicateFieldOperations",
          "ProjectTemplateNotIntendedLayoutChange",
          "ProjectTemplateFieldOperationNotAllowed"
        ]
      },
      "ApiBackendNotAvailableError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "This error is returned when the aqua backend is not available. You can wait\na couple of minutes and check if the backend is available again. If not, you\nmight want to contact your aqua administrator.",
            "additionalProperties": false
          }
        ]
      },
      "ApiForbiddenError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "This error is returned when the current user is not allowed to perform the\nrequested operation.",
            "additionalProperties": false,
            "properties": {
              "ForbiddenErrorType": {
                "description": "The reason why the current user is not allowed to perform the requested\noperation.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiForbiddenErrorType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiForbiddenErrorType": {
        "type": "string",
        "description": "The different reasons why a Forbidden error might occur.\r\nThis enum has the following values:\r\n  - `NotLicensed` The current user's license does not allow to perform\nthe requested operation.\r\n  - `NotPermitted` The current user does not have permission to perform\nthe requested operation.\r\n",
        "x-enumNames": [
          "NotLicensed",
          "NotPermitted"
        ],
        "enum": [
          "NotLicensed",
          "NotPermitted"
        ]
      },
      "ApiInternalError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "An internal error occurred in the REST API. Please ask your\nadministrator to check the aqua server logs.",
            "additionalProperties": false
          }
        ]
      },
      "ApiMediaTypeNotSupportedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "This error is returned when media type of the request is not supported.\nUnless files are uploaded, only the media type application/json is supported.",
            "additionalProperties": false
          }
        ]
      },
      "ApiMethodNotAllowedError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "This error is returned when the endpoint does not support the\nrequested HTTP method. Please refer to the REST API documentation\nfor the supported HTTP methods.",
            "additionalProperties": false
          }
        ]
      },
      "ApiNotFoundError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiError"
          },
          {
            "type": "object",
            "description": "This error is returned when the specified entity or endpoint\ndoes not exist.",
            "additionalProperties": false
          }
        ]
      },
      "ApiAgentBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "AgentType",
          "mapping": {
            "Pool": "#/components/schemas/ApiPool",
            "SingleAgent": "#/components/schemas/ApiSingleAgent"
          }
        },
        "description": "An automation agent or pool (configured in a project).",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Id",
          "Name",
          "ProjectId",
          "Code",
          "Status",
          "SupportedTechnologies",
          "AgentType"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the agent.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the agent.",
            "minLength": 1
          },
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project the agent is created in.",
            "format": "int32"
          },
          "Code": {
            "type": "string",
            "description": "The code of the agent.",
            "minLength": 1
          },
          "Status": {
            "description": "Status of the agent.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAgentSimpleStatus"
              }
            ]
          },
          "SupportedTechnologies": {
            "type": "array",
            "description": "The technologies supported by this agent. ",
            "items": {
              "$ref": "#/components/schemas/ApiAutomationTechnology"
            }
          },
          "AgentType": {
            "type": "string"
          }
        }
      },
      "ApiAgentSimpleStatus": {
        "type": "string",
        "description": "Represents current status of an automation agent\r\nThis enum has the following values:\r\n  - `Available` \r\n  - `BlockedOrNoAgents` \r\n  - `NoResponseYet` \r\n  - `PartiallyAvailable` \r\n  - `Unavailable` \r\n",
        "x-enumNames": [
          "BlockedOrNoAgents",
          "Available",
          "PartiallyAvailable",
          "Unavailable",
          "NoResponseYet"
        ],
        "enum": [
          "BlockedOrNoAgents",
          "Available",
          "PartiallyAvailable",
          "Unavailable",
          "NoResponseYet"
        ]
      },
      "ApiAutomationTechnology": {
        "type": "string",
        "description": "Represents the different test automation technologies supported\nby aqua.\r\nThis enum has the following values:\r\n  - `Database` aqua's database automation technology allows to execute\nSQL instructions against various database management\nsystems.\r\n  - `Jenkins` Integration with the Jenkins CI and CD server. Allows to\ntrigger jobs on the Jenkins server.\r\n  - `JMeter` Integration of the load and performance test tool Apache\nJMeter.\r\n  - `None` No test automation technology is used.\r\n  - `PowerShell` aqua's Powershell integration allows to execute\narbitrary Powershell scripts.\r\n  - `QTP` HP QuickTest Professional integration\r\n  - `Ranorex` Ranorex integration\r\n  - `SoapUI` SoapUI integration\r\n  - `UFT` MicroFocus Unified Functional Testing integration\r\n  - `UnixShell` aqua's UnixShell integration allows to execute arbitrary\nunix shell scripts in various languages.\r\n",
        "x-enumNames": [
          "None",
          "Database",
          "Jenkins",
          "JMeter",
          "PowerShell",
          "QTP",
          "Ranorex",
          "SoapUI",
          "UFT",
          "UnixShell"
        ],
        "enum": [
          "None",
          "Database",
          "Jenkins",
          "JMeter",
          "PowerShell",
          "QTP",
          "Ranorex",
          "SoapUI",
          "UFT",
          "UnixShell"
        ]
      },
      "ApiPool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentBase"
          },
          {
            "type": "object",
            "description": "Represents a pool of automation agents.",
            "additionalProperties": false,
            "required": [
              "Agents"
            ],
            "properties": {
              "Agents": {
                "type": "array",
                "description": "List of agent ids included in this pool.",
                "items": {
                  "$ref": "#/components/schemas/ApiAgentIdAndName"
                }
              }
            }
          }
        ]
      },
      "ApiAgentIdAndName": {
        "type": "object",
        "description": "Some minimal identifying information for an agent.",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the agent. When the id is not provided, the agent\nhas been deleted.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the agent.",
            "minLength": 1
          }
        }
      },
      "ApiSingleAgent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentBase"
          },
          {
            "type": "object",
            "description": "Represents an automation agent (configured in a project).",
            "additionalProperties": false,
            "required": [
              "ExecutionStatus"
            ],
            "properties": {
              "ExecutionStatus": {
                "description": "Execution status of the agent.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAgentExecutionStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiAgentExecutionStatus": {
        "type": "string",
        "description": "Represents current execution status of an automation agent\r\nThis enum has the following values:\r\n  - `Executing` \r\n  - `Idle` \r\n  - `Offline` \r\n",
        "x-enumNames": [
          "Idle",
          "Executing",
          "Offline"
        ],
        "enum": [
          "Idle",
          "Executing",
          "Offline"
        ]
      },
      "ApiAgentCreateOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "CreateOperation",
          "mapping": {
            "CreateSingleAgent": "#/components/schemas/ApiAgentCreateSingleAgent",
            "CopySingleAgent": "#/components/schemas/ApiAgentCreateCopySingleAgent",
            "CreatePool": "#/components/schemas/ApiAgentCreatePool"
          }
        },
        "description": "Represents data required to execute single agent - create operation. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "CreateOperation"
        ],
        "properties": {
          "CreateOperation": {
            "type": "string"
          }
        }
      },
      "ApiAgentCreateSingleAgent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentCreateOperation"
          },
          {
            "type": "object",
            "description": "Create single agent operation.",
            "additionalProperties": false,
            "required": [
              "ProjectId",
              "Name"
            ],
            "properties": {
              "ProjectId": {
                "type": "integer",
                "description": "The id of the project the agent is created in.",
                "format": "int32"
              },
              "Name": {
                "type": "string",
                "description": "The name of the agent.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ApiAgentCreateCopySingleAgent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentCreateOperation"
          },
          {
            "type": "object",
            "description": "Create single agent as copy operation.",
            "additionalProperties": false,
            "required": [
              "ProjectId",
              "AgentIdToCopy"
            ],
            "properties": {
              "ProjectId": {
                "type": "integer",
                "description": "The id of the project the agent is copied to.",
                "format": "int32"
              },
              "Name": {
                "type": "string",
                "description": "The name of the copied agent.",
                "nullable": true
              },
              "AgentIdToCopy": {
                "type": "integer",
                "description": "The id of the agent wich should be copied. ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiAgentCreatePool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentCreateOperation"
          },
          {
            "type": "object",
            "description": "Create single agent as copy operation.",
            "additionalProperties": false,
            "required": [
              "ProjectId",
              "Name"
            ],
            "properties": {
              "ProjectId": {
                "type": "integer",
                "description": "The id of the project the agent is created in.",
                "format": "int32"
              },
              "Name": {
                "type": "string",
                "description": "The name of the agent pool.",
                "minLength": 1
              },
              "Agents": {
                "type": "array",
                "description": "A list of agent ids included in this pool.",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiAgentPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "UpdatePool": "#/components/schemas/ApiAgentPatchUpdatePool",
            "UpdateSingleAgent": "#/components/schemas/ApiAgentPatchUpdateSingleAgent"
          }
        },
        "description": "Represents data required to execute modify operation.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiAgentPatchUpdatePool": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentPatchOperation"
          },
          {
            "type": "object",
            "description": "Rename project operation.",
            "additionalProperties": false,
            "properties": {
              "NewName": {
                "type": "string",
                "description": "New name of the pool. ",
                "nullable": true
              },
              "Agents": {
                "type": "array",
                "description": "A list of agent ids included in this pool.",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiAgentPatchUpdateSingleAgent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAgentPatchOperation"
          },
          {
            "type": "object",
            "description": "Rename project operation.",
            "additionalProperties": false,
            "required": [
              "NewName"
            ],
            "properties": {
              "NewName": {
                "type": "string",
                "description": "New name of the single agent. ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ApiSprintNewResponse": {
        "type": "object",
        "description": "Contains information about created sprint.",
        "additionalProperties": false,
        "properties": {
          "SprintId": {
            "type": "integer",
            "description": "The id of the sprint.",
            "format": "int32"
          }
        }
      },
      "ApiSprintNew": {
        "type": "object",
        "description": "Contains necessery information to create a new sprint.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the sprint.",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "description": "The project id.",
            "format": "int32"
          },
          "AvailableStoryPoints": {
            "type": "integer",
            "description": "The number of story points per sprint.",
            "format": "int32"
          },
          "Start": {
            "type": "string",
            "description": "The date of the sprint start.",
            "format": "date-time",
            "nullable": true
          },
          "End": {
            "type": "string",
            "description": "The date of the sprint end.",
            "format": "date-time",
            "nullable": true
          },
          "Active": {
            "type": "boolean",
            "description": "Indicates that the sprint ist active."
          },
          "Tags": {
            "type": "string",
            "description": "Sprint tags.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the sprint.",
            "nullable": true
          }
        }
      },
      "ApiSprint": {
        "type": "object",
        "description": "A persistent sprint.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the sprint.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the sprint.",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "description": "The project id.",
            "format": "int32"
          },
          "AvailableStoryPoints": {
            "type": "integer",
            "description": "The number of story points per sprint.",
            "format": "int32"
          },
          "Start": {
            "type": "string",
            "description": "The date of the sprint start.",
            "format": "date-time",
            "nullable": true
          },
          "End": {
            "type": "string",
            "description": "The date of the sprint end.",
            "format": "date-time",
            "nullable": true
          },
          "Active": {
            "type": "boolean",
            "description": "Indicates that the sprint ist active."
          },
          "Tags": {
            "type": "string",
            "description": "Sprint tags.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the sprint.",
            "nullable": true
          },
          "Statistics": {
            "description": "Count of the assigned items, by the item type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiSprintStatistic"
              }
            ]
          }
        }
      },
      "ApiSprintStatistic": {
        "type": "object",
        "description": "Contains statistics, count of the assigned items, by the item type.",
        "additionalProperties": false,
        "properties": {
          "CountDefects": {
            "type": "integer",
            "description": "Count of assigned defects.",
            "format": "int32"
          },
          "CountRequirements": {
            "type": "integer",
            "description": "Count of assigned requirements.",
            "format": "int32"
          },
          "CountTestCases": {
            "type": "integer",
            "description": "Count of assigned test cases.",
            "format": "int32"
          },
          "CountTestScenarios": {
            "type": "integer",
            "description": "Count of assigned test scenarios.",
            "format": "int32"
          },
          "CountScripts": {
            "type": "integer",
            "description": "Count of assigned scripts.",
            "format": "int32"
          }
        }
      },
      "ApiSprintUpdate": {
        "type": "object",
        "description": "Contains information to update a new sprint.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the sprint.",
            "nullable": true
          },
          "AvailableStoryPoints": {
            "type": "integer",
            "description": "The number of story points per sprint.",
            "format": "int32",
            "nullable": true
          },
          "Start": {
            "type": "string",
            "description": "The date of the sprint start.",
            "format": "date-time",
            "nullable": true
          },
          "End": {
            "type": "string",
            "description": "The date of the sprint end.",
            "format": "date-time",
            "nullable": true
          },
          "Active": {
            "type": "boolean",
            "description": "Indicates that the sprint ist active.",
            "nullable": true
          },
          "Tags": {
            "type": "string",
            "description": "Sprint tags.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the sprint.",
            "nullable": true
          }
        }
      },
      "ApiItemListResult": {
        "type": "object",
        "description": "Wraps a list of items together with some meta data",
        "additionalProperties": false,
        "properties": {
          "Items": {
            "type": "array",
            "description": "The list of items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItem"
            }
          },
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          }
        }
      },
      "ApiItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemInfo"
          },
          {
            "type": "object",
            "description": "Represents an item.",
            "additionalProperties": false,
            "properties": {
              "Details": {
                "type": "array",
                "description": "Contains all the different fields specified for this item type",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFieldWithValue"
                }
              },
              "EditLayout": {
                "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEditLayout"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiFieldWithValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiField"
          },
          {
            "type": "object",
            "description": "The field of an aqua item including its value.",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "description": "The value of the field. The data structure can be different depending\non the field type but will always contain a human-readable text representation\nof the value.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFieldValue"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiFieldValue": {
        "type": "object",
        "discriminator": {
          "propertyName": "FieldValueType",
          "mapping": {
            "DateTime": "#/components/schemas/ApiFieldValueDateTime",
            "Decimal": "#/components/schemas/ApiFieldValueDecimal",
            "Dictionary": "#/components/schemas/ApiFieldValueDictionary",
            "DictionaryMultiChoice": "#/components/schemas/ApiFieldValueDictionaryMultiChoice",
            "ExecutionHistory": "#/components/schemas/ApiFieldValueExecutionHistory",
            "Flag": "#/components/schemas/ApiFieldValueFlag",
            "Id": "#/components/schemas/ApiFieldValueId",
            "RichText": "#/components/schemas/ApiFieldValueRichText",
            "Sprint": "#/components/schemas/ApiFieldValueSprint",
            "String": "#/components/schemas/ApiFieldValueString",
            "TestJobStatistics": "#/components/schemas/ApiFieldValueTestJobStatistics",
            "TestScenarios": "#/components/schemas/ApiFieldValueTestScenarios",
            "TimeSpan": "#/components/schemas/ApiFieldValueTimeSpan",
            "User": "#/components/schemas/ApiFieldValueUser",
            "UserMultiChoice": "#/components/schemas/ApiFieldValueUserMultiChoice",
            "StringList": "#/components/schemas/ApiFieldValueStringList",
            "Json": "#/components/schemas/ApiFieldValueJson"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "FieldValueType"
        ],
        "properties": {
          "Text": {
            "type": "string",
            "description": "A human-readable representation of the field value.",
            "nullable": true
          },
          "FieldValueType": {
            "type": "string"
          }
        }
      },
      "ApiFieldValueDateTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiFieldValueDecimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "number",
                "format": "decimal"
              }
            }
          }
        ]
      },
      "ApiFieldValueDictionary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiFieldValueDictionaryMultiChoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "description": "The value of a multi choice dictionary field. Contains the value\nboth as list of ids and list of names.",
            "additionalProperties": false,
            "properties": {
              "Ids": {
                "type": "array",
                "description": "The list of field value ids.",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Values": {
                "type": "array",
                "description": "The list of field value names.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueExecutionHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestCaseExecutionHistory"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestCaseExecutionHistory": {
        "type": "object",
        "description": "Historic information regarding the last executions\nof a test case or test job.",
        "additionalProperties": false,
        "properties": {
          "MaxNumberOfEntries": {
            "type": "integer",
            "description": "The maximum number of entries the history can have. The history can\nhave less entries when the test case or test job has not been executed\nthat often yet.",
            "format": "int32"
          },
          "Entries": {
            "type": "array",
            "description": "The list of history entries.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestCaseExecutionHistoryEntry"
            }
          }
        }
      },
      "ApiTestCaseExecutionHistoryEntry": {
        "type": "object",
        "description": "Contains history information for a single test execution.",
        "additionalProperties": false,
        "properties": {
          "ExecutionStatus": {
            "description": "The status of execution.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestCaseRunStatus"
              }
            ]
          },
          "ExecutionDate": {
            "description": "The date of execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "TestScenarioId": {
            "type": "integer",
            "description": "The id of test scenario.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiTestCaseRunStatus": {
        "type": "string",
        "description": "Identifies the status of an execution of a test case.\r\nThis enum has the following values:\r\n  - `Blocked` Execution has been blocked\r\n  - `Failed` Execution has failed\r\n  - `NotApplicable` Execution status is not applicable to result\r\n  - `NotCompleted` Execution has started but not completed yet\r\n  - `NotRun` Never executed\r\n  - `Passed` Execution has passed\r\n",
        "x-enumNames": [
          "NotRun",
          "NotCompleted",
          "Failed",
          "Passed",
          "Blocked",
          "NotApplicable"
        ],
        "enum": [
          "NotRun",
          "NotCompleted",
          "Failed",
          "Passed",
          "Blocked",
          "NotApplicable"
        ]
      },
      "ApiFieldValueFlag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ApiFieldValueId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiFieldValueRichText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Html": {
                "type": "string",
                "description": "The rich text contained in the field as HTML. The HTML includes\npictures as img tags.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiFieldValueSprint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The Id of the Sprint",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiFieldValueString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldValueTestJobStatistics": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestJobStatisticsEntry"
                }
              }
            }
          }
        ]
      },
      "ApiTestJobStatisticsEntry": {
        "type": "object",
        "description": "Holds statistical information for test jobs with\na single last execution status.",
        "additionalProperties": false,
        "properties": {
          "Status": {
            "description": "The last execution status to which this statistical\ninformation applies.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestCaseRunStatus"
              }
            ]
          },
          "Title": {
            "type": "string",
            "description": "The title of the execution status.",
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The number of test jobs which reached this status\nduring their last execution.",
            "format": "int32"
          },
          "Percentage": {
            "type": "number",
            "description": "The percentage of test jobs which reached this status\nduring their last execution.",
            "format": "float"
          }
        }
      },
      "ApiFieldValueTestScenarios": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueTimeSpan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "description": "A time span which consists of a value and a unit.",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "number",
                "description": "The value of the given time span. The base unit is\ngiven separately.",
                "format": "decimal"
              },
              "Unit": {
                "description": "The unit which is used for the given time span.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/TimeUnit"
                  }
                ]
              }
            }
          }
        ]
      },
      "TimeUnit": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Day` \r\n  - `Hour` \r\n  - `Minute` \r\n  - `Month` \r\n  - `Second` \r\n  - `Week` \r\n",
        "x-enumNames": [
          "Day",
          "Minute",
          "Hour",
          "Second",
          "Week",
          "Month"
        ],
        "enum": [
          "Day",
          "Minute",
          "Hour",
          "Second",
          "Week",
          "Month"
        ]
      },
      "ApiFieldValueUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The id of the user.",
                "format": "int32"
              },
              "UserInfo": {
                "description": "Further information regarding the user. This might be null.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiUserInfo": {
        "type": "object",
        "description": "The user information",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the user",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The username of the user",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "The first name of the user",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "The surname / last name of the user",
            "nullable": true
          },
          "Fullname": {
            "type": "string",
            "description": "The full name of the user. This string is correctly formatted and\nshould be used when displaying a user e.g. in a list.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "The email address of the user",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of the user",
            "nullable": true
          },
          "Position": {
            "type": "string",
            "description": "The position of the user in the company",
            "nullable": true
          },
          "PictureUrl": {
            "type": "string",
            "description": "The absolute url of the user's picture. Might be null, if\nthe user does not have a picture assigned.",
            "nullable": true
          }
        }
      },
      "ApiFieldValueUserMultiChoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Ids": {
                "type": "array",
                "description": "The list of user ids",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "Values": {
                "type": "array",
                "description": "The list of users. Contains more information on each user.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserInfo"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueStringList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "description": "The value of a multi choice dictionary field. Contains the value\nboth as list of ids and list of names.",
            "additionalProperties": false,
            "properties": {
              "Values": {
                "type": "array",
                "description": "The list of field value names.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueJson": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiField": {
        "type": "object",
        "description": "Contains meta information for a specific field of an item.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the field. The field id is identical to the internal property name. Therefore, it is\nonly unique in scope of the same project and item type.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "The title for the field which should be shown in the user interface.",
            "nullable": true
          },
          "FieldType": {
            "description": "The type of the field.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldType"
              }
            ]
          },
          "EditMeta": {
            "description": "The metadata required for editing the field.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldEditMeta"
              }
            ]
          }
        }
      },
      "ApiFieldType": {
        "type": "string",
        "description": "Identifies the type of a field in aqua.\r\nThis enum has the following values:\r\n  - `DateTime` \r\n  - `Decimal` \r\n  - `Dictionary` \r\n  - `DictionaryMultiChoice` \r\n  - `ExecutionHistory` \r\n  - `Flag` \r\n  - `Id` \r\n  - `Json` \r\n  - `Sprint` \r\n  - `String` \r\n  - `StringAutoComplete` \r\n  - `StringList` \r\n  - `TestJobStatistics` \r\n  - `TestScenarios` \r\n  - `Text` \r\n  - `TimeSpan` \r\n  - `User` \r\n  - `UserMultiChoice` \r\n",
        "x-enumNames": [
          "DateTime",
          "Decimal",
          "Dictionary",
          "DictionaryMultiChoice",
          "Sprint",
          "String",
          "Text",
          "TimeSpan",
          "User",
          "UserMultiChoice",
          "StringAutoComplete",
          "Id",
          "Flag",
          "ExecutionHistory",
          "TestScenarios",
          "TestJobStatistics",
          "StringList",
          "Json"
        ],
        "enum": [
          "DateTime",
          "Decimal",
          "Dictionary",
          "DictionaryMultiChoice",
          "Sprint",
          "String",
          "Text",
          "TimeSpan",
          "User",
          "UserMultiChoice",
          "StringAutoComplete",
          "Id",
          "Flag",
          "ExecutionHistory",
          "TestScenarios",
          "TestJobStatistics",
          "StringList",
          "Json"
        ]
      },
      "ApiFieldEditMeta": {
        "type": "object",
        "description": "Contains the information for a specific field of an item including\nthe field's value.",
        "additionalProperties": false,
        "properties": {
          "PossibleValues": {
            "type": "array",
            "description": "The list of values which are allowed for this field. The list contains\ndifferent types of values depending on the field type. Null means that\nall values which fit the field type are allowed.\nThis list of values is based on the project template and on the workflow.\nThese values might be restricted further by the Rules which are included\nin this editmeta as well.",
            "nullable": true,
            "items": {}
          },
          "AllowOtherValues": {
            "type": "boolean",
            "description": "Indicates whether the field allows ohter values which are not included in the\nPossibleValues as long as they are fit the field type."
          },
          "Required": {
            "type": "boolean",
            "description": "Indicates that the field is required which means that it must\nhave a nonempty value."
          },
          "Readonly": {
            "type": "boolean",
            "description": "Indicates that the field is readonly and cannot be modified\nby the user."
          },
          "DefaultValue": {
            "description": "The default value for the field. It might be mandatory to use the default\nvalue which means that the field is fixed to the default value.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldDefaultValue"
              }
            ]
          },
          "Rules": {
            "type": "array",
            "description": "A list with additional rules which apply to this field. The client is responsible\nfor evaluating these rules as necessary when fields change. These rules might\nfurther restrict the list of possible values.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldRule"
            }
          },
          "Range": {
            "description": "This field contains the minimal and maximal value.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldRange"
              }
            ]
          },
          "FieldMask": {
            "type": "string",
            "description": "Contains formatting information for a specific field. ",
            "nullable": true
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether the item should be visible in a UI. The visibility\nof the field might depend on the item's status when a workflow is active.\nIn this case, the field will still have valid index."
          },
          "Highlight": {
            "type": "boolean",
            "description": "Indicates that the field should be highlighted in the UI."
          }
        }
      },
      "ApiFieldDefaultValue": {
        "type": "object",
        "description": "Contains the default value for certain field.",
        "additionalProperties": false,
        "properties": {
          "Value": {
            "description": "The field value that should be used. The exact structure of the\nfield value depends on the field type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "Mandatory": {
            "type": "boolean",
            "description": "Indicates that the field must be set to the default value. The field\nis fixed to this exact value."
          }
        }
      },
      "ApiFieldRule": {
        "type": "object",
        "discriminator": {
          "propertyName": "RuleType",
          "mapping": {
            "Workflow": "#/components/schemas/ApiFieldRuleWorkflow",
            "DependentValues": "#/components/schemas/ApiFieldRuleDependentValues"
          }
        },
        "description": "Represents a single rule for a field.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Guid",
          "FieldId",
          "RuleType"
        ],
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The unique id of the field rule.",
            "minLength": 1
          },
          "FieldId": {
            "type": "string",
            "description": "The id of the field to which the rule applies.",
            "minLength": 1
          },
          "RuleType": {
            "type": "string"
          }
        }
      },
      "ApiFieldRuleWorkflow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRule"
          },
          {
            "type": "object",
            "description": "This field rule allows to specify actions which are performed\nwhen a dictionary field is changed to a certain value.",
            "additionalProperties": false,
            "required": [
              "Transitions"
            ],
            "properties": {
              "Transitions": {
                "type": "array",
                "description": "The list of transitions which this rule defines. Each transition\nspecifies a list of actions which should be performed when the\nfield is changed to the specified value.",
                "items": {
                  "$ref": "#/components/schemas/ApiFieldRuleWorkflowTransition"
                }
              }
            }
          }
        ]
      },
      "ApiFieldRuleWorkflowTransition": {
        "type": "object",
        "description": "Contains all the actions which should be performed when the dictionary\nfield is changed to the specified value.",
        "additionalProperties": false,
        "required": [
          "Value",
          "Actions"
        ],
        "properties": {
          "Value": {
            "description": "The field value to which this transition applies.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "Actions": {
            "type": "array",
            "description": "The list of actions which are executed when the value of the\ndictionary field is changed to the specified value.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRuleWorkflowActions"
            }
          }
        }
      },
      "ApiFieldRuleWorkflowActions": {
        "type": "object",
        "description": "Contains the actions which should be performed for one specific field.",
        "additionalProperties": false,
        "required": [
          "FieldId",
          "Readonly",
          "Required",
          "Visible",
          "Highlight",
          "ChangeValue"
        ],
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "This action is applied to the field with this id.",
            "minLength": 1
          },
          "Readonly": {
            "type": "boolean",
            "description": "Indicates whether the field should be readonly."
          },
          "Required": {
            "type": "boolean",
            "description": "Indicates whether the field should be required."
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether the field should be visible."
          },
          "Highlight": {
            "type": "boolean",
            "description": "Indicates whether the field should be highlighted."
          },
          "ChangeValue": {
            "type": "boolean",
            "description": "Indicates whether the value of the field should be changed."
          },
          "Value": {
            "description": "The value to which the field should be set. The type depends\non the field type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          }
        }
      },
      "ApiFieldRuleDependentValues": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRule"
          },
          {
            "type": "object",
            "description": "A field rule which defines a dependency between to dictionary fields. Values\nof the field with the id FieldId are only allowed for certain\nvalues in the field with the id OtherFieldId.",
            "additionalProperties": false,
            "required": [
              "OtherFieldId",
              "Restrictions"
            ],
            "properties": {
              "OtherFieldId": {
                "type": "string",
                "description": "The id of the other field on which the field to which this rule applies depends.",
                "minLength": 1
              },
              "Restrictions": {
                "type": "array",
                "description": "The list with the restrictions for the value of the field.",
                "items": {
                  "$ref": "#/components/schemas/ApiFieldValueRestriction"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueRestriction": {
        "type": "object",
        "description": "The restriction for certain field value.",
        "additionalProperties": false,
        "required": [
          "Value",
          "AllowedFor"
        ],
        "properties": {
          "Value": {
            "description": "The field value to which this restriction applies.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "AllowedFor": {
            "type": "array",
            "description": "The values of the other field for which the specified\nvalue is allowed.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldValue"
            }
          }
        }
      },
      "ApiFieldRange": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Min": {
            "type": "number",
            "description": "If the field has the type decimal, this field contains the minimal value.",
            "format": "decimal",
            "nullable": true
          },
          "Max": {
            "type": "number",
            "description": "If the field has the type decimal, this field contains the maximal value.",
            "format": "decimal",
            "nullable": true
          }
        }
      },
      "ApiEditLayout": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Entries": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiEditLayoutEntry"
            }
          }
        }
      },
      "ApiEditLayoutEntry": {
        "type": "object",
        "discriminator": {
          "propertyName": "EntryType",
          "mapping": {
            "Field": "#/components/schemas/ApiEditLayoutEntryField",
            "Group": "#/components/schemas/ApiEditLayoutEntryGroup"
          }
        },
        "description": "Edit layout entry. Depending on type different properties are available \n(see subclasses).",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "EntryType"
        ],
        "properties": {
          "EntryType": {
            "type": "string"
          }
        }
      },
      "ApiEditLayoutEntryField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiEditLayoutEntry"
          },
          {
            "type": "object",
            "description": "Edit layout entry describing a single field. ",
            "additionalProperties": false,
            "properties": {
              "FieldId": {
                "type": "string",
                "description": "Id of the field.",
                "nullable": true
              },
              "ColSpan": {
                "type": "integer",
                "description": "The number of columns this field should span in the UI layout.\nA three-column layout is assumed.",
                "format": "int32"
              },
              "StartsNewLine": {
                "type": "boolean",
                "description": "Indicates whether this field should be placed on a new line in\nthe UI layout."
              }
            }
          }
        ]
      },
      "ApiEditLayoutEntryGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiEditLayoutEntry"
          },
          {
            "type": "object",
            "description": "Edit layout entry describing a group. ",
            "additionalProperties": false,
            "properties": {
              "Caption": {
                "type": "string",
                "description": "Group's caption.",
                "nullable": true
              },
              "Expanded": {
                "type": "boolean",
                "description": "Indicates whether group should be initially expanded. "
              },
              "GroupMembers": {
                "type": "array",
                "description": "Members of this group",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiEditLayoutEntry"
                }
              }
            }
          }
        ]
      },
      "ApiItemInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemIdentifier"
          },
          {
            "type": "object",
            "description": "Contains only the basic information of a specific item.",
            "additionalProperties": false,
            "properties": {
              "Name": {
                "type": "string",
                "description": "The name of the item",
                "nullable": true
              },
              "Version": {
                "description": "The version information for the item.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemVersion"
                  }
                ]
              },
              "Archived": {
                "type": "boolean",
                "description": "The archived flag of the item."
              },
              "Location": {
                "description": "The location (project and folder) of the item",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLocation"
                  }
                ]
              },
              "LastModified": {
                "description": "The last modification date of the item.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFieldValueDateTime"
                  }
                ]
              },
              "EditableInfo": {
                "description": "Contains information whether the item is editable by\nthe current user or not. When the item is locked, this\ninfo also contains the locking user.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEditableInfo"
                  }
                ]
              },
              "Permissions": {
                "description": "Specifies permissions of current user in regard to operations available for this item. \nPlease note that proper subclass is returned basing on the item type:\n\nTestCase: ApiTestCasePermissions,\nRequirement: ApiRequirementPermissions,\nDefect: ApiDefectPermissions,\n\nPlease also note that Permissions might be empty (null) what means they haven't been initialized \nfor the particular call (due to optimalizations). In this case you have to retrive the item separatelly \nto get permissions information. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemPermissions"
                  }
                ]
              },
              "HasDependency": {
                "type": "boolean",
                "description": "True if item has any dependency. "
              },
              "HasFiles": {
                "type": "boolean",
                "description": "True if item has any attachments. "
              },
              "SyncStatus": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiSyncItemStatus"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemVersion": {
        "type": "object",
        "description": "Version information for an item.",
        "additionalProperties": false,
        "properties": {
          "Version": {
            "type": "integer",
            "description": "The version of the item. This version field is incremented each time\nthe item is modified.",
            "format": "int32"
          },
          "OperationNumber": {
            "type": "integer",
            "description": "This field is incremented when the item itself was not modified\nbut the information in some system-managed fields changed.",
            "format": "int32"
          },
          "SubOperationNumber": {
            "type": "integer",
            "description": "The same as OperationNumber but for changes which are\nless important and do not increment the operation number.",
            "format": "int32"
          }
        }
      },
      "ApiItemLocation": {
        "type": "object",
        "description": "Specifies the location (project and folder) of an item",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project",
            "format": "int32",
            "nullable": true
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the project",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder",
            "format": "int32",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "description": "The human readable path as text. The path consists of the project name and\nthe folder names separated by slashes",
            "nullable": true
          },
          "Path": {
            "type": "array",
            "description": "Provides a list of folders with the complete path. The order of items corresponds to the path. The project itself is not contained.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectFolder"
            }
          },
          "IsProjectArchived": {
            "type": "boolean",
            "description": "Indicates whether the project is archived."
          }
        }
      },
      "ApiProjectFolder": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of folder",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of folder",
            "nullable": true
          },
          "ParentFolderId": {
            "type": "integer",
            "description": "Folder Id of Parent, '0' means it is a root folder of the given project",
            "format": "int32"
          },
          "FolderPermissions": {
            "description": "Permissions of folder-level operations. \nNote: this property is included conditionally, \nso null means it has not been initialized. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderPermissions"
              }
            ]
          }
        }
      },
      "ApiProjectFolderPermissions": {
        "type": "object",
        "description": "Represents permissions in a project. ",
        "additionalProperties": false,
        "properties": {
          "Requirement": {
            "description": "Requirement permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderItemTypePermissions"
              }
            ]
          },
          "Defect": {
            "description": "Defect permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderItemTypePermissions"
              }
            ]
          },
          "TestCase": {
            "description": "Test case permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderItemTypePermissions"
              }
            ]
          },
          "TestScenario": {
            "description": "Test scenario permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderItemTypePermissions"
              }
            ]
          },
          "Script": {
            "description": "Script permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderItemTypePermissions"
              }
            ]
          },
          "CanManageTree": {
            "description": "Indicates whether the user is able to manage the folder tree (create/edit/delete folders).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanImportItems": {
            "description": "Indicates whether the user is able to import items to the folder.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanExportItems": {
            "description": "Indicates whether the user is able to export items from the folder.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiProjectFolderItemTypePermissions": {
        "type": "object",
        "description": "Represents item-type related permissions in a project folder. ",
        "additionalProperties": false,
        "properties": {
          "CanViewItem": {
            "description": "Indicates whether user is able to see items in this folder.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateItem": {
            "description": "Indicates whether user is able to create item in this folder.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewItemAnySubfolder": {
            "description": "Indicates whether user is able to view items in any of the subfolders (including current folder)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEditItemAnySubfolder": {
            "description": "Indicates whether user is able to edit items in any of the subfolders (including current folder)\nBy edit we mean edit any aspect of the item (this also includes Owned/Assigned variants of the permission). ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCutItemAnySubfolder": {
            "description": "Indicates whether user is able to cut items in any of the subfolders (including current folder). \nThis permission is also granted if the user is able to cut items which are assigned to him or owned by him.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanBatchEditItemAnySubfolder": {
            "description": "Indicates whether user is able to batch-edit items in any of the subfolders (including current folder)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateItemAnySubfolder": {
            "description": "Indicates whether user is able to create items in any of the subfolders (including current folder)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDeleteItemAnySubfolder": {
            "description": "Indicates whether user is able to delete items in any of the subfolders (including current folder)\nThis also includes Owned/Assigned variants of the permission.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanExecuteTestCaseAutomated": {
            "description": "Indicates whether the user in allowed to execute automated tests cases",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanExecuteTestCaseManual": {
            "description": "Indicates whether the user in allowed to perform manual test executions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanFinalizeTestExecution": {
            "description": "Indicates whether the user in allowed to finalize test executions",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiEditableInfo": {
        "type": "object",
        "description": "Contains information about editable status of an item.",
        "additionalProperties": false,
        "properties": {
          "Status": {
            "description": "Editable status",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditableStatus"
              }
            ]
          },
          "LockingUser": {
            "description": "If item is currently being edited then contains information about the user editing the item",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "LockingDate": {
            "description": "If item is currently being edited then contains date when the edit started (when edit lock has been placed).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          }
        }
      },
      "ApiEditableStatus": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Editable` The item can be edited.\r\n  - `Locked` The item is already locked (either by another user or\nby the same user in a different context)\r\n  - `NoPermissionToEdit` The current user is not permitted to edit the item.\r\n  - `NoPermissionToView` The current user is not permitted to view the item.\r\n  - `Unknown` No information is provided whether the item is editable or not.\nThe item should not be edited based on this editable status.\r\n",
        "x-enumNames": [
          "Editable",
          "Locked",
          "NoPermissionToEdit",
          "NoPermissionToView",
          "Unknown"
        ],
        "enum": [
          "Editable",
          "Locked",
          "NoPermissionToEdit",
          "NoPermissionToView",
          "Unknown"
        ]
      },
      "ApiItemPermissions": {
        "type": "object",
        "description": "Represents permissions of an item. Intended to be subclassed \nby classes with more fine-grained permission set for given context. ",
        "additionalProperties": false,
        "properties": {
          "CanCreateDependency": {
            "description": "Indicates whether user is able to create the item dependency.\nIn order to create a dependency between two different item types it is enough to have 'Create Dependency' permission for either of the linked items.\nIf the permission is denied check the other side as well.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDeleteDependency": {
            "description": "Indicates whether user is able to delete the item dependency.\nIn order to delete a dependency between two different item types it is enough to have 'Delete Dependency' permission for either of the linked items.\nIf the permission is denied check the other side as well.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateDependentItem": {
            "type": "object",
            "description": "Indicates whether the user is able to create a new dependent item of\na certain type in the same folder as the current item is located in.",
            "nullable": true,
            "x-dictionaryKey": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/ApiPermissionResult"
            }
          },
          "CanEditFields": {
            "description": "Indicates whether user is able to edit the item's fields.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEditStatus": {
            "description": "Indicates whether user is able to change the item's sttaus.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDelete": {
            "description": "Indicates whether user is able to delete the item.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewAttachments": {
            "description": "Indicates whether user is able to view the item's attachments.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanAddAttachments": {
            "description": "Indicates whether user is able to add attachments to the item.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDeleteAttachments": {
            "description": "Indicates whether user is able to delete the item's attachments.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateEditMindMap": {
            "description": "Indicates whether user is able to edit/create mind maps.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageProjectCustomDefaults": {
            "description": "Indicates whether the user is able to manage project-level\ncustom defaults for items of this type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiItemType": {
        "type": "string",
        "description": "Identifies the type of item.\r\nThis enum has the following values:\r\n  - `Defect` \r\n  - `ExternalJira` \r\n  - `ExternalOtrs` \r\n  - `Requirement` \r\n  - `Script` \r\n  - `TestCase` \r\n  - `TestExecution` \r\n  - `TestScenario` \r\n",
        "x-enumNames": [
          "Defect",
          "Requirement",
          "TestCase",
          "TestScenario",
          "TestExecution",
          "Script",
          "ExternalJira",
          "ExternalOtrs"
        ],
        "enum": [
          "Defect",
          "Requirement",
          "TestCase",
          "TestScenario",
          "TestExecution",
          "Script",
          "ExternalJira",
          "ExternalOtrs"
        ]
      },
      "ApiSyncItemStatus": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Error` The item is synced and there was a problem in the sync, sync stopped\r\n  - `Ok` The item is synced and sync status is ok\r\n  - `Unsynced` The item is not part of any sync\r\n  - `Warning` The item is synced and there was a problem in the sync, sync stopped\r\n",
        "x-enumNames": [
          "Ok",
          "Warning",
          "Error",
          "Unsynced"
        ],
        "enum": [
          "Ok",
          "Warning",
          "Error",
          "Unsynced"
        ]
      },
      "ApiItemIdentifier": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the item",
            "format": "int32"
          },
          "FormattedId": {
            "type": "string",
            "description": "A nicely formatted version of the id which\ncontains the item type identifier and the numerical\nid padded to six digits. E.g.: RQ004242.\nThis id is only for presentation. You must use the\nnumerical id for all requests.",
            "nullable": true
          },
          "Type": {
            "description": "The type of the item",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          }
        }
      },
      "ApiItemListRequest": {
        "type": "object",
        "description": "Items list request with filtering, sorting, and paging",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project of which the items are loaded.",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder of which the items are loaded.",
            "format": "int32"
          },
          "ItemTypes": {
            "type": "string",
            "description": "The item types to import as comma-separated list.\nPossible values for item type are: Defect, Requirement, TestCase, TestScenario and Script.",
            "nullable": true
          },
          "Search": {
            "type": "string",
            "description": "Contains filter and search information.",
            "nullable": true
          },
          "SprintId": {
            "type": "integer",
            "description": "Sprint filter:\nNot specified - do not filter by sprint\n0 - select items without psorint assigned only\n1+ - select items for specified sprint only",
            "format": "int32",
            "nullable": true
          },
          "OrderBy": {
            "type": "string",
            "description": "Comma-separated list of properties which should be used to order\nthe result list. ASC or DESC can be appended to indicate the sort order. Ascending sort\norder is assumed by default.",
            "nullable": true
          },
          "IncludeSubfolders": {
            "type": "boolean",
            "description": "Indicates whether items from sub folders should be included."
          },
          "IncludeArchived": {
            "type": "boolean",
            "description": "Indicates whether archieved items should be included."
          },
          "StartAt": {
            "type": "integer",
            "description": "Number of results to skip when the results are fetched.\nCan be used for pagination.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "Maximum number of results which are fetched.\nCan be used for pagination.",
            "format": "int32"
          },
          "IsFilteredByStatus": {
            "type": "boolean",
            "description": "Indicates whether items should be filtered by status"
          },
          "IncludeEditLayout": {
            "type": "boolean",
            "description": "Whether or not to include the edit layout in each item"
          }
        }
      },
      "ApiAgileReorderItemsResponse": {
        "type": "object",
        "description": "Contains the reorderd agile priority.",
        "additionalProperties": false,
        "properties": {
          "ReorderedPriority": {
            "type": "object",
            "description": "Dictionary containing the item id and the new order of the item.",
            "nullable": true,
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ApiAgileReorderItemsRequest": {
        "type": "object",
        "description": "Backlog items reorder request data",
        "additionalProperties": false,
        "properties": {
          "Ids": {
            "type": "array",
            "description": "The ids of the items which will be reorderd.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "TargetId": {
            "type": "integer",
            "description": "The id of the item which is used as anchor of the sorting.",
            "format": "int32"
          },
          "BeforeTarget": {
            "type": "boolean",
            "description": "Indicates whether items should be reorded before or after the target."
          }
        }
      },
      "ApiAgileSettings": {
        "type": "object",
        "description": "Provides settings for Agile",
        "additionalProperties": false,
        "properties": {
          "Backlog": {
            "description": "Provides settings for backlog in Agile",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAgileBacklog"
              }
            ]
          }
        }
      },
      "ApiAgileBacklog": {
        "type": "object",
        "description": "Provides settings for backlog in Agile",
        "additionalProperties": false,
        "properties": {
          "RequirementStatuses": {
            "type": "array",
            "description": "Available statuses for requirements",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAgileBacklogStatus"
            }
          },
          "DefectStatuses": {
            "type": "array",
            "description": "Available statuses for defects",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAgileBacklogStatus"
            }
          },
          "TestCaseStatuses": {
            "type": "array",
            "description": "Available statuses for test cases",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAgileBacklogStatus"
            }
          }
        }
      },
      "ApiAgileBacklogStatus": {
        "type": "object",
        "description": "Provides status for items in Agile backlog",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "IsHidden": {
            "type": "boolean",
            "description": "Provides information whether an item with this status \nshould be hidden in the backlog or not"
          }
        }
      },
      "ApiBatchAllowedValuesResponse": {
        "type": "object",
        "description": "Contains the values which are allowed for a batch update\nof the specified fields in the specified items.",
        "additionalProperties": false,
        "properties": {
          "Items": {
            "type": "array",
            "description": "The items for which this response is valid.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemIdentifier"
            }
          },
          "Entries": {
            "type": "array",
            "description": "Entries containing information for each requested field. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiBatchAllowedValuesResponseEntry"
            }
          }
        }
      },
      "ApiBatchAllowedValuesResponseEntry": {
        "type": "object",
        "description": "Contains the values which are allowed for a batch update\nof the specified field (in the specified items).",
        "additionalProperties": false,
        "properties": {
          "Field": {
            "description": "The field for which this response is valid.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiField"
              }
            ]
          },
          "AllowedValues": {
            "type": "array",
            "description": "The list with the values which are allowed for the specified field\nin all of the specified items.\nIf the limit was specified in the request then this collection contains \nonly up to given number fo values. The overall count can be always \nfound in AllowedValuesTotalCount. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldValue"
            }
          },
          "AllowedValuesTotalCount": {
            "type": "integer",
            "description": "Overall number of allowed values. ",
            "format": "int32"
          },
          "AllowOtherValues": {
            "type": "boolean",
            "description": "Indicates whether the other values, which are not included in the\nAllowedValues, are allowed as long as they fit the field type."
          }
        }
      },
      "ApiBatchAllowedValuesRequest": {
        "type": "object",
        "description": "A request for the values which are alllowed for a batch update of\ngiven field in the given items.",
        "additionalProperties": false,
        "properties": {
          "ItemIds": {
            "type": "array",
            "description": "The ids of the items for which the possible values should\nbe computed",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "FieldIds": {
            "type": "array",
            "description": "The ids of the field for which the possible values should\nbe computed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Limit": {
            "type": "integer",
            "description": "Limit on number of returned values per field (0 means unlimited).\nIf found more values than allowed limit then return only the part (not more than limit) and additionally \ncount of all values. ",
            "format": "int32"
          }
        }
      },
      "ApiLongOperationOfBoolean": {
        "type": "object",
        "description": "Result of a REST API call that started long operation (asynchronous) to perform the actual job. \nWhen LongRunningTaskGuid is null this indicates a situation when REST API was able to process the task without starting asynchronous job. \nThen the actual result is returned in Result field. ",
        "additionalProperties": false,
        "properties": {
          "LongRunningTaskGuid": {
            "type": "string",
            "description": "Id of the long running task. Can be used to query the progress (see GET /System/LongOperation/{guid}). \nIf empty indicates the long operation has not been started and actual result is immediately available in the Result field. ",
            "nullable": true
          },
          "Result": {
            "type": "boolean",
            "description": "Filled only when LongRunningTaskGuid is not provided. Contains actual, immediate result of the call. "
          }
        }
      },
      "ApiItemsPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "MoveInProject": "#/components/schemas/ApiItemsPatchRequestMoveInProject",
            "Archive": "#/components/schemas/ApiItemsPatchRequestArchive",
            "Delete": "#/components/schemas/ApiItemsPatchRequestDelete",
            "UpdateProperties": "#/components/schemas/ApiItemsPatchRequestUpdateProperties",
            "CopyInProject": "#/components/schemas/ApiItemsPatchRequestCopyInProject",
            "CopyToProject": "#/components/schemas/ApiItemsPatchRequestCopyToProject"
          }
        },
        "description": "Represent a request to modify a bunch of items (of the same type).\nActual subclasses are used, depending on OperationType. ",
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiItemsPatchRequestMoveInProject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that moves a bunch of items to a different folder in the same project. ",
            "additionalProperties": false,
            "properties": {
              "MoveOperation": {
                "description": "Details of the move operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationMoveInProject"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationMoveInProject": {
        "type": "object",
        "description": "Represents request to move items to a given folder (in scope of the same project)",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be moved. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          },
          "TargetFolderId": {
            "type": "integer",
            "description": "Id of the target folder. Use zero for root folder.  ",
            "format": "int32"
          }
        }
      },
      "ApiItemLongOperationDomain": {
        "type": "object",
        "discriminator": {
          "propertyName": "Type",
          "mapping": {
            "FilterBased": "#/components/schemas/ApiItemLongOperationDomainFilterBased",
            "ListBased": "#/components/schemas/ApiItemLongOperationDomainListBased"
          }
        },
        "description": "Defines set of items to be processed. ",
        "additionalProperties": false,
        "required": [
          "Type"
        ],
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "Project where to look in.",
            "format": "int32"
          },
          "Type": {
            "type": "string"
          }
        }
      },
      "ApiItemLongOperationDomainFilterBased": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemLongOperationDomain"
          },
          {
            "type": "object",
            "description": "Defines set of items matching a given filter. ",
            "additionalProperties": false,
            "properties": {
              "FolderId": {
                "type": "integer",
                "description": "Folder where to look in. Zero means root folder (combined with Recursive=true means all items in project). ",
                "format": "int32"
              },
              "Recursive": {
                "type": "boolean",
                "description": "If true items in subfolders are considered as well. "
              },
              "Filter": {
                "description": "If provided then only items matching this filter would be processed. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFilterUpdate"
                  }
                ]
              },
              "IncludeArchived": {
                "type": "boolean",
                "description": "If true the archived items (matching other criteria) are included as well. "
              }
            }
          }
        ]
      },
      "ApiFilterUpdate": {
        "type": "object",
        "description": "Contains the new filter expression.",
        "additionalProperties": false,
        "properties": {
          "Expression": {
            "type": "array",
            "description": "The filter expression as JSON structure.",
            "nullable": true,
            "items": {}
          }
        }
      },
      "ApiItemLongOperationDomainListBased": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemLongOperationDomain"
          },
          {
            "type": "object",
            "description": "Defines set of items matching a given list of ids. ",
            "additionalProperties": false,
            "properties": {
              "Items": {
                "type": "array",
                "description": "List of ids of items",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiItemsPatchRequestArchive": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that archived (or un-archives) a bunch of items. ",
            "additionalProperties": false,
            "properties": {
              "ArchiveOperation": {
                "description": "Details of the archive operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationArchive"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationArchive": {
        "type": "object",
        "description": "Represents request to batch archive (or un-archive) items. ",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be archived/un-archived. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          },
          "Archive": {
            "type": "boolean",
            "description": "If true, the items will be marked as archived. \nIf false, the items will be marked as non-archived. "
          }
        }
      },
      "ApiItemsPatchRequestDelete": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that deletes a bunch of items. ",
            "additionalProperties": false,
            "properties": {
              "DeleteOperation": {
                "description": "Details of the archive operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationDelete"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationDelete": {
        "type": "object",
        "description": "Represents request to batch delete items. ",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be deleted. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          }
        }
      },
      "ApiItemsPatchRequestUpdateProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that updates properties of some items. ",
            "additionalProperties": false,
            "properties": {
              "UpdatePropertiesOperation": {
                "description": "Details of the update properties operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationUpdateProperties"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationUpdateProperties": {
        "type": "object",
        "description": "Represents request to batch update items (update properties). ",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be updated.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          },
          "Updates": {
            "type": "array",
            "description": "List of updates to be applied. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiBatchFieldUpdate"
            }
          }
        }
      },
      "ApiBatchFieldUpdate": {
        "type": "object",
        "discriminator": {
          "propertyName": "UpdateType",
          "mapping": {
            "RegularField": "#/components/schemas/ApiBatchFieldUpdateRegularField",
            "MultiChoiceFieldDifferential": "#/components/schemas/ApiBatchFieldUpdateMultiChoiceFieldDifferential",
            "NewEnclosure": "#/components/schemas/ApiBatchFieldUpdateNewEnclosure"
          }
        },
        "description": "Represents batch update of a single field to a given value. ",
        "additionalProperties": false,
        "required": [
          "UpdateType"
        ],
        "properties": {
          "Value": {
            "description": "The value to which the field will be changed. The exact type of the\nvalue depends on the field of the type: \n- for regular fields (UpdateType=RegularField) it should be the same as defined in ApiFieldUpdate.Value\n- for differential update of multi-selection fields (UpdateType=MultiChoiceFieldDifferential) it should be an array of ints (ids)\n- for a new enclosure (UpdateType=NewEnclosure) it should be string containing plain text of the enclosure content.",
            "nullable": true
          },
          "UpdateOnlyIfEmpty": {
            "type": "boolean",
            "description": "Performs update only if the field is currently empty. "
          },
          "UpdateType": {
            "type": "string"
          }
        }
      },
      "ApiBatchFieldUpdateRegularField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBatchFieldUpdate"
          },
          {
            "type": "object",
            "description": "Represents update of a \"regular\" field i.e. field which is editable in the edit mask (see project meta). ",
            "additionalProperties": false,
            "properties": {
              "FieldId": {
                "type": "string",
                "description": "Id of the regular field to update.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiBatchFieldUpdateMultiChoiceFieldDifferential": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBatchFieldUpdateRegularField"
          },
          {
            "type": "object",
            "description": "Represents differential update of a multi-selection field.",
            "additionalProperties": false,
            "properties": {
              "Add": {
                "type": "boolean",
                "description": "If true, the values of multi-selection field are added to the current set. \nIf false, the values are removed. "
              }
            }
          }
        ]
      },
      "ApiBatchFieldUpdateNewEnclosure": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBatchFieldUpdate"
          },
          {
            "type": "object",
            "description": "Represents a special type of update that creates a new defect enclosure.\nValid only for defects. ",
            "additionalProperties": false,
            "properties": {
              "EnclosureType": {
                "description": "Type of enclosure to be created. ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEnclosureType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiEnclosureType": {
        "type": "string",
        "description": "Identifies the type of enclosure.\r\nThis enum has the following values:\r\n  - `Description` The enclosure is a description of the defect.\r\n  - `Note` The enclosure is a note.\r\n  - `ReplicationProcedure` The enclosure is a replication procedure which explains how\nto reproduce the defect.\r\n  - `Resolution` The enclosure explains how the defect has been resolved.\r\n",
        "x-enumNames": [
          "Description",
          "Note",
          "ReplicationProcedure",
          "Resolution"
        ],
        "enum": [
          "Description",
          "Note",
          "ReplicationProcedure",
          "Resolution"
        ]
      },
      "ApiItemsPatchRequestCopyInProject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that copies a bunch of items to a different folder in the same project. ",
            "additionalProperties": false,
            "properties": {
              "CopyOperation": {
                "description": "Details of the copy operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationCopyInProject"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationCopyInProject": {
        "type": "object",
        "description": "Represents request to copy items to a given folder (in scope of the same project)",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be moved. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          },
          "TargetFolderId": {
            "type": "integer",
            "description": "Id of the target folder. Use zero for root folder.  ",
            "format": "int32"
          }
        }
      },
      "ApiItemsPatchRequestCopyToProject": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemsPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents operation that copies a bunch of items to a different folder in the same project. ",
            "additionalProperties": false,
            "properties": {
              "CopyOperation": {
                "description": "Details of the copy operation. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLongOperationCopyToProject"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemLongOperationCopyToProject": {
        "type": "object",
        "description": "Represents request to copy items to a given folder (in scope of the same project)",
        "additionalProperties": false,
        "properties": {
          "Criteria": {
            "description": "Defines how to select items that should be moved. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLongOperationDomain"
              }
            ]
          },
          "TargetProjectId": {
            "type": "integer",
            "description": "Id of the target project.",
            "format": "int32"
          },
          "TargetFolderId": {
            "type": "integer",
            "description": "Id of the target folder. Use zero for root folder.  ",
            "format": "int32"
          }
        }
      },
      "ApiConfigElement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiConfigElementBase"
          },
          {
            "type": "object",
            "description": "Represents a config element (consisting of one or more entries), identified by given data path. ",
            "additionalProperties": false,
            "properties": {
              "Entries": {
                "type": "array",
                "description": "Entries in this config element. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiConfigElementEntry"
                }
              }
            }
          }
        ]
      },
      "ApiConfigElementEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiConfigElementEntrySave"
          },
          {
            "type": "object",
            "description": "Represents single entry of a config element. ",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "If of the entry. Can be used to e.g. delete the entry. ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiConfigElementEntrySave": {
        "type": "object",
        "description": "Represents single entry of a config element. ",
        "additionalProperties": false,
        "properties": {
          "Label": {
            "type": "string",
            "description": "Label of the entry.",
            "nullable": true
          },
          "Content": {
            "type": "string",
            "description": "Content of the entry.",
            "nullable": true
          }
        }
      },
      "ApiConfigElementBase": {
        "type": "object",
        "description": "Base class for models representing config elements.",
        "additionalProperties": false,
        "properties": {
          "DataPath": {
            "type": "string",
            "description": "Path of the config element. Lowercase letters divided by dots are expected here \ne.g. \"this.is.sample.path\". ",
            "nullable": true
          },
          "Locked": {
            "type": "boolean",
            "description": "True if the config element is locked. \nThe flag is considered only for non-user entries (project or global). "
          },
          "ProjectId": {
            "type": "integer",
            "description": "Id of the project this config element belongs to. \nCan be null - then represents global configuration (system-wide). ",
            "format": "int32",
            "nullable": true
          },
          "UserId": {
            "type": "integer",
            "description": "Id of the owner user. Can be null, then represents a default \nconfiguration (either project or global level). ",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiConfigElementSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiConfigElementBase"
          },
          {
            "type": "object",
            "description": "Represents a config element (consisting of one or more entries), identified by given data path. ",
            "additionalProperties": false,
            "properties": {
              "Entries": {
                "type": "array",
                "description": "Entries to be saved. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiConfigElementEntrySave"
                }
              }
            }
          }
        ]
      },
      "ApiConfigElementPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "Delete": "#/components/schemas/ApiConfigElementPatchOperationDelete"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiConfigElementPatchOperationDelete": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiConfigElementPatchOperation"
          },
          {
            "type": "object",
            "description": "Represents details of a an operation that deletes sevral config element entries basing on given parameters. ",
            "additionalProperties": false,
            "properties": {
              "DataPath": {
                "type": "string",
                "description": "Path of the considered config elements. Lowercase letters divided by dots are expected here \ne.g. \"this.is.sample.path\". ",
                "nullable": true
              },
              "ProjectId": {
                "type": "integer",
                "description": "Id of the project where config element belongs to. \nCan be null - then represents global configurations (system-wide). ",
                "format": "int32",
                "nullable": true
              },
              "UserId": {
                "type": "integer",
                "description": "Id of the owner user. Can be null, then represents a default \nconfigurations (either project or global level). ",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "HttpRequestMessage": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Version": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Version"
              }
            ]
          },
          "Content": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HttpContent"
              }
            ]
          },
          "Method": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HttpMethod"
              }
            ]
          },
          "RequestUri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "Headers": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HttpRequestHeaders"
              }
            ]
          },
          "Properties": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          }
        }
      },
      "Version": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Major": {
            "type": "integer",
            "format": "int32"
          },
          "Minor": {
            "type": "integer",
            "format": "int32"
          },
          "Build": {
            "type": "integer",
            "format": "int32"
          },
          "Revision": {
            "type": "integer",
            "format": "int32"
          },
          "MajorRevision": {
            "type": "integer"
          },
          "MinorRevision": {
            "type": "integer"
          }
        }
      },
      "HttpContent": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "Headers": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/HttpContentHeaders"
              }
            ]
          }
        }
      },
      "HttpContentHeaders": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePairOfStringAndIEnumerableOfString"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Allow": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "ContentDisposition": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContentDispositionHeaderValue"
                  }
                ]
              },
              "ContentEncoding": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "ContentLanguage": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "ContentLength": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              },
              "ContentLocation": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "ContentMD5": {
                "type": "string",
                "format": "byte",
                "nullable": true
              },
              "ContentRange": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContentRangeHeaderValue"
                  }
                ]
              },
              "ContentType": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/MediaTypeHeaderValue"
                  }
                ]
              },
              "Expires": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "LastModified": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "ContentDispositionHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DispositionType": {
            "type": "string",
            "nullable": true
          },
          "Parameters": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            }
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "FileNameStar": {
            "type": "string",
            "nullable": true
          },
          "CreationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ModificationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ReadDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "NameValueHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ContentRangeHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Unit": {
            "type": "string",
            "nullable": true
          },
          "From": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "To": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Length": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "HasLength": {
            "type": "boolean"
          },
          "HasRange": {
            "type": "boolean"
          }
        }
      },
      "MediaTypeHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CharSet": {
            "type": "string",
            "nullable": true
          },
          "Parameters": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            }
          },
          "MediaType": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "KeyValuePairOfStringAndIEnumerableOfString": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HttpMethod": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Method": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HttpRequestHeaders": {
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyValuePairOfStringAndIEnumerableOfString"
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Accept": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/MediaTypeWithQualityHeaderValue"
                }
              },
              "AcceptCharset": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/StringWithQualityHeaderValue"
                }
              },
              "AcceptEncoding": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/StringWithQualityHeaderValue"
                }
              },
              "AcceptLanguage": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/StringWithQualityHeaderValue"
                }
              },
              "Authorization": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthenticationHeaderValue"
                  }
                ]
              },
              "Expect": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/NameValueWithParametersHeaderValue"
                }
              },
              "ExpectContinue": {
                "type": "boolean",
                "nullable": true
              },
              "From": {
                "type": "string",
                "nullable": true
              },
              "Host": {
                "type": "string",
                "nullable": true
              },
              "IfMatch": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/EntityTagHeaderValue"
                }
              },
              "IfModifiedSince": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "IfNoneMatch": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/EntityTagHeaderValue"
                }
              },
              "IfRange": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RangeConditionHeaderValue"
                  }
                ]
              },
              "IfUnmodifiedSince": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "MaxForwards": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "ProxyAuthorization": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/AuthenticationHeaderValue"
                  }
                ]
              },
              "Range": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/RangeHeaderValue"
                  }
                ]
              },
              "Referrer": {
                "type": "string",
                "format": "uri",
                "nullable": true
              },
              "TE": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/TransferCodingWithQualityHeaderValue"
                }
              },
              "UserAgent": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ProductInfoHeaderValue"
                }
              },
              "CacheControl": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CacheControlHeaderValue"
                  }
                ]
              },
              "Connection": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "ConnectionClose": {
                "type": "boolean",
                "nullable": true
              },
              "Date": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "Pragma": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/NameValueHeaderValue"
                }
              },
              "Trailer": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "TransferEncoding": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/TransferCodingHeaderValue"
                }
              },
              "TransferEncodingChunked": {
                "type": "boolean",
                "nullable": true
              },
              "Upgrade": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ProductHeaderValue"
                }
              },
              "Via": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ViaHeaderValue"
                }
              },
              "Warning": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/WarningHeaderValue"
                }
              }
            }
          }
        ]
      },
      "MediaTypeWithQualityHeaderValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MediaTypeHeaderValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Quality": {
                "type": "number",
                "format": "double",
                "nullable": true
              }
            }
          }
        ]
      },
      "StringWithQualityHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Value": {
            "type": "string",
            "nullable": true
          },
          "Quality": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "AuthenticationHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Scheme": {
            "type": "string",
            "nullable": true
          },
          "Parameter": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "NameValueWithParametersHeaderValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NameValueHeaderValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Parameters": {
                "type": "array",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/NameValueHeaderValue"
                }
              }
            }
          }
        ]
      },
      "EntityTagHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Tag": {
            "type": "string",
            "nullable": true
          },
          "IsWeak": {
            "type": "boolean"
          }
        }
      },
      "RangeConditionHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EntityTag": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityTagHeaderValue"
              }
            ]
          }
        }
      },
      "RangeHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Unit": {
            "type": "string",
            "nullable": true
          },
          "Ranges": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/RangeItemHeaderValue"
            }
          }
        }
      },
      "RangeItemHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "From": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "To": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        }
      },
      "TransferCodingWithQualityHeaderValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransferCodingHeaderValue"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Quality": {
                "type": "number",
                "format": "double",
                "nullable": true
              }
            }
          }
        ]
      },
      "TransferCodingHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Value": {
            "type": "string",
            "nullable": true
          },
          "Parameters": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            }
          }
        }
      },
      "ProductInfoHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Product": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProductHeaderValue"
              }
            ]
          },
          "Comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ProductHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CacheControlHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "NoCache": {
            "type": "boolean"
          },
          "NoCacheHeaders": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "NoStore": {
            "type": "boolean"
          },
          "MaxAge": {
            "type": "string",
            "format": "duration",
            "nullable": true
          },
          "SharedMaxAge": {
            "type": "string",
            "format": "duration",
            "nullable": true
          },
          "MaxStale": {
            "type": "boolean"
          },
          "MaxStaleLimit": {
            "type": "string",
            "format": "duration",
            "nullable": true
          },
          "MinFresh": {
            "type": "string",
            "format": "duration",
            "nullable": true
          },
          "NoTransform": {
            "type": "boolean"
          },
          "OnlyIfCached": {
            "type": "boolean"
          },
          "Public": {
            "type": "boolean"
          },
          "Private": {
            "type": "boolean"
          },
          "PrivateHeaders": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "MustRevalidate": {
            "type": "boolean"
          },
          "ProxyRevalidate": {
            "type": "boolean"
          },
          "Extensions": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NameValueHeaderValue"
            }
          }
        }
      },
      "ViaHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ProtocolName": {
            "type": "string",
            "nullable": true
          },
          "ProtocolVersion": {
            "type": "string",
            "nullable": true
          },
          "ReceivedBy": {
            "type": "string",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WarningHeaderValue": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Code": {
            "type": "integer",
            "format": "int32"
          },
          "Agent": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ApiDashboardNG": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Size": {
            "$ref": "#/components/schemas/ApiDashboardNGSize"
          },
          "Widgets": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiDashboardNGWidget"
            }
          },
          "ProjectShares": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiDashboardNGShareProject"
            }
          },
          "Owner": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "IsFavourite": {
            "type": "boolean",
            "description": "True if the dashboard is marked as favourite by current user. \nNote: this property is ignored when saving. Please use specialized method instead\n(to set/unset dashboard as favourite)."
          }
        }
      },
      "ApiDashboardNGSize": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Large` \r\n  - `Medium` \r\n  - `Small` \r\n",
        "x-enumNames": [
          "Small",
          "Medium",
          "Large"
        ],
        "enum": [
          "Small",
          "Medium",
          "Large"
        ]
      },
      "ApiDashboardNGWidget": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "type": "string",
            "nullable": true
          },
          "Binding": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiDashboardNGWidgetBinding"
              }
            ]
          },
          "Model": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWidgetModel"
              }
            ]
          },
          "Data": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWidgetData"
              }
            ]
          }
        }
      },
      "ApiDashboardNGWidgetBinding": {
        "type": "object",
        "description": "Specifies the binding (project and folder) as well as recursive flag of a widget.  ",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project. \nThis field is required when saving. ",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder or zero (root folder).\nThis field is required when saving. ",
            "format": "int32"
          },
          "Recursive": {
            "type": "boolean",
            "description": "Specifies whether data should be loaded from the all subfolder or only from given folder. \nThis field is required when saving. "
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the project.\nThis field is ignored when saving. ",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "description": "The human readable path as text. The path consists of the project name and\nthe folder names separated by slashes.\nThis field is ignored when saving. \nWARNING! This field can be null in case the folder has been deleted. ",
            "nullable": true
          },
          "Path": {
            "type": "array",
            "description": "Provides a list of folders with the complete path. The order of items corresponds to the path. The project itself is not contained.\nThis field is ignored when saving. \nWARNING! This field can be null in case the folder has been deleted. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectFolder"
            }
          }
        }
      },
      "ApiWidgetModel": {
        "type": "object",
        "discriminator": {
          "propertyName": "WidgetType",
          "mapping": {
            "Chart": "#/components/schemas/ApiChartWidgetModel",
            "HtmlContent": "#/components/schemas/ApiHtmlContentWidgetModel",
            "ItemList": "#/components/schemas/ApiItemListWidgetModel"
          }
        },
        "description": "Base class for all widget models.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "WidgetType"
        ],
        "properties": {
          "WidgetType": {
            "type": "string"
          }
        }
      },
      "ApiChartWidgetModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetModel"
          },
          {
            "type": "object",
            "description": "Represents the model of the chart widget",
            "additionalProperties": false,
            "properties": {
              "ChartType": {
                "description": "Chart type",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiChartType"
                  }
                ]
              },
              "FilterDisplay": {
                "type": "string",
                "description": "Textual representation of the filter string (included in ChartWidgetDataSpecification)",
                "nullable": true
              },
              "ShowLegend": {
                "type": "boolean",
                "description": "If true the chart should show a legend."
              },
              "ShowTotals": {
                "type": "boolean",
                "description": "If true the chart should show totals."
              },
              "ShowPercentages": {
                "type": "boolean",
                "description": "If true the chart should show percentages."
              },
              "KPI": {
                "type": "array",
                "description": "KPI specifications (optional)",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiChartWidgetKPIEntry"
                }
              },
              "ChartWidgetDataSpecification": {
                "description": "Data specification for the chart widget",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiChartWidgetDataSpecification"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiChartType": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Bar` \r\n  - `BarSideBySide` \r\n  - `BarStacked` \r\n  - `Pie` \r\n  - `Table` \r\n",
        "x-enumNames": [
          "Pie",
          "Bar",
          "BarSideBySide",
          "BarStacked",
          "Table"
        ],
        "enum": [
          "Pie",
          "Bar",
          "BarSideBySide",
          "BarStacked",
          "Table"
        ]
      },
      "ApiChartWidgetKPIEntry": {
        "type": "object",
        "description": "KPI for a chart widget",
        "additionalProperties": false,
        "properties": {
          "ConditionType": {
            "description": "The type of condition which should be used for the KPI",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiChartWidgetKPICondition"
              }
            ]
          },
          "Selector": {
            "type": "string",
            "description": "If not-null the value is used to select only some of the grouped values.",
            "nullable": true
          },
          "Threshold": {
            "type": "integer",
            "description": "Threshold (count) to be compared using the given ConditionType",
            "format": "int32"
          },
          "Color": {
            "type": "string",
            "description": "Color to be used (optional). HEX RGB string e.g. \"ffaabc\"",
            "nullable": true
          }
        }
      },
      "ApiChartWidgetKPICondition": {
        "type": "string",
        "description": "KPI condition type\r\nThis enum has the following values:\r\n  - `Equal` \r\n  - `Greater` \r\n  - `GreaterEqual` \r\n  - `Less` \r\n  - `LessEqual` \r\n  - `NotEqual` \r\n",
        "x-enumNames": [
          "Equal",
          "NotEqual",
          "Less",
          "LessEqual",
          "Greater",
          "GreaterEqual"
        ],
        "enum": [
          "Equal",
          "NotEqual",
          "Less",
          "LessEqual",
          "Greater",
          "GreaterEqual"
        ]
      },
      "ApiChartWidgetDataSpecification": {
        "type": "object",
        "description": "Data specification for the chart widget",
        "additionalProperties": false,
        "properties": {
          "Dimensions": {
            "type": "integer",
            "description": "Number of dimensions. Allowed values are 1 or 2 ",
            "format": "int32"
          },
          "ItemType": {
            "description": "Type of item to consider. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "XAxisPropertyTitle": {
            "type": "string",
            "description": "Title of the field used to aggregate on X-axis (used only if the number of dimensions is 2).",
            "nullable": true
          },
          "XAxisDateTimeScale": {
            "description": "X-axis scale for datetime fields (used only if number od dimensions is 2).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiChartWidgetDateTimeScale"
              }
            ]
          },
          "XAxisSeparateMultiList": {
            "type": "boolean",
            "description": "If true and field used for aggregation on X-axis is a multi-select field (dictionary or user) \nthen data is aggregated for each single element of the multi-select list, not for subsets. \n(used only if number od dimensions is 2)"
          },
          "GroupByPropertyTitle": {
            "type": "string",
            "description": "Title of the field used to group by.",
            "nullable": true
          },
          "GroupByDateTimeScale": {
            "description": "Group-by scale for datetime fields (used only if number od dimensions is 2).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiChartWidgetDateTimeScale"
              }
            ]
          },
          "GroupBySeparateMultiList": {
            "type": "boolean",
            "description": "If true and field used for aggregation on Group-By is a multi-select field (dictionary or user) \nthen data is aggregated for each single element of the multi-select list, not for subsets. "
          },
          "FilterExpression": {
            "description": "Filter expression to be used for filtering data for this chart",
            "nullable": true
          },
          "ReverseSortXAxis": {
            "type": "boolean",
            "description": "If true then sorting on X-axis should be reversed  (used only if number od dimensions is 2)"
          },
          "ReverseSortGroupBy": {
            "type": "boolean",
            "description": "If true then sorting on group-by should be reversed"
          }
        }
      },
      "ApiChartWidgetDateTimeScale": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `CalendarWeek` Aggregate by calendar week \r\n  - `Day` Aggregate by day (default)\r\n  - `Month` Aggregate by month\r\n",
        "x-enumNames": [
          "Day",
          "CalendarWeek",
          "Month"
        ],
        "enum": [
          "Day",
          "CalendarWeek",
          "Month"
        ]
      },
      "ApiHtmlContentWidgetModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetModel"
          },
          {
            "type": "object",
            "description": "Represents the model of the HTML content widget",
            "additionalProperties": false,
            "properties": {
              "HtmlContentWidgetDataSpecification": {
                "description": "Data specification for the HTML content widget",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiHtmlContentWidgetDataSpecification"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiHtmlContentWidgetDataSpecification": {
        "type": "object",
        "description": "The data specification for an HTML content widget",
        "additionalProperties": false,
        "properties": {
          "Url": {
            "type": "string",
            "description": "The URL of the HTML content which should be displayed",
            "nullable": true
          }
        }
      },
      "ApiItemListWidgetModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetModel"
          },
          {
            "type": "object",
            "description": "Represents the model of the item-list widget",
            "additionalProperties": false,
            "properties": {
              "Columns": {
                "type": "array",
                "description": "Columns to be presented in the grid.",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              },
              "FilterDisplay": {
                "type": "string",
                "description": "Textual representation of the filter string which is included in\nItemListWidgetDataSpecification.",
                "nullable": true
              },
              "ItemListWidgetDataSpecification": {
                "description": "Data specification for the item list widget. Contains all parameters required to fetch data (from server) for this item list. ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemListWidgetDataSpecification"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemListWidgetDataSpecification": {
        "type": "object",
        "description": "The data specification for an item list widget",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "FilterExpression": {
            "description": "Filter expression to be used.",
            "nullable": true
          },
          "FirstResults": {
            "type": "integer",
            "description": "Number of elements to skip (used for pagination)",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "Number of elements to take (used for pagination)",
            "format": "int32"
          },
          "Culture": {
            "type": "string",
            "description": "Language ('en' or 'de'), required for generating values of some fields\nthat depend on the current language (e.g. last execution status). ",
            "nullable": true
          },
          "SortColumns": {
            "type": "array",
            "description": "The sorting which should be applied to the item list",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemListWidgetSorting"
            }
          }
        }
      },
      "ApiItemListWidgetSorting": {
        "type": "object",
        "description": "Represent sorting in item list widget",
        "additionalProperties": false,
        "properties": {
          "FieldTitle": {
            "type": "string",
            "description": "Title of the field to sort by",
            "nullable": true
          },
          "Ascending": {
            "type": "boolean",
            "description": "Sorting direction - if true then ascending, descending otherwise. "
          }
        }
      },
      "ApiWidgetData": {
        "type": "object",
        "discriminator": {
          "propertyName": "DataType",
          "mapping": {
            "ChartData": "#/components/schemas/ApiChartWidgetData",
            "HtmlContentData": "#/components/schemas/ApiHtmlContentWidgetData",
            "ItemListData": "#/components/schemas/ApiItemListWidgetData"
          }
        },
        "description": "Base class for all widget data classes.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "DataType"
        ],
        "properties": {
          "DataType": {
            "type": "string"
          }
        }
      },
      "ApiChartWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetData"
          },
          {
            "type": "object",
            "description": "The data for a chart widget",
            "additionalProperties": false,
            "properties": {
              "Status": {
                "description": "The status indicates whether there was any issue with fetching\nthe chart data",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiChartWidgetDataStatus"
                  }
                ]
              },
              "OneDimensionalData": {
                "type": "array",
                "description": "The data points for a one-dimensional chart",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiChartWidgetDataOneDimensionalElement"
                }
              },
              "TwoDimensionalData": {
                "type": "array",
                "description": "The data points for a two-dimensional chart",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiChartWidgetDataTwoDimensionalElement"
                }
              },
              "GroupByFieldMeta": {
                "description": "The metadata of the field by which the data has been grouped",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFieldMeta"
                  }
                ]
              },
              "XAxisFieldMeta": {
                "description": "The metadata of the field which has been used for X-axis data\nof a two-dimensional chart",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFieldMeta"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiChartWidgetDataStatus": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `InvalidFilter` \r\n  - `InvalidSpecification` \r\n  - `NoPermission` \r\n  - `OK` \r\n",
        "x-enumNames": [
          "OK",
          "NoPermission",
          "InvalidFilter",
          "InvalidSpecification"
        ],
        "enum": [
          "OK",
          "NoPermission",
          "InvalidFilter",
          "InvalidSpecification"
        ]
      },
      "ApiChartWidgetDataOneDimensionalElement": {
        "type": "object",
        "description": "A data point for a one-dimensional chart",
        "additionalProperties": false,
        "properties": {
          "GroupedValue": {
            "description": "The value by which the data was grouped together",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "NumberOfElements": {
            "type": "integer",
            "description": "The number of elements which have this value",
            "format": "int32"
          }
        }
      },
      "ApiChartWidgetDataTwoDimensionalElement": {
        "type": "object",
        "description": "A data point for a two-dimensional chart",
        "additionalProperties": false,
        "properties": {
          "GroupedValue": {
            "description": "The value by which the data was grouped together on the Y-axis",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "XAxisValue": {
            "description": "The value by which the data was grouped together on the X-axis",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "NumberOfElements": {
            "type": "integer",
            "description": "The number of elements which have these values",
            "format": "int32"
          }
        }
      },
      "ApiFieldMeta": {
        "type": "object",
        "discriminator": {
          "propertyName": "FieldType",
          "mapping": {
            "DateTime": "#/components/schemas/ApiFieldMetaDateTime",
            "Decimal": "#/components/schemas/ApiFieldMetaDecimal",
            "Dictionary": "#/components/schemas/ApiFieldMetaDictionary",
            "DictionaryMultiChoice": "#/components/schemas/ApiFieldMetaDictionaryMultiChoice",
            "ExecutionHistory": "#/components/schemas/ApiFieldMetaExecutionHistory",
            "Flag": "#/components/schemas/ApiFieldMetaFlag",
            "Id": "#/components/schemas/ApiFieldMetaId",
            "Sprint": "#/components/schemas/ApiFieldMetaSprint",
            "String": "#/components/schemas/ApiFieldMetaString",
            "StringAutoComplete": "#/components/schemas/ApiFieldMetaStringAutoComplete",
            "TestJobStatistics": "#/components/schemas/ApiFieldMetaTestJobStatistics",
            "TestScenarios": "#/components/schemas/ApiFieldMetaTestScenarios",
            "TimeSpan": "#/components/schemas/ApiFieldMetaTimeSpan",
            "User": "#/components/schemas/ApiFieldMetaUser",
            "UserMultiChoice": "#/components/schemas/ApiFieldMetaUserMultiChoice",
            "StringList": "#/components/schemas/ApiFieldMetaStringList"
          }
        },
        "description": "Contains the meta-information of a specific field.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "FieldType"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the field. The field id is identical to the internal property name. Therefore, it is\nonly unique in scope of the same project and item type.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title of this field, as visible in the UI. Can be customized by in project configuration.",
            "nullable": true
          },
          "IsCustom": {
            "type": "boolean",
            "description": "True if this field is a custom field."
          },
          "IsGroupableInCharts": {
            "type": "boolean",
            "description": "True if the field can be used as GroupBy or XAxis property on a chart (dashbaord)."
          },
          "SupportsFieldRules": {
            "type": "boolean",
            "description": "Indicates whether this field supports field rules."
          },
          "SupportedFilterOperations": {
            "type": "array",
            "description": "Contains a list of all filter operators which are supported\nfor this field.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "IsFilterable": {
            "type": "boolean",
            "description": "Indicates whether it is possible to filter by this field e.g.\nin item lists."
          },
          "IsSortable": {
            "type": "boolean",
            "description": "Indicates whether it is possible to sort by this field e.g.\nin item lists."
          },
          "IsAffectable": {
            "type": "boolean",
            "description": "Indicates whether it is possible to affect this field by field rules."
          },
          "IsGroupable": {
            "type": "boolean",
            "description": "Indicates whether it is possible to group by this field e.g.\nin item lists."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the field is currently enabled or disabled."
          },
          "SupportsBatchUpdate": {
            "type": "boolean",
            "description": "Indicates whether the field supports batch updates in general. Depending on the\nconcrete items and the configured workflow, it might still not be possible to change\na value even if the field supports batch updates in general."
          },
          "EditMeta": {
            "description": "EditMeta of the current field.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldEditMeta"
              }
            ]
          },
          "FieldType": {
            "type": "string"
          }
        }
      },
      "ApiFieldMetaDateTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a date time field. ",
            "additionalProperties": false,
            "properties": {
              "FieldMask": {
                "type": "string",
                "description": "Field mask ",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiFieldMetaDecimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a decimal field. ",
            "additionalProperties": false,
            "properties": {
              "FieldMask": {
                "type": "string",
                "description": "Field mask ",
                "nullable": true
              },
              "Min": {
                "type": "number",
                "description": "Minimum allowed field value (if defined)",
                "format": "decimal",
                "nullable": true
              },
              "Max": {
                "type": "number",
                "description": "Maximum allowed field value (if defined)",
                "format": "decimal",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiFieldMetaDictionary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a (single selection) dictionary field. ",
            "additionalProperties": false,
            "properties": {
              "Entries": {
                "type": "array",
                "description": "Dictionary entries.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFieldMetaDictionaryEntry"
                }
              },
              "IsShared": {
                "type": "boolean",
                "description": "Indicates if the field value set is shared."
              }
            }
          }
        ]
      },
      "ApiFieldMetaDictionaryEntry": {
        "type": "object",
        "description": "Contains the meta-information of a dictionary entry. ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the entry. This value is stored on actual item that references the dictionary entry.\n(entries can be safely renamed, as their ids do not change). ",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dictionary entry. This is the value visible in the UI. ",
            "nullable": true
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Indicates whether this entry should be cosnidered as default for this dictionary. "
          },
          "IsDeleted": {
            "type": "boolean",
            "description": "Indicates whether this entry was deleted. \nDeleted entries are not available for selection, but still can seen on old items (edited before teh entry has been deleted)."
          }
        }
      },
      "ApiFieldMetaDictionaryMultiChoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a (multi selection) dictionary field. ",
            "additionalProperties": false,
            "properties": {
              "Entries": {
                "type": "array",
                "description": "Dictionary entries.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFieldMetaDictionaryEntry"
                }
              },
              "IsShared": {
                "type": "boolean",
                "description": "Indicates if the field value set is shared."
              }
            }
          }
        ]
      },
      "ApiFieldMetaExecutionHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaFlag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a flag field. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta information of an Id field",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaSprint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a sprint field. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a string field. ",
            "additionalProperties": false,
            "properties": {
              "FieldMask": {
                "type": "string",
                "description": "Field mask ",
                "nullable": true
              },
              "Length": {
                "type": "integer",
                "description": "Maximum field length ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiFieldMetaStringAutoComplete": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMetaString"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a auto-complete string field. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaTestJobStatistics": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaTestScenarios": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaTimeSpan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta information of a timespan field",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a (single selection) user field. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaUserMultiChoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a (multi selection) user field. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldMetaStringList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldMeta"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a list of strings.",
            "additionalProperties": false
          }
        ]
      },
      "ApiHtmlContentWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetData"
          },
          {
            "type": "object",
            "description": "The data for an HTML content widget",
            "additionalProperties": false
          }
        ]
      },
      "ApiItemListWidgetData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiWidgetData"
          },
          {
            "type": "object",
            "description": "The data for an item list widget",
            "additionalProperties": false,
            "properties": {
              "Count": {
                "type": "integer",
                "description": "The total number of items which match the filter in the\nwidget defintion.",
                "format": "int32",
                "nullable": true
              },
              "Items": {
                "type": "array",
                "description": "The actual items. Only a subset of the matching items is\nincluded in the response depending on the pagination settings\nin the widget's data specification.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiItemInfo"
                }
              }
            }
          }
        ]
      },
      "ApiDashboardNGShareProject": {
        "type": "object",
        "description": "Represents fact of sharing a dashboard with members of a given project (or all projects), \noptionally with a role. Please see below for possible combination: \n\na) no project, no role: all users \nb) project, no role: all members of the project\nc) no project, role: all users having this role in any of the projects\nd) project, role: all members of the project in given role",
        "additionalProperties": false,
        "properties": {
          "Project": {
            "description": "If set, then only members of this project can see the dashboard. \nIf not set (null) then all users can see the dashboard. \nSee global description for detailed meaning in different combinations of Project and Role. \nWhen saving the Id field is considered only (or null).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "Role": {
            "description": "If set, then only users having this role (in given project) are considered. \nSee global description for detailed meaning in different combinations of Project and Role. \nWhen saving the Id field is considered only (or null). ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRoleIdName"
              }
            ]
          }
        }
      },
      "ApiProjectIdName": {
        "type": "object",
        "description": "Holds the id and the name of a project.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the project.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the project.",
            "nullable": true
          }
        }
      },
      "ApiRoleIdName": {
        "type": "object",
        "description": "Holds the id and the name of a role.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the role.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the role.",
            "nullable": true
          }
        }
      },
      "ApiDashboardNGReorderWidgets": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "WidgetId": {
            "type": "integer",
            "description": "The id of the widget.",
            "format": "int32"
          },
          "NewPosition": {
            "type": "integer",
            "description": "The new position of the widget.",
            "format": "int32"
          }
        }
      },
      "ApiDefect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItem"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Enclosures": {
                "type": "array",
                "description": "Contains all defect enclosures",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiEnclosure"
                }
              }
            }
          }
        ]
      },
      "ApiEnclosure": {
        "type": "object",
        "description": "An enclosure of a defect.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the enclosure.",
            "format": "int32"
          },
          "Type": {
            "description": "The type of the enclosure.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEnclosureType"
              }
            ]
          },
          "CreationDate": {
            "type": "string",
            "description": "The date when the enclosure has been created.",
            "format": "date-time"
          },
          "Content": {
            "description": "The content of the enclosure.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "Owner": {
            "description": "The owner of the enclosure.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Permissions": {
            "description": "The permissions of the enclosure.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEnclosurePermissions"
              }
            ]
          }
        }
      },
      "ApiRichText": {
        "type": "object",
        "description": "Contains some rich text. The rich text is provided in several different formats.\nWhen sending rich text to the server, the rich text must be provided in exactly\none format.",
        "additionalProperties": false,
        "properties": {
          "Html": {
            "type": "string",
            "description": "Contains the description rendered as HTML. Images are included with standard image tags.\nWhen sending HTML to server, all images must be uploaded to the server first by posting\nto /api/Image. The returned URLs can then be included into the HTML.",
            "nullable": true
          },
          "IncompatibleRichTextFeatures": {
            "type": "boolean",
            "description": "Indicates that rich text features are used which are not supported by the REST API,\ne.g. comments. Information from the rich text might be missing in the HTML and\nplain text provided by the REST API. The rich text cannot be modified via the REST API."
          },
          "PlainText": {
            "type": "string",
            "description": "Contains the description as plain text. The plain text does not contain any formatting or images.",
            "nullable": true
          }
        }
      },
      "ApiEnclosurePermissions": {
        "type": "object",
        "description": "Represents permissions of a Enclosure.",
        "additionalProperties": false,
        "properties": {
          "CanDelete": {
            "description": "Indicates whether user is able to delete enclosure.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEdit": {
            "description": "Indicates whether user is able to edit enclosure.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiItemUpdateWithEnclosures": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemUpdate"
          },
          {
            "type": "object",
            "description": "Specifies the changes to perform on a specific item including its\nenclosures.",
            "additionalProperties": false,
            "properties": {
              "Enclosures": {
                "description": "Contains all the modifications which should be applied to\nthe enclosures.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEnclosuresUpdate"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiEnclosuresUpdate": {
        "type": "object",
        "description": "Contains a list of different changes which should be applied to the\nenclosure collection.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "A list with the new enclosures which should be added.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiEnclosureUpdate"
            }
          },
          "Modified": {
            "type": "array",
            "description": "A list with enclosures which should be updated.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiEnclosureUpdateWithId"
            }
          },
          "Removed": {
            "type": "array",
            "description": "A list with the ids of the enclosures which should be removed.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiEnclosureUpdate": {
        "type": "object",
        "description": "Specifies the changes to perform on a specific enclosure.",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "The new type of the enclosure.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEnclosureType"
              }
            ]
          },
          "Content": {
            "description": "The new description of the enclosure. You must specify exactly one type\nof description.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          }
        }
      },
      "ApiEnclosureUpdateWithId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiEnclosureUpdate"
          },
          {
            "type": "object",
            "description": "Specifies the changes to perform on a specific enclosure and also\nthe id of the enclosure to modify which is useful when sending a\nlist of updates.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The id of the enclosure to update.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiItemUpdate": {
        "type": "object",
        "description": "Specifies the changes to perform on a specific item.",
        "additionalProperties": false,
        "properties": {
          "Details": {
            "type": "array",
            "description": "The list of updates to perform on the different fields of the item.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          },
          "Attachments": {
            "description": "Contains the changes which should be applied to the attachments of the item.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAttachments"
              }
            ]
          }
        }
      },
      "ApiFieldUpdate": {
        "type": "object",
        "description": "Specifies the update to perform on a specific field.",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field to update.",
            "nullable": true
          },
          "Value": {
            "description": "The value to which the field will be changed. The exact type of the\nvalue depends on the field of the type:\n\n    String: the value as string\n    Decimal: the value as number\n    Datetime: a string defining the date and time in the following format: yyyy-MM-ddTHH:mm:ssK or \n    yyyy-MM-ddTHH:mm:ss.fffK. The K represents optional time zone information (Z for UTC or a time zone offset).\n    E.g.: 2018-03-15T21:42:42, 2018-03-15T21:42:42.123, 2018-03-15T21:42:42.123Z, 2018-03-15T21:42:42.123+02:00.\n    Dictionary: the id of the field value as number (or null for empty)\n    MultiChoiceDictionary: a list of numbers where each number is a field value id. E.g.: [1,2] (or [] for empty)\n    User: the user id as number (or null for empty)\n    MultiChoiceUser: a list of numbers where each number is a user id. E.g.: [1,2] (or [] for empty)\n    TimeSpan: the value of the time span as number e.g.: {\"FieldId\": {\"Value\": 4,\"Unit\": \"Hour\"}}.\n    Sprint: the id of the sprint as number (or null for empty)\n    Text: ApiRichText object, e.g.: {{  \"html\": \"sometext\",  \"incompatibleRichTextFeatures\": false}}",
            "nullable": true
          }
        }
      },
      "ApiAttachments": {
        "type": "object",
        "description": "Contains all changes to the attachments of an item.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "The list of attachments to add to the item.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAttachmentNew"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of ids of the attachments which should be removed from\nthe item.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiAttachmentNew": {
        "type": "object",
        "description": "An attachment which should be created as part of a list of attachment\nchanges for a certain item. The file attach must have been uploaded to\n/File beforehand.",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The GUID which uniquely identifies the uploaded file.\nThe file should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nor\n[UploadFileWithGuid](#operation/File_UploadFileWithGuid)\nfirst.",
            "format": "guid"
          }
        }
      },
      "ApiItemNewWithEnclosures": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemNew"
          },
          {
            "type": "object",
            "description": "Contains the necessary data to create a new item including its enclosures.",
            "additionalProperties": false,
            "properties": {
              "Enclosures": {
                "type": "array",
                "description": "Contains all the enclosures that should be created together with the item.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiEnclosureUpdate"
                }
              }
            }
          }
        ]
      },
      "ApiItemNew": {
        "type": "object",
        "description": "Contains the necessary data to create a new item.",
        "additionalProperties": false,
        "properties": {
          "Location": {
            "description": "The location where the new item should be created. You must\nprovide either project id and folder id or the path. When all three\nare provided, they must match.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLocationUpdate"
              }
            ]
          },
          "Details": {
            "type": "array",
            "description": "The list values which should be set when creating the item.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          },
          "Attachments": {
            "type": "array",
            "description": "The list of attachments which should be added to the new item.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAttachmentNew"
            }
          },
          "SkipFieldChecks": {
            "type": "boolean",
            "description": "Whether or not to skip the field checks when creating an item"
          }
        }
      },
      "ApiItemLocationUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project",
            "format": "int32",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiItemEditStatus": {
        "type": "object",
        "description": "Edit status information for an item.",
        "additionalProperties": false,
        "properties": {
          "ItemVersion": {
            "description": "This field provides information about the item version.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemVersion"
              }
            ]
          },
          "EditableInfo": {
            "description": "This field provides information about the item editibale status and if item is locked, about a lock user.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditableInfo"
              }
            ]
          }
        }
      },
      "ApiItemCreateMeta": {
        "type": "object",
        "description": "Contains the metadata which is necessary for creating a new item.",
        "additionalProperties": false,
        "properties": {
          "Location": {
            "description": "Location for which the create metadata is valid.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLocation"
              }
            ]
          },
          "Fields": {
            "type": "array",
            "description": "Contains all available fields together with their metadata.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiField"
            }
          },
          "EditLayout": {
            "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditLayout"
              }
            ]
          },
          "Permissions": {
            "description": "Specifies permissions of current user in regard to operations available\nfor this new item.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemPermissions"
              }
            ]
          }
        }
      },
      "ApiItemEditMeta": {
        "type": "object",
        "description": "Contains the metadata of fields of an item being edited.",
        "additionalProperties": false,
        "properties": {
          "Fields": {
            "type": "array",
            "description": "Contains all available fields together with their metadata.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiField"
            }
          },
          "EditLayout": {
            "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditLayout"
              }
            ]
          }
        }
      },
      "ApiAttachmentInfo": {
        "type": "object",
        "description": "Meta information for an attachments. E.g. file name and size. This structure\ndoes not contain the content of the attachment which must be requested\nseparately.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the attachment.",
            "format": "int32"
          },
          "Filename": {
            "type": "string",
            "description": "The full file name of the attachment including the file extension.",
            "nullable": true
          },
          "FileExtension": {
            "type": "string",
            "description": "The file extension of the attachment.",
            "nullable": true
          },
          "FileDate": {
            "type": "string",
            "description": "The date when attachment was created. This can be either the server time when\nthe attachment was saved or the time when file was last modified in the file system\nbefore being uploaded to the server.",
            "format": "date-time"
          },
          "Size": {
            "type": "integer",
            "description": "The size of the attachment in bytes.",
            "format": "int64"
          },
          "ViewUrl": {
            "type": "string",
            "description": "The url where the content of the attachment is located. For this url,\nthe API will force browsers to display the content by setting the\ncontent-disposition header to inline.",
            "nullable": true
          },
          "DownloadUrl": {
            "type": "string",
            "description": "The url where the content of the attachment is located. For this url,\nthe API will force browsers to download the file by setting the\ncontent-disposition header to attachment.",
            "nullable": true
          }
        }
      },
      "ApiRedirectResult": {
        "type": "object",
        "description": "This result is returned as part of a redirection response.\nMost clients should automatically follow the redirect and\nwill never see this response.",
        "additionalProperties": false,
        "required": [
          "Message",
          "Url"
        ],
        "properties": {
          "Message": {
            "type": "string",
            "description": "A human-readable info message",
            "minLength": 1
          },
          "Url": {
            "type": "string",
            "description": "The URL to which the request is redirected.",
            "minLength": 1
          }
        }
      },
      "ApiUploadedFile": {
        "type": "object",
        "description": "Represents a file upload to the REST API. You do not need to provide a JSON\nstructure. Instead just send the content of the file you would like to upload.\nThe content can be sent directly as the request body or inside a multipart form\ndata.",
        "additionalProperties": false,
        "properties": {
          "Content": {
            "type": "string",
            "description": "The content of the uploaded file. The content can be sent either directly\nas the request body or in a multipart form .",
            "format": "byte",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "When the file is uploaded using a multipart form, the file name is taken from\nthe ContentDisposition header. Otherwise, the name is null. The name must include the file extension otherwise the request will be rejected.",
            "nullable": true
          }
        }
      },
      "ApiLockNew": {
        "type": "object",
        "description": "Contains the information necessary to lock an item for\nexclusive editing.",
        "additionalProperties": false,
        "properties": {
          "Version": {
            "type": "integer",
            "description": "The version of the item to lock which the client currently knows.",
            "format": "int32"
          }
        }
      },
      "ApiHistoryEntryDefect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiHistoryEntry"
          },
          {
            "type": "object",
            "description": "Contains all changes which were done to a defect in one operation\ntogether with information on when and by whom the defect has been changed.\nWhen no changes of a given type occurred, the corresponding field in\nthis response will be missing.",
            "additionalProperties": false,
            "properties": {
              "Enclosures": {
                "type": "array",
                "description": "A list with all changes to the enclosures of this defect.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiHistoryEnclosureChanged"
                }
              }
            }
          }
        ]
      },
      "ApiHistoryEnclosureChanged": {
        "type": "object",
        "description": "Contains the changes to a single enclosure.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the changed enclosure. Might be null, if\nthe id has not been tracked.",
            "format": "int32",
            "nullable": true
          },
          "EnclosureType": {
            "description": "The type of the changed enclosure. Might be null, if the\nenclosure type has not been tracked.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEnclosureType"
              }
            ]
          },
          "ChangeType": {
            "description": "The type of change to the enclosure.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryEnclosureChangeType"
              }
            ]
          },
          "OldContent": {
            "description": "The content of the enclosure before the change.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "NewContent": {
            "description": "The content of the enclosure after the change.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          }
        }
      },
      "ApiHistoryEnclosureChangeType": {
        "type": "string",
        "description": "Identifies the type of change to a certain enclosure.\r\nThis enum has the following values:\r\n  - `Added` The enclosure has been added.\r\n  - `Deleted` The enclosure has been deleted.\r\n  - `Modified` The enclosure has been modified.\r\n",
        "x-enumNames": [
          "Added",
          "Modified",
          "Deleted"
        ],
        "enum": [
          "Added",
          "Modified",
          "Deleted"
        ]
      },
      "ApiHistoryEntry": {
        "type": "object",
        "description": "Contains all changes which were done to an item in one operation\ntogether with information on when and by whon the item has been changed.\nWhen no changes of a given type occurred, the corresponding field in\nthis response will be missing.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the history entry",
            "format": "int32"
          },
          "TimeStamp": {
            "type": "string",
            "description": "The date and time when the changes were performed",
            "format": "date-time"
          },
          "Editor": {
            "description": "Information on the person who performed the changes.\nThe user info might only contain the full name\nand user image.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Fields": {
            "type": "array",
            "description": "The list of changes to the fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryFieldChanged"
            }
          },
          "Created": {
            "description": "Information on the creation of the item",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryItemCreated"
              }
            ]
          },
          "Moved": {
            "description": "Contains the information that the item has been moved",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryItemMoved"
              }
            ]
          },
          "Attachments": {
            "description": "Contains the changes to the attachments",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryAttachments"
              }
            ]
          },
          "UserCCs": {
            "description": "Contains the changes to the list of subscribed users",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryUserCCs"
              }
            ]
          },
          "DependencyChanged": {
            "description": "Contains the changes to a dependency",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryDependencyChanged"
              }
            ]
          },
          "PostChanged": {
            "description": "Contains the changes to a specific post",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryPostChanged"
              }
            ]
          },
          "SyncEvent": {
            "description": "Contains information on the sync event that has been logged\nfor this item. Connectors to third-party systems log sync errors\nand the resolving of sync errors here.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistorySyncEvent"
              }
            ]
          },
          "Migrated": {
            "description": "Contains the information information that the item has been\nmigrated from a third-party system to aqua.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryItemMigrated"
              }
            ]
          }
        }
      },
      "ApiHistoryFieldChanged": {
        "type": "object",
        "description": "A certain field of an item has changed",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the changed field",
            "nullable": true
          },
          "FieldTitle": {
            "type": "string",
            "description": "The title of the changed field",
            "nullable": true
          },
          "ChangeType": {
            "description": "The kind of change which occurred to the field",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryFieldChangeType"
              }
            ]
          },
          "OldValue": {
            "description": "The old value before the change as human readable object.\nIf the flag IsRichText is true the value is of type ApiRichText otherwise of type string.\nApiRichText contains following information:\n- string Html: information rendered as HTML.\n- bool IncompatibleRichTextFeatures: Indicates that rich text features are used which are not supported by the REST API.\n- string PlainText: information as plaintext.",
            "nullable": true
          },
          "NewValue": {
            "description": "The new value after the change as human readable object. \nIf the flag IsRichText is true the value is of type ApiRichText otherwise of type string.\nApiRichText contains following information:\n- string Html: information rendered as HTML.\n- bool IncompatibleRichTextFeatures: Indicates that rich text features are used which are not supported by the REST API.\n- string PlainText: information as plaintext.",
            "nullable": true
          },
          "IsRichText": {
            "type": "boolean",
            "description": "If true indicates that the values are of type ApiRichText, otherwise of type string."
          }
        }
      },
      "ApiHistoryFieldChangeType": {
        "type": "string",
        "description": "Identifies the type of change to a certain field\r\nThis enum has the following values:\r\n  - `Added` The field was changed from empty to a certain value\r\n  - `Changed` The field was changed from one value to another\r\n  - `ChangedNoDiff` The field was changed but the value before and\nafter the change have not been recorded\r\n  - `Removed` The field was changed from a value to empty\r\n",
        "x-enumNames": [
          "Added",
          "Changed",
          "Removed",
          "ChangedNoDiff"
        ],
        "enum": [
          "Added",
          "Changed",
          "Removed",
          "ChangedNoDiff"
        ]
      },
      "ApiHistoryItemCreated": {
        "type": "object",
        "description": "Information on the creation of the item.",
        "additionalProperties": false,
        "properties": {
          "CreationMode": {
            "description": "How the item was created",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryCreationMode"
              }
            ]
          },
          "Source": {
            "description": "The source item based on which the current item has been\ncreated. When the item has been created as an empty item,\nthe source contains the item itself. The name specified here\nis the name the item was given at its creation.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemInfo"
              }
            ]
          }
        }
      },
      "ApiHistoryCreationMode": {
        "type": "string",
        "description": "Identifies how the item was created\r\nThis enum has the following values:\r\n  - `CopyOfItem` The item was created as a copy of an existing item\r\n  - `EmptyItem` The item was created as an empty item\r\n  - `NewVersionOfItem` The item was created as a new version of an existing item\r\n",
        "x-enumNames": [
          "EmptyItem",
          "CopyOfItem",
          "NewVersionOfItem"
        ],
        "enum": [
          "EmptyItem",
          "CopyOfItem",
          "NewVersionOfItem"
        ]
      },
      "ApiHistoryItemMoved": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "OldPath": {
            "type": "string",
            "description": "The old path of the item before it was moved",
            "nullable": true
          },
          "NewPath": {
            "type": "string",
            "description": "The new path of the item after it was moved",
            "nullable": true
          }
        }
      },
      "ApiHistoryAttachments": {
        "type": "object",
        "description": "The list of changes to the attachments of an item.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "The list of names of the attachments which were added\nto the item",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of names of the attachments which were removed\nfrom the item",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiHistoryUserCCs": {
        "type": "object",
        "description": "Contains the changes to the list of users which have subscribed\nto the item and are notified about any changes.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "The list of full names of users which were added to the list\nof subscribers.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of full names of users which were removed from the\nlist of subscribers.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiHistoryDependencyChanged": {
        "type": "object",
        "description": "Contains information on the dependency which changed.",
        "additionalProperties": false,
        "properties": {
          "ChangeType": {
            "description": "The type of change which occurred to the dependency",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryDependencyChangeType"
              }
            ]
          },
          "ItemName": {
            "type": "string",
            "description": "The name of the current item at the time when the dependency\nhas been modified",
            "nullable": true
          },
          "OtherItemName": {
            "type": "string",
            "description": "The name of the other item which is part of this dependency",
            "nullable": true
          },
          "DependencyType": {
            "description": "The type of the dependency after the change",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiDependencyType"
              }
            ]
          },
          "OldDependencyType": {
            "description": "The type of the dependency before the change",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiDependencyType"
              }
            ]
          }
        }
      },
      "ApiHistoryDependencyChangeType": {
        "type": "string",
        "description": "Indicates the type of change which occurred to a\ncertain dependency\r\nThis enum has the following values:\r\n  - `Added` The dependency has been added\r\n  - `Removed` The depencency has been removed\r\n  - `TypeChanged` The type of the dependency has been changed\r\n",
        "x-enumNames": [
          "Added",
          "TypeChanged",
          "Removed"
        ],
        "enum": [
          "Added",
          "TypeChanged",
          "Removed"
        ]
      },
      "ApiDependencyType": {
        "type": "string",
        "description": "Identifies the type of dependency.\r\nThis enum has the following values:\r\n  - `AlternativeTo` This item is an alternative to the other item\r\n  - `ConflictsWith` This item conflicts with the other item.\r\n  - `DependsOn` This item depends on the other item.\nThis is the reverse of HasDependentItem.\r\n  - `Details` This item details the other item.\nThis is the reverse of IsDetailedBy.\r\n  - `Duplicates` This item duplicates the other item.\r\n  - `HasDependentItem` The other item depends on this item.\nThis is the reverse of DependsOn.\r\n  - `HasNewerVersion` This item has a new version which is the other item.\nThis is the reverse of IsNewerVersionOf.\r\n  - `HasPrecondition` This item has the other item as a precondition.\nThis is the reverse of IsPreconditionOf.\r\n  - `IsCopyOf` This item is a copy of the other item.\nThis is the reverse of WasCopiedBy.\r\n  - `IsDetailedBy` This item is detailed by the other item meaning\nthat the other item contains additional details for this item.\nThis is the reverse of Details.\r\n  - `IsNestedIn` This item (test case) is nested in another item (another test case).\nThis is the reverse of Nests.\r\n  - `IsNewerVersionOf` This item is a newer version of the other item.\nThis is the reverse of HasNewerVersion.\r\n  - `IsPreconditionOf` This item is a precondition of the other item.\nThis is the reverse of HasPrecondition.\r\n  - `IsUtilityScriptOf` This item is a utility script of the other item.\nThis is the reverse of UsesUtilityScript.\r\n  - `IsVerifiedBy` This item is verified by the other item.\nThis is the reverse of Verifies.\r\n  - `Nests` This item (test case) nestst the other item (test case).\nThis is the reverse of IsNestedIn.\r\n  - `ReferencesTestCaseTestData` This item (test case) references test data from the other item (test case).\nThis is the reverse of SharesTestDataWith.\r\n  - `RelatedTo` This item is related to the other item.\r\n  - `SharesTestDataWith` This item (test case) shares its test data with another item (another test case).\nThis is the reverse of ReferencesTestCaseTestData.\r\n  - `UsesUtilityScript` This item uses the other item as a utility script.\nThis is the reverse of IsUtilityScriptOf.\r\n  - `Verifies` This item verifies the other item.\nThis is the reverse of IsVerifiedBy.\r\n  - `WasCopiedTo` This item was copied to the other item.\nThis is the reverse of IsCopyOf.\r\n",
        "x-enumNames": [
          "RelatedTo",
          "Duplicates",
          "Details",
          "IsDetailedBy",
          "IsNewerVersionOf",
          "HasNewerVersion",
          "DependsOn",
          "HasDependentItem",
          "ConflictsWith",
          "AlternativeTo",
          "Verifies",
          "IsVerifiedBy",
          "IsPreconditionOf",
          "HasPrecondition",
          "IsCopyOf",
          "WasCopiedTo",
          "IsUtilityScriptOf",
          "UsesUtilityScript",
          "Nests",
          "IsNestedIn",
          "ReferencesTestCaseTestData",
          "SharesTestDataWith"
        ],
        "enum": [
          "RelatedTo",
          "Duplicates",
          "Details",
          "IsDetailedBy",
          "IsNewerVersionOf",
          "HasNewerVersion",
          "DependsOn",
          "HasDependentItem",
          "ConflictsWith",
          "AlternativeTo",
          "Verifies",
          "IsVerifiedBy",
          "IsPreconditionOf",
          "HasPrecondition",
          "IsCopyOf",
          "WasCopiedTo",
          "IsUtilityScriptOf",
          "UsesUtilityScript",
          "Nests",
          "IsNestedIn",
          "ReferencesTestCaseTestData",
          "SharesTestDataWith"
        ]
      },
      "ApiHistoryPostChanged": {
        "type": "object",
        "description": "Contains the changes to a certain post.",
        "additionalProperties": false,
        "properties": {
          "ChangeType": {
            "description": "The kind of change which occurred to the post.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryPostChangeType"
              }
            ]
          },
          "Number": {
            "type": "integer",
            "description": "The index of this post in the list posts of the current item.",
            "format": "int32"
          },
          "MentionedUsers": {
            "type": "array",
            "description": "The list of full names of the users which are mentioned in the post\nafter the change.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "ContentTruncated": {
            "type": "string",
            "description": "Truncated version of the content as plain text. ",
            "nullable": true
          }
        }
      },
      "ApiHistoryPostChangeType": {
        "type": "string",
        "description": "Identifies the type of change to a certain post\r\nThis enum has the following values:\r\n  - `Added` The post has been added.\r\n  - `Modified` The post has been modified.\r\n  - `Removed` The post has been deleted.\r\n",
        "x-enumNames": [
          "Added",
          "Modified",
          "Removed"
        ],
        "enum": [
          "Added",
          "Modified",
          "Removed"
        ]
      },
      "ApiHistorySyncEvent": {
        "type": "object",
        "description": "Contains information about the sync event which has been logged\nin the item's history. Connectors which synchronize items in aqua with\nthird-party systems log their errors and the resolving of the errors\nin the history to make them visible to the user.",
        "additionalProperties": false,
        "properties": {
          "EventType": {
            "description": "Indicates the type of sync event which occurred.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistorySyncEventType"
              }
            ]
          },
          "SyncModuleId": {
            "type": "integer",
            "description": "The id of the sync in which the error occurred. This can be null\nfor some legacy syncs.",
            "format": "int32",
            "nullable": true
          },
          "SyncModuleType": {
            "type": "string",
            "description": "The type of the sync in which the error occurred.",
            "nullable": true
          },
          "SyncName": {
            "type": "string",
            "description": "The name of the sync in which the sync error occurred.",
            "nullable": true
          },
          "IsPushError": {
            "type": "boolean",
            "description": "Indicates whether the sync error occurred during a push or pull.\nWhen true, the error occurred during a push. Otherwise, it occurred\nduring a pull."
          },
          "IsAutoMergeError": {
            "type": "boolean",
            "description": "Indicates whether the sync error occurred during an automatic\nmerge operation. When true, the error occurred during an automatic\nmerge. Otherwise, it occurred during a normal sync operation."
          },
          "ErrorMessage": {
            "type": "string",
            "description": "The actual error message provided by the sync for the sync error.",
            "nullable": true
          }
        }
      },
      "ApiHistorySyncEventType": {
        "type": "string",
        "description": "Indicates the type of sync event.\r\nThis enum has the following values:\r\n  - `Error` The sync failed with an error.\r\n  - `ErrorResolved` The sync error has been resolved.\r\n",
        "x-enumNames": [
          "Error",
          "ErrorResolved"
        ],
        "enum": [
          "Error",
          "ErrorResolved"
        ]
      },
      "ApiHistoryItemMigrated": {
        "type": "object",
        "description": "Information on the migration of the item from a third-party system.",
        "additionalProperties": false,
        "properties": {
          "Info": {
            "type": "string",
            "description": "Some information provided by the migration tool. Most likely\nthe name of the third-party system from which the item was migrated\nand or its original id.",
            "nullable": true
          },
          "HistoryDownloadUrl": {
            "type": "string",
            "description": "A URL where a file with the history of the item in the third-party\nsystem can be downloaded.",
            "nullable": true
          }
        }
      },
      "ApiRelations": {
        "type": "object",
        "description": "Contains the requested relations together with some information\non the item for which the relations were requested.",
        "additionalProperties": false,
        "properties": {
          "Item": {
            "description": "The item for which the relation were requested.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemIdentifier"
              }
            ]
          },
          "Depth": {
            "type": "integer",
            "description": "The depth (number of levels) for which the relations\nwere requested.",
            "format": "int32"
          },
          "Relations": {
            "type": "array",
            "description": "The relations of the items. Might contain several\nlevels of relations depending on the requested depth.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRelation"
            }
          }
        }
      },
      "ApiRelation": {
        "type": "object",
        "description": "Represents a relation between to items. These items might belong\n either to aqua or to an external system.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "string",
            "description": "The id of the relation itself.",
            "nullable": true
          },
          "Type": {
            "description": "The type of the dependency.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRelationType"
              }
            ]
          },
          "Item": {
            "description": "Information on the source item of the relation. The amount of\ninformation included depends on the request and the item type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemIdentifier"
              }
            ]
          },
          "ItemExtra": {
            "description": "Contains relation-specific data for the source item of\nthe relation.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IApiRelationItemExtra"
              }
            ]
          },
          "OtherItem": {
            "description": "The target item of the relation. The amount of information\nincluded depends on the request and the item type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemIdentifier"
              }
            ]
          },
          "OtherItemExtra": {
            "description": "Contains relation-specific data for the target item of\nthe relation.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IApiRelationItemExtra"
              }
            ]
          },
          "OtherItemCanView": {
            "description": "Indicates whether the user is allowed view to the other item.\nFurther permission information might be found in the item itself.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiRelationType": {
        "type": "string",
        "description": "Identifies the type of relation.\r\nThis enum has the following values:\r\n  - `AffectsExecution` The item affects an execution.\nThis is the reverse of ExecutionAffectedBy.\r\n  - `AlternativeTo` This item is an alternative to the other item\r\n  - `ConflictsWith` This item conflicts with the other item.\r\n  - `DependsOn` This item depends on the other item.\nThis is the reverse of HasDependentItem.\r\n  - `Details` This item details the other item.\nThis is the reverse of IsDetailedBy.\r\n  - `Duplicates` This item duplicates the other item.\r\n  - `ExecutionAffectedBy` The item (which is an execution) is affected by the other item.\nThis is the reverse of AffectsExecution.\r\n  - `HasDependentItem` The other item depends on this item.\nThis is the reverse of DependsOn.\r\n  - `HasNewerVersion` This item has a new version which is the other item.\nThis is the reverse of IsNewerVersionOf.\r\n  - `HasPrecondition` This item has the other item as a precondition.\nThis is the reverse of IsPreconditionOf.\r\n  - `IsCopyOf` This item is a copy of the other item.\nThis is the reverse of WasCopiedBy.\r\n  - `IsDetailedBy` This item is detailed by the other item meaning\nthat the other item contains additional details for this item.\nThis is the reverse of Details.\r\n  - `IsNestedIn` This item (test case) is nested in another item (another test case).\nThis is the reverse of Nests.\r\n  - `IsNewerVersionOf` This item is a newer version of the other item.\nThis is the reverse of HasNewerVersion.\r\n  - `IsPreconditionOf` This item is a precondition of the other item.\nThis is the reverse of HasPrecondition.\r\n  - `IsUtilityScriptOf` This item is a utility script of the other item.\nThis is the reverse of UsesUtilityScript.\r\n  - `IsVerifiedBy` This item is verified by the other item.\nThis is the reverse of Verifies.\r\n  - `Nests` This item (test case) nestst the other item (test case).\nThis is the reverse of IsNestedIn.\r\n  - `ReferencesTestCaseTestData` This item (test case) references test data from the other item (test case).\nThis is the reverse of SharesTestDataWith.\r\n  - `RelatedTo` This item is related to the other item.\r\n  - `SharesTestDataWith` This item (test case) shares its test data with another item (another test case).\nThis is the reverse of ReferencesTestCaseTestData.\r\n  - `UsesUtilityScript` This item uses the other item as a utility script.\nThis is the reverse of IsUtilityScriptOf.\r\n  - `Verifies` This item verifies the other item.\nThis is the reverse of IsVerifiedBy.\r\n  - `WasCopiedTo` This item was copied to the other item.\nThis is the reverse of IsCopyOf.\r\n",
        "x-enumNames": [
          "RelatedTo",
          "Duplicates",
          "Details",
          "IsDetailedBy",
          "IsNewerVersionOf",
          "HasNewerVersion",
          "DependsOn",
          "HasDependentItem",
          "ConflictsWith",
          "AlternativeTo",
          "Verifies",
          "IsVerifiedBy",
          "IsPreconditionOf",
          "HasPrecondition",
          "IsCopyOf",
          "WasCopiedTo",
          "IsUtilityScriptOf",
          "UsesUtilityScript",
          "Nests",
          "IsNestedIn",
          "AffectsExecution",
          "ExecutionAffectedBy",
          "ReferencesTestCaseTestData",
          "SharesTestDataWith"
        ],
        "enum": [
          "RelatedTo",
          "Duplicates",
          "Details",
          "IsDetailedBy",
          "IsNewerVersionOf",
          "HasNewerVersion",
          "DependsOn",
          "HasDependentItem",
          "ConflictsWith",
          "AlternativeTo",
          "Verifies",
          "IsVerifiedBy",
          "IsPreconditionOf",
          "HasPrecondition",
          "IsCopyOf",
          "WasCopiedTo",
          "IsUtilityScriptOf",
          "UsesUtilityScript",
          "Nests",
          "IsNestedIn",
          "AffectsExecution",
          "ExecutionAffectedBy",
          "ReferencesTestCaseTestData",
          "SharesTestDataWith"
        ]
      },
      "IApiRelationItemExtra": {
        "type": "object",
        "description": "Holds additional, relation-specific data for one side of a relation.",
        "x-abstract": true,
        "additionalProperties": false
      },
      "ApiRelationCreateMeta": {
        "type": "object",
        "description": "The necessary metadata to create new relations for a\ncertain item.",
        "additionalProperties": false,
        "properties": {
          "AllowedTypes": {
            "type": "object",
            "description": "Contains for each item type the list of relations types which are allowed between\nthe source item and items of the given item type.",
            "nullable": true,
            "x-dictionaryKey": {
              "$ref": "#/components/schemas/ApiItemType"
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApiRelationType"
              }
            }
          }
        }
      },
      "ApiRelationNew": {
        "type": "object",
        "description": "Contains the data necessary to create a new relation.",
        "additionalProperties": false,
        "properties": {
          "ItemExtra": {
            "description": "Contains relation-specific data for the source item of\nthe new relation.",
            "nullable": true
          },
          "OtherItemId": {
            "type": "string",
            "description": "The id of the target of the new relation.",
            "nullable": true
          },
          "OtherItemType": {
            "description": "The item type of the target of the new relation.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "OtherItemExtra": {
            "description": "Contains relation-specific data for the target item of\nthe new relation.",
            "nullable": true
          },
          "Type": {
            "description": "The type of the new relation.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRelationType"
              }
            ]
          }
        }
      },
      "ApiWatcherNew": {
        "type": "object",
        "description": "Represents a new watcher to be added.",
        "additionalProperties": false,
        "properties": {
          "UserId": {
            "type": "integer",
            "description": "The id of the involved user.",
            "format": "int32"
          }
        }
      },
      "ApiWatchersUpdate": {
        "type": "object",
        "description": "Represents an update to the watchers list.",
        "additionalProperties": false,
        "properties": {
          "UserIdsAdded": {
            "type": "array",
            "description": "Ids of the users to be added to the watchers list",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "UserIdsRemoved": {
            "type": "array",
            "description": "Ids of the users to be removed from the watchers list",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiPost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiPostInfo"
          },
          {
            "type": "object",
            "description": "A post with its full contents and the list of mentioned users.",
            "additionalProperties": false,
            "properties": {
              "Content": {
                "description": "The text content of the post. The content is provided in multiple formats.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiRichText"
                  }
                ]
              },
              "MentionedUsers": {
                "type": "array",
                "description": "The list of users which are mentioned in the post. Users can be mentioned in\na post by using the @username syntax.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserInfo"
                }
              }
            }
          }
        ]
      },
      "ApiPostInfo": {
        "type": "object",
        "description": "This class contains just the basic information on a post but not\nits contents or the list of users mentioned in it.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the post.",
            "format": "int32"
          },
          "Number": {
            "type": "integer",
            "description": "The index of this post in the list posts for the associated item.",
            "format": "int32"
          },
          "Creator": {
            "description": "The user who created the post.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "LastEditor": {
            "description": "The user who edited the post most recently.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "DateCreated": {
            "type": "string",
            "description": "The date when the post was created.",
            "format": "date-time"
          },
          "DateModified": {
            "type": "string",
            "description": "The date when the post was last modified.",
            "format": "date-time"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Indicates whether the post has been deleted. Deleted posts do not contain any\ncontent but are still included in the list of post for a certain item."
          }
        }
      },
      "ApiPostPaginated": {
        "type": "object",
        "description": "Contains paginated posts with total count of posts.",
        "additionalProperties": false,
        "properties": {
          "Posts": {
            "type": "array",
            "description": "The list of paginated posts.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiPost"
            }
          },
          "PostsTotalCount": {
            "type": "integer",
            "description": "The total count of posts for this object.",
            "format": "int32"
          }
        }
      },
      "ApiEnvironmentInfo": {
        "type": "object",
        "description": "Provides information about a system environment",
        "additionalProperties": false,
        "properties": {
          "IsMultiTenant": {
            "type": "boolean",
            "description": "Multitenant environment is used"
          }
        }
      },
      "ApiItemExportRequest": {
        "type": "object",
        "description": "Request for exporting files",
        "additionalProperties": false,
        "properties": {
          "objectTypes": {
            "type": "array",
            "description": "The objectTypes to export\nIf an objecttype is specified, all items of that objecttype in the folder are exported, \nthe respective id list for that objecttype is then ignored in this case.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ObjectType"
            }
          },
          "RequirementIds": {
            "type": "array",
            "description": "Ids of requirements to be exported",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "DefectIds": {
            "type": "array",
            "description": "Ids of defect to be exported ",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "TestCaseIds": {
            "type": "array",
            "description": "Ids of testcases to be exported",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "TestScenarioIds": {
            "type": "array",
            "description": "Ids of testscenarios to be exported",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "recursive": {
            "type": "boolean",
            "description": "Export everything from subfolders"
          },
          "includeInvisibleFields": {
            "type": "boolean",
            "description": "Export fields not visible on layout"
          },
          "includeAttachments": {
            "type": "boolean",
            "description": "Export the Attachments"
          },
          "includeRtfFiles": {
            "type": "boolean",
            "description": "Export the rtf to external files"
          }
        }
      },
      "ObjectType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "None",
          "Requirement",
          "Defect",
          "TestCase",
          "BusinessWorkflow",
          "TestScenario",
          "Script",
          "TestJobExecution",
          "ExternalItem00",
          "ExternalItem01",
          "ExternalItem02",
          "ExternalItem03",
          "ExternalItem04",
          "ExternalItem05",
          "ExternalItem06",
          "ExternalItem07",
          "ExternalItem08",
          "ExternalItem09",
          "VirtualTypeProjectPlan",
          "SpecialCommon"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          200,
          300
        ]
      },
      "ApiFeatureInfo": {
        "type": "object",
        "description": "The detail about a given feature",
        "additionalProperties": false,
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "If the feature is enabled or not"
          }
        }
      },
      "ApiFileUploadInfo": {
        "type": "object",
        "description": "Contains metadata for an uploaded image.",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The GUID which identifies this file upload.",
            "format": "guid"
          },
          "Url": {
            "type": "string",
            "description": "The URL which allows you to download the temporarily uploaded file again.",
            "nullable": true
          }
        }
      },
      "ApiFileUploadUrlResponse": {
        "type": "object",
        "description": "Contains a file upload URL and some corresponding metadata.",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The Guid which uniquely identifies the file upload.",
            "format": "guid"
          },
          "UrlType": {
            "description": "The type of the upload URL. The upload request needs to be\nconstructed differently depending on the type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFileUploadUrlType"
              }
            ]
          },
          "UploadUrl": {
            "type": "string",
            "description": "The URL to which the content of the file should be uploaded.\nThis URL is only valid for a limited time.",
            "nullable": true
          },
          "DownloadUrl": {
            "type": "string",
            "description": "This URL can be used to download the content again after\nit was uploaded. This URL is only valid for a limited time.",
            "nullable": true
          }
        }
      },
      "ApiFileUploadUrlType": {
        "type": "string",
        "description": "The type of the upload URL.\r\nThis enum has the following values:\r\n  - `Aqua` The upload URL points to aqua itself. The upload should be\nperformed with a PUT request.\r\n  - `AzureBlobStorage` The upload URL points to Azure Blob Storage. The upload should be\nperformed with a PUT request.The upload must contain the following\ncustom header `x-ms-blob-type: BlockBlob`.\r\n",
        "x-enumNames": [
          "Aqua",
          "AzureBlobStorage"
        ],
        "enum": [
          "Aqua",
          "AzureBlobStorage"
        ]
      },
      "ApiFileUploadUrlRequest": {
        "type": "object",
        "description": "Contains the necessary information for creating an upload URL.",
        "additionalProperties": false,
        "required": [
          "FileName",
          "FileSize"
        ],
        "properties": {
          "FileName": {
            "type": "string",
            "description": "The name of the file for which the upload URL is requested.",
            "minLength": 1
          },
          "FileSize": {
            "type": "integer",
            "description": "The size (in bytes) of the file for which the upload URL is requested.",
            "format": "int64"
          }
        }
      },
      "ApiGlobalSearchResult": {
        "type": "object",
        "description": "Represents the result of a global items search ",
        "additionalProperties": false,
        "properties": {
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The list of items.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiGlobalSearchItem"
            }
          }
        }
      },
      "ApiGlobalSearchItem": {
        "type": "object",
        "description": "Represents an item for a global search",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of item",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of item",
            "nullable": true
          },
          "ItemType": {
            "description": "Type of Item",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "ProjectName": {
            "type": "string",
            "description": "Name of the project which contains this item",
            "nullable": true
          }
        }
      },
      "ApiGlobalSearchRequest": {
        "type": "object",
        "description": "Represents a request for a global items search",
        "additionalProperties": false,
        "properties": {
          "SearchArea": {
            "description": "Item types among which the search will be executed",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiGlobalSearchArea"
              }
            ]
          },
          "SearchText": {
            "type": "string",
            "description": "Searching text",
            "nullable": true
          },
          "IncludeArchived": {
            "type": "boolean",
            "description": "Shows if archived projects will be included or not"
          },
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "description": "Id of project where items will be searched. If value equals 0 it means that\nitems will be searched among all projects",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder of which the items are loaded.",
            "format": "int32"
          },
          "IncludeSubfolders": {
            "type": "boolean",
            "description": "Indicates whether items from sub folders should be included."
          }
        }
      },
      "ApiGlobalSearchArea": {
        "type": "string",
        "description": "Represents available areas for search\r\nThis enum has the following values:\r\n  - `AllItems` \r\n  - `Defects` \r\n  - `Requirements` \r\n  - `Scripts` \r\n  - `TestCases` \r\n  - `TestScenarios` \r\n",
        "x-enumNames": [
          "AllItems",
          "Requirements",
          "Defects",
          "TestCases",
          "TestScenarios",
          "Scripts"
        ],
        "enum": [
          "AllItems",
          "Requirements",
          "Defects",
          "TestCases",
          "TestScenarios",
          "Scripts"
        ]
      },
      "ApiImageInfo": {
        "type": "object",
        "description": "The metadata of an image. The content of the image is not included.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the image",
            "format": "int32"
          },
          "Checksum": {
            "type": "string",
            "description": "The checksum of the image's content",
            "nullable": true
          },
          "FileExtension": {
            "type": "string",
            "description": "The file extension of the image. Can be used to identify the type\nof image. The extension .rtf is used for images included\nin rich text.",
            "nullable": true
          }
        }
      },
      "ApiImageUploadInfo": {
        "type": "object",
        "description": "Contains metadata for an uploaded image.",
        "additionalProperties": false,
        "properties": {
          "Checksum": {
            "type": "string",
            "description": "The checksum of the image",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "The absolute url which can be used to reference the image",
            "nullable": true
          }
        }
      },
      "ApiItemImportRequest": {
        "type": "object",
        "description": "Request for importing files from a previously uploaded excel file\nSuggested usage: first,import file with ignoreIncorrectRow set to false, to see if Import works and get any errors\nIf any errors occur, display errors and let user decide if an import while skipping errors is desired.\nIf he decides for an import with skipping erors, repeat the request with ignoreIncorrectRow set to true, the same fileMeta can be reused to avoid uploading the file again.",
        "additionalProperties": false,
        "properties": {
          "fileMeta": {
            "description": "Metadata of the uploaded excel import.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFileUploadInfo"
              }
            ]
          },
          "ignoreIncorrectRow": {
            "type": "boolean",
            "description": "Controls the behavior for errors on import.\nWhen set to false, the import will process all rows and log the errors into ApiImportLongRunningTaskInfo.FailedItems, which can be retrieved via /api/System/LongOperation. The successful items will NOT be saved.\nWhen set to true the import will process all rows and successful items will be saved. NOT ERRORS WILL BE LOGGED."
          }
        }
      },
      "ApiIntegrationConfigurations": {
        "type": "object",
        "description": "Contains the integration configurations together with necessary meta data.",
        "additionalProperties": false,
        "properties": {
          "Configurations": {
            "type": "array",
            "description": "Holds the configurations for the different integrations.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiIntegrationConfigBase"
            }
          },
          "CanEdit": {
            "description": "Indicates whether the current user is allowed to edit\nthe configurations.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiIntegrationConfigBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "IntegrationType",
          "mapping": {
            "JIRA": "#/components/schemas/ApiIntegrationConfigJira",
            "OTRS": "#/components/schemas/ApiIntegrationConfigOtrs"
          }
        },
        "description": "Base class for integration configuration classes",
        "additionalProperties": false,
        "required": [
          "IntegrationType"
        ],
        "properties": {
          "SupportsLookup": {
            "type": "boolean",
            "description": "Indicates whether this configuration supports remote lookup.\nRequires support from \"technology\" (currently JIRA only) but also needs the proper configuration.\nNote: the flag is properly set even if config has been \"obfuscated\" from sensitive data.\nThis flag is ignored during save (doesn't have to be provided at all)."
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "CustomerId": {
            "type": "integer",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "IntegrationType": {
            "type": "string"
          }
        }
      },
      "ApiIntegrationConfigJira": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false,
            "properties": {
              "ItemViewURLPattern": {
                "type": "string",
                "nullable": true
              },
              "ItemCreateURLPattern": {
                "type": "string",
                "nullable": true
              },
              "APIBaseURL": {
                "type": "string",
                "nullable": true
              },
              "APIUser": {
                "type": "string",
                "nullable": true
              },
              "APIPassword": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiIntegrationConfigOtrs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false,
            "properties": {
              "ItemViewURLPattern": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiIntegrationVerifyResponse": {
        "type": "object",
        "description": "The verification response",
        "additionalProperties": false,
        "properties": {
          "IsSuccess": {
            "type": "boolean",
            "description": "True if the connection succeeded"
          }
        }
      },
      "ApiIntegrationConfigVerifyBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "IntegrationType",
          "mapping": {
            "JIRA": "#/components/schemas/ApiIntegrationConfigVerifyJira",
            "OTRS": "#/components/schemas/ApiIntegrationConfigVerifyOtrs"
          }
        },
        "description": "Base class for integration configuration update classes",
        "additionalProperties": false,
        "required": [
          "IntegrationType"
        ],
        "properties": {
          "IntegrationType": {
            "type": "string"
          }
        }
      },
      "ApiIntegrationConfigVerifyJira": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigVerifyBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false,
            "properties": {
              "APIBaseURL": {
                "type": "string",
                "nullable": true
              },
              "APIUser": {
                "type": "string",
                "nullable": true
              },
              "APIPassword": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiIntegrationConfigVerifyOtrs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigVerifyBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiIntegrationEnable": {
        "type": "object",
        "description": "The body for the integration enable request",
        "additionalProperties": false,
        "properties": {
          "CustomerId": {
            "type": "integer",
            "description": "The customer id of the integration",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "description": "The project id of the integration",
            "format": "int32",
            "nullable": true
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "A flag to indicate if the integration should be enabled"
          }
        }
      },
      "ApiIntegrationConfigurationsUpdate": {
        "type": "object",
        "description": "Encapsulates the update of the integrations configuration.",
        "additionalProperties": false,
        "properties": {
          "Configurations": {
            "type": "array",
            "description": "Holds the configurations for the different integrations.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiIntegrationConfigUpdateBase"
            }
          }
        }
      },
      "ApiIntegrationConfigUpdateBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "IntegrationType",
          "mapping": {
            "JIRA": "#/components/schemas/ApiIntegrationConfigUpdateJira",
            "OTRS": "#/components/schemas/ApiIntegrationConfigUpdateOtrs"
          }
        },
        "description": "Base class for integration configuration update classes",
        "additionalProperties": false,
        "required": [
          "IntegrationType"
        ],
        "properties": {
          "SupportsLookup": {
            "type": "boolean",
            "description": "Indicates whether this configuration supports remote lookup.\nRequires support from \"technology\" (currently JIRA only) but also needs the proper configuration.\nNote: the flag is properly set even if config has been \"obfuscated\" from sensitive data.\nThis flag is ignored during save (doesn't have to be provided at all)."
          },
          "IsEnabled": {
            "type": "boolean"
          },
          "IntegrationType": {
            "type": "string"
          }
        }
      },
      "ApiIntegrationConfigUpdateJira": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigUpdateBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false,
            "properties": {
              "ItemViewURLPattern": {
                "type": "string",
                "nullable": true
              },
              "ItemCreateURLPattern": {
                "type": "string",
                "nullable": true
              },
              "APIBaseURL": {
                "type": "string",
                "nullable": true
              },
              "APIUser": {
                "type": "string",
                "nullable": true
              },
              "APIPassword": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiIntegrationConfigUpdateOtrs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiIntegrationConfigUpdateBase"
          },
          {
            "type": "object",
            "description": "Represents configuration of JIRA integration in aqua. ",
            "additionalProperties": false,
            "properties": {
              "ItemViewURLPattern": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiLabelNewResponse": {
        "type": "object",
        "description": "Represents a newly created label.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of this label.",
            "format": "int32"
          }
        }
      },
      "ApiLabelNew": {
        "type": "object",
        "description": "Represents a new label.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of this label. The name is unique in combination with the base object type.",
            "nullable": true
          },
          "ProjectId": {
            "type": "integer",
            "description": "Project this label should belong to.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of label.",
            "nullable": true
          },
          "SubLabels": {
            "type": "array",
            "description": "Contains a list of lables this label includes, making it a super label.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          }
        }
      },
      "ApiLabelInfo": {
        "type": "object",
        "description": "Minimal version of a label.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of this label.",
            "format": "int32"
          },
          "Version": {
            "type": "integer",
            "description": "Label version.",
            "format": "int32"
          }
        }
      },
      "ApiLabelUpdate": {
        "type": "object",
        "description": "Represents a new label.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of this label.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of this label. The name is unique in combination with the base object type.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of this label.",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "description": "Current Version of this label.",
            "format": "int32"
          },
          "SubLabels": {
            "type": "array",
            "description": "Contains a list of lables this label includes, making it a super label.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          }
        }
      },
      "ApiLabelListResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Items": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabel"
            }
          }
        }
      },
      "ApiLabel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLabelInfo"
          },
          {
            "type": "object",
            "description": "Represents a label.",
            "additionalProperties": false,
            "properties": {
              "Name": {
                "type": "string",
                "description": "Name of this label. The name is unique in combination with the base object type.",
                "nullable": true
              },
              "Description": {
                "type": "string",
                "description": "Description of this label.",
                "nullable": true
              },
              "SubLabels": {
                "type": "array",
                "description": "Contains a list of lables this label includes, making it a super label.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiLabelInfo"
                }
              }
            }
          }
        ]
      },
      "ApiLicenseInfo": {
        "type": "object",
        "description": "Represent a license info.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "License file name.",
            "nullable": true
          }
        }
      },
      "ApiItemArrangement": {
        "type": "object",
        "description": "Represents the filter, sorting and search information",
        "additionalProperties": false,
        "properties": {
          "Filter": {
            "type": "string",
            "description": "The filter syntax is as follows:\non the first place should be the FieldId followed by the operator and if the operator expects an value followed by the value.\n[[\"Priority\", \"=\", \"High\"], \"and\", [\"DateCreatedDateTime\", \">=\", \"2018-01-01\"]]\nThe values for different field types should be defined as follows:\n\n    String: the value as string\n    Decimal: the value as number\n    Datetime: a string defining the date and time in the following format: yyyy-MM-ddTHH:mm:ssK or\n    yyyy-MM-ddTHH:mm:ss.fffK. The K represents optional time zone information (Z for UTC or a time zone offset).\n    E.g.: 2018-03-15T21:42:42, 2018-03-15T21:42:42.123, 2018-03-15T21:42:42.123Z, 2018-03-15T21:42:42.123+02:00.\n    Dictionary: the id of the field value as number\n    MultiChoiceDictionary: a list of numbers where each number is a field value id. E.g.: [1,2]\n    User: the user id as number.\n    MultiChoiceUser: a list of numbers where each number is a user id. E.g.: [1,2] \n    TimeSpan: the value of the time span as number in seconds.\n    Sprint: the id of the sprint as number.\n\nThe [field meta data](#operation/ProjectMeta_GetProjectFieldMeta) can be used to check which filter operators are supported for which fields.",
            "nullable": true
          },
          "Sorting": {
            "type": "string",
            "description": "The sorting syntax is as follows:\n[[\"Significane\", \"desc\"], [\"Status\", \"asc]].\nThe [field meta data](#operation/ProjectMeta_GetProjectFieldMeta) can be used to check which fields support sorting.",
            "nullable": true
          },
          "Search": {
            "type": "string",
            "description": "A fulltext search will be performed with this term and only matching\nitems will be included in the result",
            "nullable": true
          },
          "TimeZoneOffset": {
            "type": "integer",
            "description": "The time zone offset, in minutes, of the client. Used for date filter operations",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiItemGroupsResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Total": {
            "type": "integer",
            "format": "int32"
          },
          "Groups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemGroup"
            }
          }
        }
      },
      "ApiItemGroup": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "nullable": true
          },
          "Caption": {
            "type": "string",
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Filter": {
            "nullable": true
          },
          "SubGroups": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemGroup"
            }
          }
        }
      },
      "ApiItemArrangementGrouping": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemArrangement"
          },
          {
            "type": "object",
            "description": "Represents the filter, sorting, search and grouping information.",
            "additionalProperties": false,
            "properties": {
              "Groups": {
                "type": "string",
                "description": "The grouping syntax is as follows:\n[[\"Significane\", \"desc\"], [\"Status\", \"asc]]\nThe field meta data can be used to check which fields support grouping. Grouping always includes\nsorting by the grouped fields. The fields provided in sorting are used for additional sorting.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiNavigationDependencyResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "DependentItemIds": {
            "type": "array",
            "description": "The list of dependet item ids.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiProjectTreeResponse": {
        "type": "object",
        "description": "Contains information about requested projects and subfolders, \nmainly for rendering the project tree. ",
        "additionalProperties": false,
        "properties": {
          "Projects": {
            "type": "array",
            "description": "Contains list of available projects. \nThis field is filled only if requested, may be null. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectTreeProject"
            }
          },
          "Subfolders": {
            "type": "array",
            "description": "Contains subfolders info for requested nodes. \nThe response is returned in the same order as in the request.",
            "nullable": true,
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApiProjectTreeFolder"
              }
            }
          }
        }
      },
      "ApiProjectTreeProject": {
        "type": "object",
        "description": "Holds the project information required to render a projects/folders tree.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the project.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the project.",
            "nullable": true
          },
          "HasSubfolders": {
            "type": "boolean",
            "description": "Indicates whether this project has any subfolders"
          },
          "Archived": {
            "type": "boolean",
            "description": "Indicates whether this project is archived"
          }
        }
      },
      "ApiProjectTreeFolder": {
        "type": "object",
        "description": "Holds the folder information required to render a projects/folders tree.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of folder",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "description": "Id of project where folder is located",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of folder",
            "nullable": true
          },
          "ParentFolderId": {
            "type": "integer",
            "description": "Folder Id of Parent, '0' means it is a root folder of the given project",
            "format": "int32"
          },
          "HasSubfolders": {
            "type": "boolean",
            "description": "Indicates whether this folder has any subfolders"
          }
        }
      },
      "ApiProjectTreePathResponse": {
        "type": "object",
        "description": "Contains information about requested folder \"path\" i.e. \nincludes project information and information of all parents of a given folder \nup to the top.",
        "additionalProperties": false,
        "properties": {
          "Project": {
            "description": "Contains project information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectTreeProject"
              }
            ]
          },
          "FoldersPath": {
            "type": "array",
            "description": "Contains folder path, in top-down order. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectTreeFolder"
            }
          }
        }
      },
      "ApiSearchOperationLogResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Count": {
            "type": "integer",
            "description": "Count of all records matching the search request. ",
            "format": "int32"
          },
          "FirstResults": {
            "type": "integer",
            "description": "FirstResults from search request (if any)",
            "format": "int32",
            "nullable": true
          },
          "MaxResults": {
            "type": "integer",
            "description": "MaxResults from search request (if any)",
            "format": "int32",
            "nullable": true
          },
          "Items": {
            "type": "array",
            "description": "Contains found items matching the search criteria. \nIf FirstResults/MaxResults have been provided in the search request then contains only appropriate portion of results,",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiOperationLog"
            }
          }
        }
      },
      "ApiOperationLog": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of this log entry.",
            "format": "int32"
          },
          "OperationUser": {
            "description": "The user who did the change. Can be empty, in case of changes not related to any particular user (system changes).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "OperationDateUTC": {
            "description": "Date (UTC) when change has occurred. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project",
            "format": "int32",
            "nullable": true
          },
          "ProjectName": {
            "type": "string",
            "description": "The name of the project",
            "nullable": true
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder",
            "format": "int32",
            "nullable": true
          },
          "FolderPath": {
            "type": "string",
            "description": "The human readable path as text. The path consists of the project name and\nthe folder names separated by slashes",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "description": "Log category path (levels separated by dots).",
            "nullable": true
          },
          "EntityType": {
            "type": "string",
            "description": "Related entity type. Depends on category, but usually it is e.g. object type (Defect, Requirement, ...), Sprint, ProjectPlan etc. ",
            "nullable": true
          },
          "EntityId": {
            "type": "integer",
            "description": "Related entity id.",
            "format": "int32",
            "nullable": true
          },
          "FurtherInfo": {
            "type": "string",
            "description": "Additional descriptino of the change (human-readable, in english)",
            "nullable": true
          },
          "EntityUser": {
            "description": "Filled only when entity type is User. Contains information about the user the operation was related to. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          }
        }
      },
      "ApiOperationLogCategory": {
        "type": "object",
        "description": "A category for system log entries.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the category.",
            "nullable": true
          },
          "Scope": {
            "description": "The scope to which system log entries with this\ncategory apply.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiOperationLogCategoryScope"
              }
            ]
          }
        }
      },
      "ApiOperationLogCategoryScope": {
        "type": "string",
        "description": "The scope of a system log category.\r\nThis enum has the following values:\r\n  - `Global` System log entries of this category apply to the\nwhole system.\r\n  - `Project` System log entries of this category are specific\nfor a certain project.\r\n",
        "x-enumNames": [
          "Global",
          "Project"
        ],
        "enum": [
          "Global",
          "Project"
        ]
      },
      "ApiProjectInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectIdName"
          },
          {
            "type": "object",
            "description": "Info of a given project",
            "additionalProperties": false,
            "properties": {
              "IsArchived": {
                "type": "boolean",
                "description": "True if project was makred as archived. "
              },
              "IsFavourite": {
                "type": "boolean",
                "description": "true if project was makred as favourite"
              },
              "HasSubfolders": {
                "type": "boolean",
                "description": "Indicates whether this project has any subfolders. "
              },
              "ShortDescription": {
                "type": "string",
                "description": "short description of this project ",
                "nullable": true
              },
              "ProjectPermissions": {
                "description": "Permissions of project-level operations ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectPermissions"
                  }
                ]
              },
              "SystemPermissions": {
                "description": "Permissions of system-level operations ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiSystemPermissions"
                  }
                ]
              },
              "FolderPermissions": {
                "description": "Permissions of root-folder operations ",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectFolderPermissions"
                  }
                ]
              },
              "ProjectConfig": {
                "description": "Contains some basic information regarding the project configuration.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectConfigInfo"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiProjectPermissions": {
        "type": "object",
        "description": "Represents permissions in a project. Includes only project-level permissions. \nFor permissions that can be defined on folder level (e.g. permissions to create items) \nplease refer to ApiProjectFolderPermissions (this also included a project's root-folder permissions). ",
        "additionalProperties": false,
        "properties": {
          "CanConfigureProject": {
            "description": "Indicates whether user is able to configure the project.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanUseNotifications": {
            "description": "Indicates whether user is allowed to use notifications.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEditPublicUserView": {
            "description": "Indicates whether user is able to edit public user views.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanPublishUserView": {
            "description": "Indicates whether user is able to publish user views.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewReportDefinitions": {
            "description": "Indicates whether user is able to see report definitions.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateReportDefinition": {
            "description": "Indicates whether user is able to create report definitions.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanImportReportDefinition": {
            "description": "Indicates whether user is able to import report definitions.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanConfigureProjectTemplate": {
            "description": "Indicates whether user is able to configure the project template.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanConfigureProjectWorkflows": {
            "description": "Indicates whether user is able to configure the project workflows.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageProjectUsers": {
            "description": "Indicates whether user is able to manage the users.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanConfigureDefaultNotificationRules": {
            "description": "Indicates whether user is able to configure the default notification rules.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanConfigureNotificationTemplates": {
            "description": "Indicates whether the user is able to configure the templates for\nemail notifications.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewAgents": {
            "description": "Indicates whether user is able to see agents.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageAgents": {
            "description": "Indicates whether user is able to manage the agents.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanAddDependencyAnySubfolder": {
            "description": "Indicates whether user is able to add dependency in the project (in at least one subfolder).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewAgileBoard": {
            "description": "Indicates whether user is able to see agile board.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateEditSprints": {
            "description": "Indicates whether user is able to create or edit sprints.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDeleteSprints": {
            "description": "Indicates whether user is able to delete sprints.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanPlanSprints": {
            "description": "Indicates whether user is able to plan sprints.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiSystemPermissions": {
        "type": "object",
        "description": "Represents permissions in a system.",
        "additionalProperties": false,
        "properties": {
          "CanCreateProject": {
            "description": "Indicates whether user is able to create a project. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageRoles": {
            "description": "Indicates whether user is able to manage the roles. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageAnyUsers": {
            "description": "Indicates whether user is able to manage users in at least\none project.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewSystemLog": {
            "description": "Indicates whether user is able to see system log.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanManageAnyIntegrations": {
            "description": "Inidicates whether the user is able to manage integrations\nfor at least one project.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanViewAnyAgileBoard": {
            "description": "Indicates whether user is able to see agile board\nfor at least one project.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiProjectConfigInfo": {
        "type": "object",
        "description": "Some basic information regarding the project configuration\n(template, etc.).",
        "additionalProperties": false,
        "properties": {
          "IsOwned": {
            "type": "boolean",
            "description": "Indicates whether the current project owns the project configuration."
          },
          "IsShared": {
            "type": "boolean",
            "description": "Indicates whether this project configuration is shared between\nmultiple projects."
          },
          "OwningProject": {
            "description": "Contains basic information regarding the project which owns this\nproject configuration. Might be null, if the user is not allowed\nto access the owning project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          }
        }
      },
      "ApiProjectNewResponse": {
        "type": "object",
        "description": "Contains information about created project.",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project.",
            "format": "int32"
          },
          "CopyItemsLongOperation": {
            "description": "Represents asnychronous operation that is copying items into newly created project. \n(only if CopyItems was true). ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiLongOperation"
              }
            ]
          }
        }
      },
      "ApiLongOperation": {
        "type": "object",
        "description": "Result of a REST API call that started long operation (asynchronous) to perform the actual job. \nStatus of the task can be queried using GET System/LongOperation/{guid}/Status or GET System/LongOperation/{guid}\nIn most cases it is also possible to be notified via SignalR when operation finishes. ",
        "additionalProperties": false,
        "properties": {
          "LongRunningTaskGuid": {
            "type": "string",
            "description": "Id of the long running task. Can be used to query the progress (see GET /System/LongOperation/{guid}). ",
            "nullable": true
          }
        }
      },
      "ApiProjectCreate": {
        "type": "object",
        "description": "Contains necessary information to create a new project.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the project.",
            "nullable": true
          },
          "SourceProject": {
            "description": "The information about the source project (or null if creating project from defaults).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectCreateSource"
              }
            ]
          },
          "UploadedConfiguration": {
            "description": "Project configuration (imported from an .acxz file) to be used for the created project\n(or null if creating project from defaults). The file should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nfirst.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFileUploadInfo"
              }
            ]
          }
        }
      },
      "ApiProjectCreateSource": {
        "type": "object",
        "description": "Contains informations about the source project used to create a new project. ",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the source project.",
            "format": "int32"
          },
          "CopyItems": {
            "type": "boolean",
            "description": "If true the project configuration and items will be copied, otherwise only project configuration will be copied."
          },
          "ShareConfiguration": {
            "type": "boolean",
            "description": "If true shares the configuration with the source project."
          }
        }
      },
      "ApiProjectPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "Rename": "#/components/schemas/ApiProjectPatchRename",
            "Archive": "#/components/schemas/ApiProjectPatchArchive"
          }
        },
        "description": "Represents data required to execute project-modify operation. \nThere are multiple project modify operations supported - see ApiProjectPatchTypes. \nDepending on the type the actual properties can differ. See subclasses for details. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiProjectPatchRename": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectPatchOperation"
          },
          {
            "type": "object",
            "description": "Rename project operation.",
            "additionalProperties": false,
            "properties": {
              "NewName": {
                "type": "string",
                "description": "New name of the project being updated. ",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiProjectPatchArchive": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectPatchOperation"
          },
          {
            "type": "object",
            "description": "Archive/unarchive project operation.",
            "additionalProperties": false,
            "properties": {
              "Archived": {
                "type": "boolean",
                "description": "Specifies whether given project should be set archive (true) or non-archived (false)"
              }
            }
          }
        ]
      },
      "ApiReportDefinitionInfo": {
        "type": "object",
        "description": "Contains information about report definition.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the report definition.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the report definition.",
            "nullable": true
          },
          "Owner": {
            "description": "The owner of the report definition.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "ProjectInfo": {
            "description": "The id and the name of the project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "Color": {
            "type": "string",
            "description": "The color of the report definition",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean",
            "description": "If true indicates that the report definition is public."
          },
          "ItemTypes": {
            "type": "array",
            "description": "List of used ApiItemTypes for this report definition.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          },
          "Permissions": {
            "description": "Information about user permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPermissions"
              }
            ]
          }
        }
      },
      "ApiReportPermissions": {
        "type": "object",
        "description": "Represents permissions for a report.",
        "additionalProperties": false,
        "properties": {
          "CanGenerate": {
            "description": "Indicates whether the user is able to generate a report based on\nthis report definition.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEditProperties": {
            "description": "Indicates whether the user is able to edit this report definition's properties.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanEditLayout": {
            "description": "Indicates whether the user is able to edit this report definition's layout.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDelete": {
            "description": "Indicates whether the user is able to delete this report definition.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanExport": {
            "description": "Indicates whether the user is able to export this report definition.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanPublish": {
            "description": "Indicates whether the user is able to publish this report definition.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanMakePrivate": {
            "description": "Indicates whether the user is able to unpublish this report definition.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiReportPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchType",
          "mapping": {
            "Import": "#/components/schemas/ApiReportPatchImport"
          }
        },
        "description": "Represent the report definition patch request.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchType"
        ],
        "properties": {
          "PatchType": {
            "type": "string"
          }
        }
      },
      "ApiReportPatchImport": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPatchOperation"
          },
          {
            "type": "object",
            "description": "Represent the report definition import request.",
            "additionalProperties": false,
            "properties": {
              "filesMeta": {
                "type": "array",
                "description": "The list of report template files which should be imported.\nThe files should be uploaded to the endpoint\n[UploadFile](#operation/File_UploadFile)\nfirst.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFileUploadInfo"
                }
              }
            }
          }
        ]
      },
      "ApiSprintsInclude": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Active` \r\n  - `All` \r\n  - `Inactive` \r\n",
        "x-enumNames": [
          "All",
          "Active",
          "Inactive"
        ],
        "enum": [
          "All",
          "Active",
          "Inactive"
        ]
      },
      "ApiProjectSubFolder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectFolder"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HasSubfolders": {
                "type": "boolean",
                "description": "Indicates whether this folder has any subfolders. "
              }
            }
          }
        ]
      },
      "ApiProjectUpdateProjectFolderRolesResponse": {
        "type": "object",
        "description": "Contains information about update on the project folder roles.",
        "additionalProperties": false,
        "properties": {
          "ErrorOccurred": {
            "type": "boolean",
            "description": "Indicates if an error occurred during the update."
          },
          "ErrorList": {
            "type": "array",
            "description": "The error list.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiErrorInformation"
            }
          }
        }
      },
      "ApiErrorInformation": {
        "type": "object",
        "description": "Contains information about an error which occurred during an API call.",
        "additionalProperties": false,
        "properties": {
          "ArgumentErrorType": {
            "description": "The type of argument error which occurred. \nUsed only when Type == ApiErrorType.ArgumentError",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiArgumentErrorType"
              }
            ]
          },
          "Message": {
            "type": "string",
            "description": "A human-readable description of the error.",
            "nullable": true
          }
        }
      },
      "ApiProjectUpdateProjectFolderRolesRequest": {
        "type": "object",
        "description": "Contains information about update for the project roles.",
        "additionalProperties": false,
        "properties": {
          "AddRoles": {
            "type": "array",
            "description": "The list of roles wich should be added or modified.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiUpdateProjectFolderRole"
            }
          },
          "DeleteRoles": {
            "type": "array",
            "description": "The list of roles wich should be deleted.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiDeleteProjectFolderRole"
            }
          }
        }
      },
      "ApiUpdateProjectFolderRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiDeleteProjectFolderRole"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "RoleId": {
                "type": "integer",
                "description": "The role id for the folder.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiDeleteProjectFolderRole": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder.",
            "format": "int32"
          },
          "UserId": {
            "type": "integer",
            "description": "The id of the user.",
            "format": "int32"
          }
        }
      },
      "ApiUserProjectFolderAssignment": {
        "type": "object",
        "description": "The user project assignment.",
        "additionalProperties": false,
        "properties": {
          "UserId": {
            "type": "integer",
            "description": "User Id.",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "Project folder id, for the project assignment use id 0.",
            "format": "int32"
          },
          "RoleId": {
            "type": "integer",
            "description": "Role id.",
            "format": "int32"
          }
        }
      },
      "ApiGetUserAssignmentResponse": {
        "type": "object",
        "description": "Represents the get user assignment response.",
        "additionalProperties": false,
        "properties": {
          "Assignements": {
            "type": "array",
            "description": "The list of assignments.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiUserRole"
            }
          }
        }
      },
      "ApiUserRole": {
        "type": "object",
        "description": "Represents the user. the assigned role and the folder.",
        "additionalProperties": false,
        "properties": {
          "Role": {
            "description": "The assigned role.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRoleIdName"
              }
            ]
          },
          "User": {
            "description": "The user.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "FolderId": {
            "type": "integer",
            "description": "The folder id.",
            "format": "int32"
          }
        }
      },
      "ApiUserProjectFolderAssignmentPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "Replace": "#/components/schemas/ApiUserProjectFolderAssignmentPatchReplace"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiUserProjectFolderAssignmentPatchReplace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserProjectFolderAssignmentPatchOperation"
          },
          {
            "type": "object",
            "description": "Replace role operation",
            "additionalProperties": false,
            "properties": {
              "NewRoleId": {
                "type": "integer",
                "description": "New role id. ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiProjectSubfoldersPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "BatchCreate": "#/components/schemas/ApiProjectSubfoldersBatchCreate"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiProjectSubfoldersBatchCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectSubfoldersPatchOperation"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "PathSeparator": {
                "type": "string",
                "description": "Path separator. Expected to be single character. ",
                "nullable": true
              },
              "Subfolders": {
                "type": "array",
                "description": "List of subfolders to be created. Each entry is a full path of the folder (relative to the origin parent folder).\nFor example, the following list: \n\n/a\n/a/b\n/a/b/c\n/a/b/d\n\nwould create a tree structure:\n\n* project \n  - parent folder \n    - a\n      - b \n        - c\n        - d\n\nWARNING! folders needs to be included on the list in order that guarantee parent folder is before its children. ",
                "nullable": true,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ApiLongOperationOfInteger": {
        "type": "object",
        "description": "Result of a REST API call that started long operation (asynchronous) to perform the actual job. \nWhen LongRunningTaskGuid is null this indicates a situation when REST API was able to process the task without starting asynchronous job. \nThen the actual result is returned in Result field. ",
        "additionalProperties": false,
        "properties": {
          "LongRunningTaskGuid": {
            "type": "string",
            "description": "Id of the long running task. Can be used to query the progress (see GET /System/LongOperation/{guid}). \nIf empty indicates the long operation has not been started and actual result is immediately available in the Result field. ",
            "nullable": true
          },
          "Result": {
            "type": "integer",
            "description": "Filled only when LongRunningTaskGuid is not provided. Contains actual, immediate result of the call. ",
            "format": "int32"
          }
        }
      },
      "ApiProjectFolderCreate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name fo the folder to be created. \nIf SourceFolder is provided then Name must be null, what means using the same name as name of the source folder. \nIf SourceFolder is not provided then Name is required (not empty). \nNote: folder names must be unique (on one level). ",
            "nullable": true
          },
          "SourceFolder": {
            "description": "If provided then new folder is created as a copy of the given source folder. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectFolderCreateSourceFolder"
              }
            ]
          }
        }
      },
      "ApiProjectFolderCreateSourceFolder": {
        "type": "object",
        "description": "Encapsulated information about location of a source folder. ",
        "additionalProperties": false,
        "properties": {
          "FolderId": {
            "type": "integer",
            "description": "Id of the source folder (in the source project). \nZero is not supported here. ",
            "format": "int32"
          }
        }
      },
      "ApiProjectFolderPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "Rename": "#/components/schemas/ApiProjectFolderPatchRename",
            "Move": "#/components/schemas/ApiProjectFolderPatchMove"
          }
        },
        "description": "Represents data required to execute folder-modify operation. \nThere are multiple folder modify operations supported - see ApiProjectFolderPatchOperationType. \nDepending on the type the actual properties can differ. See subclasses for details. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiProjectFolderPatchRename": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectFolderPatchOperation"
          },
          {
            "type": "object",
            "description": "Rename folder operation",
            "additionalProperties": false,
            "properties": {
              "NewName": {
                "type": "string",
                "description": "New name of the folder being updated. ",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiProjectFolderPatchMove": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectFolderPatchOperation"
          },
          {
            "type": "object",
            "description": "Move folder operation. \nAs we currently do not support cross-projects operations the target folder needs to be located in the same project.",
            "additionalProperties": false,
            "properties": {
              "TargetParentFolderId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiPaginatedResultOfApiItemInfo": {
        "type": "object",
        "description": "Contains a paginated result.",
        "additionalProperties": false,
        "properties": {
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.\nThis value is provided during the request.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The actual items included in this response.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemInfo"
            }
          }
        }
      },
      "ApiItemSearchResult": {
        "type": "object",
        "description": "The list of search results and some meta information regarding\nthe search.",
        "additionalProperties": false,
        "properties": {
          "SearchTerm": {
            "type": "string",
            "description": "The term for which the search has been performed",
            "nullable": true
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of results.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The results of the search. The list contains basic information\nfor each search result.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemInfo"
            }
          }
        }
      },
      "ApiUserViewInfo": {
        "type": "object",
        "description": "Contains some basic information on the user view.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the view.",
            "format": "int32"
          },
          "Owner": {
            "description": "The information about the owner.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "The name of the view.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the view.",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "description": "The color of the view.",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Indicates whether the view is public or not."
          },
          "IsFavorite": {
            "type": "boolean",
            "description": "Indicates whether the view is favorite or not."
          },
          "Permissions": {
            "description": "Information about user permissions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserViewPermissions"
              }
            ]
          },
          "ApplicableItemTypes": {
            "type": "array",
            "description": "List of ApiItemTypes for wich this user view is applicable.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          }
        }
      },
      "ApiUserViewPermissions": {
        "type": "object",
        "description": "Represents permissions for a report.",
        "additionalProperties": false,
        "properties": {
          "CanEdit": {
            "description": "Indicates whether user is able to edit user view.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanDelete": {
            "description": "Indicates whether user is able to delete user view.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanPublish": {
            "description": "Indicates whether user is able to publish user view.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanMakePrivate": {
            "description": "Indicates whether user is able to depublish user view.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiReportPlugin": {
        "type": "object",
        "description": "Represents a report plugin.",
        "additionalProperties": false,
        "properties": {
          "UniqueCode": {
            "type": "string",
            "description": "Unique code of this report plugin.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the plugin.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Plugin description (can be empty)",
            "nullable": true
          }
        }
      },
      "ApiImportProjectTemplatePreviewResponse": {
        "type": "object",
        "description": "Represents the preview for the import of project configuration.",
        "additionalProperties": false,
        "properties": {
          "ListOfChanges": {
            "type": "array",
            "description": "Represents the list of changes which need to be applied.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiImportProjectTemplatePreviewEntry"
            }
          }
        }
      },
      "ApiImportProjectTemplatePreviewEntry": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "The realted item type of the future change.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "The description of the future change.",
            "nullable": true
          },
          "Category": {
            "description": "The category of the future change.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiDiffCategoryType"
              }
            ]
          },
          "ReadyToImport": {
            "type": "boolean",
            "description": "The flag which identifies if the future change can be done automatically."
          },
          "Cause": {
            "type": "string",
            "description": "The cause why the future change can not be done automatically.",
            "nullable": true
          }
        }
      },
      "ApiDiffCategoryType": {
        "type": "string",
        "description": "Identifies the type of item.\r\nThis enum has the following values:\r\n  - `FieldRules` \r\n  - `Notification` \r\n  - `Subtemplate` \r\n  - `Template` \r\n  - `Workflow` \r\n",
        "x-enumNames": [
          "Template",
          "Workflow",
          "Subtemplate",
          "Notification",
          "FieldRules"
        ],
        "enum": [
          "Template",
          "Workflow",
          "Subtemplate",
          "Notification",
          "FieldRules"
        ]
      },
      "ApiFieldSortMode": {
        "type": "string",
        "description": "The different modes in which the list of fields can be sorted.\r\nThis enum has the following values:\r\n  - `ById` Sorts the fields by their Id.\r\n  - `ByLayoutPosition` Sort the fields by the position in the edit layout. Fields which\nare not part of the edit layout are added at the end.\r\n  - `ByTitle` Sort the fields by their title.\r\n",
        "x-enumNames": [
          "ById",
          "ByLayoutPosition",
          "ByTitle"
        ],
        "enum": [
          "ById",
          "ByLayoutPosition",
          "ByTitle"
        ]
      },
      "ApiProjectTemplateDictionary": {
        "type": "object",
        "description": "Represents a single dictionary (i.e. entity that has a name and holds list of values) defined in the project template. \nPlease note that dictionary fields reference either their own (\"local\") dictionaries, or use dictionaries \nreferenced by many fields at the same time (\"shared\"). ",
        "additionalProperties": false,
        "properties": {
          "Entries": {
            "type": "array",
            "description": "Entries of this dictionary. The order matters. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntry"
            }
          },
          "Id": {
            "type": "integer",
            "description": "Internal Id of the dictionary.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dictionary.",
            "nullable": true
          },
          "ConsistencyKey": {
            "type": "string",
            "description": "Consistency key. Needs to be provided when saving. \nPrevents from concurrent modifications. ",
            "nullable": true
          }
        }
      },
      "ApiProjectTemplateDictionaryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntryNew"
          },
          {
            "type": "object",
            "description": "Contains the meta-information of a dictionary entry. ",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "Id of the entry. This value is stored on actual item that references the dictionary entry.\n(Entries can be safely renamed, as their ids do not change).",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiProjectTemplateDictionaryEntryNew": {
        "type": "object",
        "description": "Contains the meta-information of a new dictionary entry. ",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of the dictionary entry. This is the value visible in the UI. ",
            "nullable": true
          },
          "IsDefault": {
            "type": "boolean",
            "description": "Indicates whether this entry should be considered as default for this dictionary. "
          }
        }
      },
      "ApiProjectTemplateDictionaryUpdate": {
        "type": "object",
        "description": "Represents an update of single dictionary (i.e. entity that has a name and holds list of values) defined in the project template. \nPlease note that dictionary fields reference either their own (\"local\") dictionaries, or use dictionaries \nreferenced by many fields at the same time (\"shared\"). ",
        "additionalProperties": false,
        "properties": {
          "Entries": {
            "type": "array",
            "description": "Entries of this dictionary. The order matters. ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntry"
            }
          },
          "Id": {
            "type": "integer",
            "description": "Internal Id of the dictionary.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the dictionary.",
            "nullable": true
          },
          "ConsistencyKey": {
            "type": "string",
            "description": "Consistency key. Needs to be provided when saving. \nPrevents from concurrent modifications. ",
            "nullable": true
          }
        }
      },
      "ApiFieldPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "ActivateField": "#/components/schemas/ApiFieldPatchOperationActivateField",
            "DeactivateField": "#/components/schemas/ApiFieldPatchOperationDeactivateField"
          }
        },
        "description": "Represents data required to execute modify operation.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "FieldId",
          "PatchOperation"
        ],
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field.",
            "minLength": 1
          },
          "ItemType": {
            "description": "The item type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiFieldPatchOperationActivateField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldPatchOperation"
          },
          {
            "type": "object",
            "description": "Activate field operation.",
            "additionalProperties": false
          }
        ]
      },
      "ApiFieldPatchOperationDeactivateField": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldPatchOperation"
          },
          {
            "type": "object",
            "description": "Deactivate field operation.",
            "additionalProperties": false
          }
        ]
      },
      "ApiProjectTemplateInformation": {
        "type": "object",
        "description": "Contains the meta-information of a project template.",
        "additionalProperties": false,
        "properties": {
          "AffectedProjects": {
            "type": "array",
            "description": "List of projects which share the template.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectIdName"
            }
          },
          "ApiItemTypeIsWebLayout": {
            "type": "array",
            "description": "List which indicates for each item type whether the layout was created in web client.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemTypeIsWebLayoutInfo"
            }
          },
          "Project": {
            "description": "The project for which this part of the project configuration was requested.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "IsShared": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is shared with\na different project."
          },
          "IsOwned": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is owned by the\nproject for which this part of the configuration was requested."
          },
          "OwningProject": {
            "description": "The project which owns the project configuration. When the project\nconfiguration is shared, the project configuration might not be owned by the project for\nwhich this part of the project configuration was requested. This info can be null if you\nare not allowed to access the owning project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          }
        }
      },
      "ApiItemTypeIsWebLayoutInfo": {
        "type": "object",
        "description": "Contains the meta-information of a base object template which is shown by the item type\nand the information where the layout was created.",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type which represents base object template for which the layout information is returned.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "IsWebLayout": {
            "type": "boolean",
            "description": "Indicates whether the layout was created in web client."
          }
        }
      },
      "ApiProjectFieldRules": {
        "type": "object",
        "description": "Contains the FieldRules for all item types for a certain project.",
        "additionalProperties": false,
        "required": [
          "Project",
          "IsShared",
          "IsOwned",
          "Rules"
        ],
        "properties": {
          "Project": {
            "description": "The project for which this part of the project configuration was requested.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "IsShared": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is shared with\na different project."
          },
          "IsOwned": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is owned by the\nproject for which this part of the configuration was requested."
          },
          "OwningProject": {
            "description": "The project which owns the project configuration. When the project\nconfiguration is shared, the project configuration might not be owned by the project for\nwhich this part of the project configuration was requested. This info can be null if you\nare not allowed to access the owning project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "Rules": {
            "type": "array",
            "description": "Contains the FieldRules for each item type.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRules"
            }
          }
        }
      },
      "ApiFieldRules": {
        "type": "object",
        "description": "Contains the field rules for a certain item type in a certain\nproject. ",
        "additionalProperties": false,
        "required": [
          "ItemType",
          "Rules"
        ],
        "properties": {
          "ItemType": {
            "description": "The item type to which the field rules apply.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "Rules": {
            "type": "array",
            "description": "The list of rules. Rules can be only one of the following types:\n  - DependentValues: rules of this type restrict the possible values\n    of a certain field based on the current value of another field.\n  - Workflow: rules of this type specify actions which are executed when\n    the value of a dictionary field is changed to a certain value.\n    These actions include setting a field readonly, changing\n    the value of a field, etc.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRule"
            }
          }
        }
      },
      "ApiProjectFieldRulesUpdate": {
        "type": "object",
        "description": "Contains the modifications which should be applied to the field rules\nfor all item types in a project.",
        "additionalProperties": false,
        "required": [
          "Rules"
        ],
        "properties": {
          "Rules": {
            "type": "array",
            "description": "Contains the field rules to update per item type. If nothing\nis specified for a certain item type, its field rules are not\nmodified.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRulesUpdateWithItemType"
            }
          }
        }
      },
      "ApiFieldRulesUpdateWithItemType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRulesUpdate"
          },
          {
            "type": "object",
            "description": "Contains the modifications which should be applied to the field rules\nof a certain item type together with the item type to which this update\nshould be applied.",
            "additionalProperties": false,
            "required": [
              "ItemType"
            ],
            "properties": {
              "ItemType": {
                "description": "The item type to which this update should be applied.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiFieldRulesUpdate": {
        "type": "object",
        "description": "Contains the modifications which should be applied to the field rules\nfor a certain item type.",
        "additionalProperties": false,
        "required": [
          "Rules"
        ],
        "properties": {
          "Rules": {
            "type": "array",
            "description": "The list of field rules which should be set. The existing rules\nwill be replaced. Rules can be only one of the following types:\n  - DependentValues: rules of this type restrict the possible values\n    of a certain field based on the current value of another field.\n  - Workflow: rules of this type specify actions which are executed when\n    the value of a dictionary field is changed to a certain value.\n    These actions include setting a field readonly, changing\n    the value of a field, etc.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRuleUpdate"
            }
          }
        }
      },
      "ApiFieldRuleUpdate": {
        "type": "object",
        "discriminator": {
          "propertyName": "RuleType",
          "mapping": {
            "DependentValues": "#/components/schemas/ApiFieldRuleDependentValuesUpdate",
            "Workflow": "#/components/schemas/ApiFieldRuleWorkflowUpdate"
          }
        },
        "description": "Represents a single rule for a field.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "FieldId",
          "RuleType"
        ],
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field to which the rule applies.",
            "minLength": 1
          },
          "RuleType": {
            "type": "string"
          }
        }
      },
      "ApiFieldRuleDependentValuesUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRuleUpdate"
          },
          {
            "type": "object",
            "description": "A field rule which defines a dependency between to dictionary fields. Values\nof the field with the id FieldId are only allowed for certain\nvalues in the field with the id OtherFieldId.",
            "additionalProperties": false,
            "required": [
              "OtherFieldId",
              "Restrictions"
            ],
            "properties": {
              "OtherFieldId": {
                "type": "string",
                "description": "The id of the other field on which the field to which this rule applies depends.",
                "minLength": 1
              },
              "Restrictions": {
                "type": "array",
                "description": "The list with the restrictions for the value of the field.",
                "items": {
                  "$ref": "#/components/schemas/ApiFieldValueRestrictionUpdate"
                }
              }
            }
          }
        ]
      },
      "ApiFieldValueRestrictionUpdate": {
        "type": "object",
        "description": "Represents the modification of a restriction, which restricts\nthe value of field based on the values of another field.",
        "additionalProperties": false,
        "required": [
          "Value",
          "AllowedFor"
        ],
        "properties": {
          "Value": {
            "description": "The value which should be restricted."
          },
          "AllowedFor": {
            "type": "array",
            "description": "A list of values of the other field for which the current\nvalue is allowed.",
            "items": {}
          }
        }
      },
      "ApiFieldRuleWorkflowUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRuleUpdate"
          },
          {
            "type": "object",
            "description": "This field rule allows to specify actions which are performed\nwhen a dictionary field is changed to a certain value.",
            "additionalProperties": false,
            "required": [
              "Transitions"
            ],
            "properties": {
              "Transitions": {
                "type": "array",
                "description": "The list of transitions which this rule defines. Each transition\nspecifies a list of actions which should be performed when the\nfield is changed to the specified value.",
                "items": {
                  "$ref": "#/components/schemas/ApiFieldRuleWorkflowTransitionUpdate"
                }
              }
            }
          }
        ]
      },
      "ApiFieldRuleWorkflowTransitionUpdate": {
        "type": "object",
        "description": "Contains all the actions which should be performed when the dictionary\nfield is changed to the specified value.",
        "additionalProperties": false,
        "required": [
          "Value",
          "Actions"
        ],
        "properties": {
          "Value": {
            "description": "The field value to which this transition applies.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          },
          "Actions": {
            "type": "array",
            "description": "The list of actions which are executed when the value of the\ndictionary field is changed to the specified value.",
            "items": {
              "$ref": "#/components/schemas/ApiFieldRuleWorkflowActionsUpdate"
            }
          }
        }
      },
      "ApiFieldRuleWorkflowActionsUpdate": {
        "type": "object",
        "description": "Contains the actions which should be performed for one specific field.",
        "additionalProperties": false,
        "required": [
          "FieldId",
          "Readonly",
          "Required",
          "Visible",
          "Highlight",
          "ChangeValue"
        ],
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "This action is applied to the field with this id.\nThe id is the same as the base object property name.",
            "minLength": 1
          },
          "Readonly": {
            "type": "boolean",
            "description": "Indicates whether the field should be readonly."
          },
          "Required": {
            "type": "boolean",
            "description": "Indicates whether the field should be required."
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether the field should be highlighted."
          },
          "Highlight": {
            "type": "boolean",
            "description": "Indicates whether the field should be visible."
          },
          "ChangeValue": {
            "type": "boolean",
            "description": "Indicates whether the value of the field should be changed."
          },
          "Value": {
            "description": "The value to which the field should be set. The type depends\non the field type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValue"
              }
            ]
          }
        }
      },
      "ApiFieldRulesWithOwnership": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFieldRules"
          },
          {
            "type": "object",
            "description": "Contains the field rules for a certain item type in a certain project together\nwith some additional information regarding the ownership of the project template\nto which the field rules belong.",
            "additionalProperties": false,
            "required": [
              "Project",
              "IsShared",
              "IsOwned"
            ],
            "properties": {
              "Project": {
                "description": "The project for which this part of the project configuration was requested.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectIdName"
                  }
                ]
              },
              "IsShared": {
                "type": "boolean",
                "description": "Indicates whether the project configuration is shared with\na different project."
              },
              "IsOwned": {
                "type": "boolean",
                "description": "Indicates whether the project configuration is owned by the\nproject for which this part of the configuration was requested."
              },
              "OwningProject": {
                "description": "The project which owns the project configuration. When the project\nconfiguration is shared, the project configuration might not be owned by the project for\nwhich this part of the project configuration was requested. This info can be null if you\nare not allowed to access the owning project.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectIdName"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiProjectOptionsWithOwnership": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectOptions"
          },
          {
            "type": "object",
            "description": "Represents options of a certain project together\nwith some additional information regarding the ownership of the \nproject options (either project itself or the master project, \nin case of shared template setup). ",
            "additionalProperties": false,
            "properties": {
              "Project": {
                "description": "The project for which this part of the project configuration was requested.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectIdName"
                  }
                ]
              },
              "IsShared": {
                "type": "boolean",
                "description": "Indicates whether the project configuration is shared with\na different project."
              },
              "IsOwned": {
                "type": "boolean",
                "description": "Indicates whether the project configuration is owned by the\nproject for which this part of the configuration was requested."
              },
              "OwningProject": {
                "description": "The project which owns the project configuration. When the project\nconfiguration is shared, the project configuration might not be owned by the project for\nwhich this part of the project configuration was requested. This info can be null if you\nare not allowed to access the owning project.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiProjectIdName"
                  }
                ]
              },
              "CanEdit": {
                "description": "Indicates whether the current user is allowed to edit the project\nsettings.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiPermissionResult"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiProjectOptions": {
        "type": "object",
        "description": "Represents options of a certain project.",
        "additionalProperties": false,
        "properties": {
          "RequireExpectedResults": {
            "type": "boolean",
            "description": "If set, then 'Expected Results' field is mandatory when defining a test case. "
          },
          "RequireActualResults": {
            "type": "boolean",
            "description": "If set, then 'Actual Results' field is mandatory when manually executing a test case. "
          }
        }
      },
      "ApiProjectTemplateDictionaryWithUsage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectTemplateDictionary"
          },
          {
            "type": "object",
            "description": "Represents a single dictionary (i.e. entity that has a name and holds list of values) defined in the project template. \nPlease not that dictionary fields reference either their own (\"local\") dictionaries, or use dictionaries \nreferenced by many fields at the same time (\"shared\"). \n\nAdditionally, this class includes information whether (and where) in the project template the dictionary is referenced (which custom field use it). \nFor local dictionaries we expect to find exactly one matching custom field. \nFor shared dictionaries the list can be longer (but also zero). ",
            "additionalProperties": false,
            "properties": {
              "Usage": {
                "type": "array",
                "description": "Contains list of places (custom fields) where the dictionary is referenced in current project template. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiProjectTemplateDictionaryUsage"
                }
              }
            }
          }
        ]
      },
      "ApiProjectTemplateDictionaryUsage": {
        "type": "object",
        "description": "Represents a usage of dictionary by a custom field. ",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "FieldId": {
            "type": "string",
            "description": "Id of the field",
            "nullable": true
          },
          "FieldTitle": {
            "type": "string",
            "description": "Field title ",
            "nullable": true
          }
        }
      },
      "ApiProjectTemplateDictionaryNew": {
        "type": "object",
        "description": "Represents a new dictionary to be created.",
        "additionalProperties": false,
        "properties": {
          "Entries": {
            "type": "array",
            "description": "Entries of this dictionary. The order matters. \nAll items must be new.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectTemplateDictionaryEntryNew"
            }
          },
          "Name": {
            "type": "string",
            "description": "Name of the dictionary.",
            "nullable": true
          }
        }
      },
      "ApiProjectNotificationRule": {
        "type": "object",
        "description": "Contains the project default notification rule.",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type this rule is defined for.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "ProjectInfo": {
            "description": "The id and name of the project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "CreatedByUser": {
            "description": "Creator user info.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "The id of the rule.",
            "format": "int32"
          },
          "FilterType": {
            "description": "The type of the filter.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterType"
              }
            ]
          },
          "CustomFilterOptions": {
            "description": "Possible filter options only available if FilterType is Custom.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterOptions"
              }
            ]
          },
          "IgnoreIfOwnerAction": {
            "type": "boolean",
            "description": "Ignore if owner action."
          }
        }
      },
      "ApiNotificationRuleFilterType": {
        "type": "string",
        "description": "The type of notification rule filter.\r\nThis enum has the following values:\r\n  - `AnyChange` Any change notification.\r\n  - `Custom` Custom notification filter.\r\n  - `None` No notification filter.\r\n",
        "x-enumNames": [
          "None",
          "Custom",
          "AnyChange"
        ],
        "enum": [
          "None",
          "Custom",
          "AnyChange"
        ]
      },
      "ApiNotificationRuleFilterOptions": {
        "type": "object",
        "description": "The type options of notification rule.",
        "additionalProperties": false,
        "properties": {
          "BaseObjectChangedProperties": {
            "type": "boolean",
            "description": "Any change of base object property."
          },
          "BaseObjectChangedStatus": {
            "type": "boolean",
            "description": "Base object's status field has changed."
          },
          "BaseObjectAcceptedStatuses": {
            "type": "string",
            "description": "List of accepted statuses as comma separated list.",
            "nullable": true
          },
          "BaseObjectCreated": {
            "type": "boolean",
            "description": "Base object has been created. "
          },
          "BaseObjectMoved": {
            "type": "boolean",
            "description": "Base object has been moved between folders. "
          },
          "BaseObjectDeleted": {
            "type": "boolean",
            "description": "Base object has been deleted. "
          },
          "BaseObjectChangeUnderAssignment": {
            "type": "boolean",
            "description": "Base object has been changed (including changed properties, create, delete, move)\nassigned user notification."
          },
          "BaseObjectChangeUnderOwnership": {
            "type": "boolean",
            "description": "Base object has been changed (including changed properties, create, delete, move)\nowner notification."
          },
          "BaseObjectAssigned": {
            "type": "boolean",
            "description": "Base object has been assigned."
          }
        }
      },
      "ApiFolderNotificationRuleReplacementWithType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiFolderNotificationRuleReplacement"
          },
          {
            "type": "object",
            "description": "Contains the necessary information to create a new folder notification rule.",
            "additionalProperties": false,
            "properties": {
              "ItemType": {
                "description": "Item type this rule is defined for.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiFolderNotificationRuleReplacement": {
        "type": "object",
        "description": "Contains the necessary information to create a new folder notification rule.",
        "additionalProperties": false,
        "properties": {
          "FilterType": {
            "description": "The type of the filter.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterType"
              }
            ]
          },
          "CustomFilterOptions": {
            "description": "Possible filter options only available if FilterType is Custom.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterOptions"
              }
            ]
          },
          "IgnoreIfOwnerAction": {
            "type": "boolean",
            "description": "Ignore if owner action."
          }
        }
      },
      "ApiProjectNotificationTemplates": {
        "type": "object",
        "description": "Contains the notification templates of a specific project togehter with\nsome meta information.",
        "additionalProperties": false,
        "properties": {
          "Project": {
            "description": "The project for which this part of the project configuration (the\nnotification templates) was requested.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "IsShared": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is shared with\na different project."
          },
          "IsOwned": {
            "type": "boolean",
            "description": "Indicates whether the project configuration is owned by the\nproject for which this part of the configuration was requested."
          },
          "OwningProject": {
            "description": "The project which owns the project configuration. When the project\nconfiguration is shared, the project configuration might not be owned by the project for\nwhich this part of the project configuration was requested. This info can be null if you\nare not allowed to access the owning project.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdName"
              }
            ]
          },
          "Templates": {
            "type": "array",
            "description": "The notification templates.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiProjectNotificationTemplate"
            }
          }
        }
      },
      "ApiProjectNotificationTemplate": {
        "type": "object",
        "description": "Represents a single notification template in a project",
        "additionalProperties": false,
        "properties": {
          "Subject": {
            "type": "string",
            "description": "Subject line pattern ",
            "nullable": true
          },
          "Body": {
            "type": "string",
            "description": "Email body pattern (html)",
            "nullable": true
          },
          "CultureName": {
            "type": "string",
            "description": "Language of this template (to be used for expanding values like e.g. item type).\nIt is expected that all templates in a project are configured with same language. \nAccepted values are \"en-GB\" and \"de-DE\".",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "Id of this notification template. ",
            "format": "int32"
          },
          "Type": {
            "description": "Specifies the type of the notification",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectNotificationType"
              }
            ]
          },
          "MaxNameLength": {
            "type": "integer",
            "description": "Specifies maximum length of item's name when included in Subject line. \nIf actual name is longer than this value then it is cut off with \"...\"",
            "format": "int32"
          }
        }
      },
      "ApiProjectNotificationType": {
        "type": "string",
        "description": "The type of notification.\r\nThis enum has the following values:\r\n  - `BaseObjectChangedProperties` Any change of base object property.\r\n  - `BaseObjectChangedStatus` Base object's status field has changed\r\n  - `BaseObjectCreated` Base object has been created. \r\n  - `BaseObjectDeleted` Base object has been deleted. \r\n  - `BaseObjectMoved` Base object has been moved between folders. \r\n",
        "x-enumNames": [
          "BaseObjectChangedProperties",
          "BaseObjectChangedStatus",
          "BaseObjectCreated",
          "BaseObjectMoved",
          "BaseObjectDeleted"
        ],
        "enum": [
          "BaseObjectChangedProperties",
          "BaseObjectChangedStatus",
          "BaseObjectCreated",
          "BaseObjectMoved",
          "BaseObjectDeleted"
        ]
      },
      "ApiReportOptions": {
        "type": "object",
        "description": "Represents report options.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The report's name.",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "description": "The report's color.",
            "nullable": true
          },
          "PluginCode": {
            "type": "string",
            "description": "Code of report plugin to nbe used (if any)",
            "nullable": true
          },
          "AllowedOptions": {
            "type": "array",
            "description": "List of allowed options.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptions"
            }
          },
          "Parameters": {
            "type": "array",
            "description": "Report parameters (if any defined).",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiReportParameter"
            }
          }
        }
      },
      "ApiBaseObjectReportAllowedOptions": {
        "type": "object",
        "description": "Represents the report allowed options.\nPlease note this model represent options as set by user when editing report options. \nPlease do not confuse with so called \"actual\" report options, used when user generates the report. \nThe main difference is that allowed options contain three-state values: always/user decides/never\nwhilst actual options contain the actual selection: true/false.",
        "additionalProperties": false,
        "properties": {
          "IncludeDescription": {
            "description": "Option, include description.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludePictures": {
            "description": "Option, include pictures.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "AllowToShowHideDetails": {
            "type": "boolean",
            "description": "Option, show details."
          },
          "IncludeHistory": {
            "description": "Option, include history.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludeAttachments": {
            "description": "Option, include attachments.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedDefects": {
            "description": "Option, show related defects.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedRequirements": {
            "description": "Option, show related requirements.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedTestCases": {
            "description": "Option, show related test cases.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedTestScenarios": {
            "description": "Option, show related test scenarios.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludeJiraItems": {
            "description": "Option, show related jira issues.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ItemType": {
            "description": "The type of the item.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "Path": {
            "type": "array",
            "description": "The path of the options.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          },
          "Filter": {
            "description": "The filter.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFilter"
              }
            ]
          },
          "DataAllowed": {
            "description": "Indicates whether current user is able to see data on this level. ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiAllowedOption": {
        "type": "string",
        "description": "Represents possible values for the report option.\r\nThis enum has the following values:\r\n  - `AlwaysFalse` Always false.\r\n  - `AlwaysTrue` Always true.\r\n  - `AskUser` Ask user.\r\n",
        "x-enumNames": [
          "AskUser",
          "AlwaysTrue",
          "AlwaysFalse"
        ],
        "enum": [
          "AskUser",
          "AlwaysTrue",
          "AlwaysFalse"
        ]
      },
      "ApiFilter": {
        "type": "object",
        "description": "Represents the filter.",
        "additionalProperties": false,
        "properties": {
          "Expression": {
            "description": "The Expression of the filter.",
            "nullable": true
          },
          "DisplayText": {
            "type": "string",
            "description": "The human readable text of the expression.",
            "nullable": true
          }
        }
      },
      "ApiReportParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportParameterValue"
          },
          {
            "type": "object",
            "description": "Represents a report parameter.",
            "additionalProperties": false,
            "properties": {
              "Description": {
                "type": "string",
                "description": "Parameter description ",
                "nullable": true
              },
              "Type": {
                "description": "Type of the parameter",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportParameterType"
                  }
                ]
              },
              "Visible": {
                "type": "boolean",
                "description": "Indicates whether parameter should is visible for end users"
              },
              "MultiValue": {
                "type": "boolean",
                "description": "Indicates whether parameter is multi-value i.e. the value is an array of values instead of single one"
              }
            }
          }
        ]
      },
      "ApiReportParameterType": {
        "type": "string",
        "description": "Report parameter types\r\nThis enum has the following values:\r\n  - `Boolean` Boolean\r\n  - `Date` Date\r\n  - `Guid` Guid\r\n  - `Number16` Short number (16 bit)\r\n  - `Number32` Number (32 bit)\r\n  - `Number64` Long number (64 bit)\r\n  - `NumberDecimal` Decimal number\r\n  - `NumberDouble` Double floating number\r\n  - `NumberFloat` Floating number\r\n  - `String` String\r\n",
        "x-enumNames": [
          "String",
          "Date",
          "Number16",
          "Number32",
          "Number64",
          "NumberFloat",
          "NumberDouble",
          "NumberDecimal",
          "Boolean",
          "Guid"
        ],
        "enum": [
          "String",
          "Date",
          "Number16",
          "Number32",
          "Number64",
          "NumberFloat",
          "NumberDouble",
          "NumberDecimal",
          "Boolean",
          "Guid"
        ]
      },
      "ApiReportParameterValue": {
        "type": "object",
        "description": "Represents a value of report parameter.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Internal name of the parameter (key)",
            "nullable": true
          },
          "Value": {
            "description": "Value of this parameter (depends on Type). \nWhen loading report options this value represents default value. ",
            "nullable": true
          }
        }
      },
      "ApiReportCreateRequest": {
        "type": "object",
        "description": "Represent the report to be created.\nNote: the report layout is not included here (report is created with default layout).",
        "additionalProperties": false,
        "required": [
          "ProjectId",
          "Options"
        ],
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "Id of the project where report should be created.",
            "format": "int32",
            "maximum": 2147483647.0,
            "minimum": 1.0
          },
          "Options": {
            "description": "Report options.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportOptionsNew"
              }
            ]
          }
        }
      },
      "ApiReportOptionsNew": {
        "type": "object",
        "description": "Represents new report options.",
        "additionalProperties": false,
        "required": [
          "Name",
          "Color",
          "AllowedOptions"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The report's name.",
            "minLength": 1
          },
          "Color": {
            "type": "string",
            "description": "The report's color.\nAllowed are only predefined colors, for more information see: [Get predefined colors](#operation/System_GetColors).",
            "minLength": 1
          },
          "PluginCode": {
            "type": "string",
            "description": "Code of report plugin to be used (if any).",
            "nullable": true
          },
          "AllowedOptions": {
            "type": "array",
            "description": "List of allowed options.",
            "items": {
              "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
            }
          }
        }
      },
      "ApiBaseObjectReportAllowedOptionsUpdate": {
        "type": "object",
        "discriminator": {
          "propertyName": "ItemType",
          "mapping": {
            "Defect": "#/components/schemas/ApiDefectReportAllowedOptionsUpdate",
            "Requirement": "#/components/schemas/ApiRequirementReportAllowedOptionsUpdate",
            "TestCase": "#/components/schemas/ApiTestCaseReportAllowedOptionsUpdate",
            "TestScenario": "#/components/schemas/ApiTestScenarioReportAllowedOptionsUpdate"
          }
        },
        "description": "Represents the update information for base report allowed options.\nPlease note this model represent options as set by user when editing report options. \nPlease do not confuse with so called \"actual\" report options, used when user generates the report. \nThe main difference is that allowed options contain three-state values: always/user decides/never\nwhilst actual options contain the actual selection: true/false.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "ItemType"
        ],
        "properties": {
          "IncludeDescription": {
            "description": "Option, include description.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludePictures": {
            "description": "Option, include pictures.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "AllowToShowHideDetails": {
            "type": "boolean",
            "description": "Option, show details."
          },
          "IncludeHistory": {
            "description": "Option, include history.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludeAttachments": {
            "description": "Option, include attachments.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedDefects": {
            "description": "Option, show related defects.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedRequirements": {
            "description": "Option, show related requirements.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedTestCases": {
            "description": "Option, show related test cases.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "ShowRelatedTestScenarios": {
            "description": "Option, show related test scenarios.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "IncludeJiraItems": {
            "description": "Option, show related jira issues.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAllowedOption"
              }
            ]
          },
          "Path": {
            "type": "array",
            "description": "The path of the options.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          },
          "Filter": {
            "description": "The updated filter.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFilterUpdate"
              }
            ]
          },
          "ItemType": {
            "type": "string"
          }
        }
      },
      "ApiDefectReportAllowedOptionsUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
          },
          {
            "type": "object",
            "description": "Represents the defect allowed options update.",
            "additionalProperties": false,
            "properties": {
              "IncludeRelatedExecutions": {
                "description": "Option, include related executions.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiRequirementReportAllowedOptionsUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
          },
          {
            "type": "object",
            "description": "Represents the requirement allowed options update.",
            "additionalProperties": false
          }
        ]
      },
      "ApiTestCaseReportAllowedOptionsUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
          },
          {
            "type": "object",
            "description": "Represents the test case allowed options update.",
            "additionalProperties": false,
            "properties": {
              "IncludeTestSteps": {
                "description": "Option, include test steps.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              },
              "IncludeExecutions": {
                "description": "Option, include executions.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              },
              "IncludeTestData": {
                "description": "Option, include test data.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestScenarioReportAllowedOptionsUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
          },
          {
            "type": "object",
            "description": "Represents the test scenario allowed options update.",
            "additionalProperties": false,
            "properties": {
              "IncludeTestJobs": {
                "description": "Option, include test jobs.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              },
              "IncludeExecutions": {
                "description": "Option, include executions.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAllowedOption"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportDefinitionPatchCollectionResponse": {
        "type": "object",
        "description": "Represent the response for the report definition patch collection operation.",
        "x-abstract": true,
        "additionalProperties": false
      },
      "ApiReportDefinitionPatchCollectionOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "Copy": "#/components/schemas/ApiReportDefinitionPatchCopyCollectionOperation"
          }
        },
        "description": "Represents data required to execute report definition-modify collection operation. \nThere are multiple project modify operations supported - see ApiReportDefinitionPatchCollectionTypes. \nDepending on the type the actual properties can differ. See subclasses for details. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiReportDefinitionPatchCopyCollectionOperation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportDefinitionPatchCollectionOperation"
          },
          {
            "type": "object",
            "description": "Represent the necessary information to copy a report definition.",
            "additionalProperties": false,
            "properties": {
              "ReportDefinitionId": {
                "type": "integer",
                "description": "The id of the report definition.",
                "format": "int32"
              },
              "TargetProjectId": {
                "type": "integer",
                "description": "The id of the target project.",
                "format": "int32"
              },
              "NewName": {
                "type": "string",
                "description": "The new name for the report definition, if empty the old name will be kept.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiReportOptionsUpdate": {
        "type": "object",
        "description": "Represents updated report options.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The report's name.",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "description": "The report's color.\nAllowed are only predefined colors, for more information see: [Get predefined colors](#operation/System_GetColors).",
            "nullable": true
          },
          "PluginCode": {
            "type": "string",
            "description": "Code of report plugin to be used (if any).",
            "nullable": true
          },
          "AllowedOptions": {
            "type": "array",
            "description": "List of allowed options. Include options for all desired object types. \nObject types not found will be removed from report.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiBaseObjectReportAllowedOptionsUpdate"
            }
          }
        }
      },
      "ApiReportDefinitionPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchType",
          "mapping": {
            "Publish": "#/components/schemas/ApiReportDefinitionPatchPublish",
            "Unpublish": "#/components/schemas/ApiReportDefinitionPatchUnpublish"
          }
        },
        "description": "Represents the patch request for report definition.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchType"
        ],
        "properties": {
          "PatchType": {
            "type": "string"
          }
        }
      },
      "ApiReportDefinitionPatchPublish": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportDefinitionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the report definition publish request.",
            "additionalProperties": false
          }
        ]
      },
      "ApiReportDefinitionPatchUnpublish": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportDefinitionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the report definition unpublish request.",
            "additionalProperties": false
          }
        ]
      },
      "ApiReportPrintoutRequestFile": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequest"
          },
          {
            "type": "object",
            "discriminator": {
              "propertyName": "FileType",
              "mapping": {
                "Pdf": "#/components/schemas/ApiReportPrintoutRequestPdf",
                "Html": "#/components/schemas/ApiReportPrintoutRequestHtml",
                "Mht": "#/components/schemas/ApiReportPrintoutRequestMht",
                "Rtf": "#/components/schemas/ApiReportPrintoutRequestRtf",
                "Xls": "#/components/schemas/ApiReportPrintoutRequestXls",
                "Xlsx": "#/components/schemas/ApiReportPrintoutRequestXlsx",
                "Csv": "#/components/schemas/ApiReportPrintoutRequestCsv",
                "Text": "#/components/schemas/ApiReportPrintoutRequestText",
                "Image": "#/components/schemas/ApiReportPrintoutRequestImage",
                "Docx": "#/components/schemas/ApiReportPrintoutRequestDocx"
              }
            },
            "description": "Contains data required to generate (and download) a report printout as a file.",
            "additionalProperties": false,
            "required": [
              "FileType"
            ],
            "properties": {
              "FileType": {
                "description": "Type of report file to be generated.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportFileType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportFileType": {
        "type": "string",
        "description": "Type of exported report file.\r\nThis enum has the following values:\r\n  - `Csv` CSV file.\r\n  - `Docx` DOCX file.\r\n  - `Html` HTML file.\r\n  - `Image` Image file.\r\n  - `Mht` MHT file.\r\n  - `Pdf` PDF file.\r\n  - `Rtf` RTF file.\r\n  - `Text` Text file.\r\n  - `Xls` XLS file.\r\n  - `Xlsx` XLSX file.\r\n",
        "x-enumNames": [
          "Pdf",
          "Html",
          "Mht",
          "Rtf",
          "Xls",
          "Xlsx",
          "Csv",
          "Text",
          "Image",
          "Docx"
        ],
        "enum": [
          "Pdf",
          "Html",
          "Mht",
          "Rtf",
          "Xls",
          "Xlsx",
          "Csv",
          "Text",
          "Image",
          "Docx"
        ]
      },
      "ApiReportPrintoutRequest": {
        "type": "object",
        "description": "Contains data required to generate a report printout.",
        "additionalProperties": false,
        "properties": {
          "ReportId": {
            "type": "integer",
            "description": "ID of the report to generate.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "description": "Id of the project where data (and report is located).",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "Id of the folder (zero means root folder).",
            "format": "int32"
          },
          "Recursive": {
            "type": "boolean",
            "description": "If true, the report contains includes data from selected folder and all folders below.\nIf false generated report contains data only from selected folder."
          },
          "ReportOptions": {
            "type": "array",
            "description": "Flat list of report options for corresponding levels (level is identified by Path property).\nDepending on item type the list of options varies (see subclasses of ApiBaseObjectReportOptions).",
            "items": {
              "$ref": "#/components/schemas/ApiBaseObjectReportOptions"
            }
          },
          "IncludeArchived": {
            "type": "boolean",
            "description": "If true the report includes archived data as well."
          },
          "RelatedProjects": {
            "type": "array",
            "description": "Can be null. If not null then contains list of \"related projects\" (project sharing the same template\nas \"main\" project, specified in ProjectId) to fetch data from. Please note it make no sense\nto use FolderId other than zero in case when RelatedProjects are specified.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ParameterValues": {
            "type": "array",
            "description": "Actual value for report parameters.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiReportParameterValue"
            }
          }
        }
      },
      "ApiBaseObjectReportOptions": {
        "type": "object",
        "discriminator": {
          "propertyName": "ItemType",
          "mapping": {
            "Defect": "#/components/schemas/ApiDefectReportOptions",
            "Requirement": "#/components/schemas/ApiRequirementReportOptions",
            "TestCase": "#/components/schemas/ApiTestCaseReportOptions",
            "TestScenario": "#/components/schemas/ApiTestScenarioReportOptions"
          }
        },
        "description": "Contains options affecting report generation on a given level (see Path property).\nPlease note this model represent options as set by user during report generation. \nPlease do not confuse with so called \"allowed\" report options \n(the main difference is that allowed options contain three-state values: always/user decides/never\nwhilst actual options contain the actual selection: true/false).",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "ItemType"
        ],
        "properties": {
          "Path": {
            "type": "array",
            "description": "The path of the options.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          },
          "Filter": {
            "description": "The filter.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFilterUpdate"
              }
            ]
          },
          "IncludeDescription": {
            "type": "boolean",
            "description": "Option, include description."
          },
          "IncludePictures": {
            "type": "boolean",
            "description": "Option, include pictures."
          },
          "ShowDetails": {
            "type": "boolean",
            "description": "Option, show details."
          },
          "IncludeHistory": {
            "type": "boolean",
            "description": "Option, include history."
          },
          "IncludeAttachments": {
            "type": "boolean",
            "description": "Option, include attachments."
          },
          "IncludeJiraItems": {
            "type": "boolean",
            "description": "Option, include attachments."
          },
          "ShowRelatedDefects": {
            "type": "boolean",
            "description": "Option, show related defects."
          },
          "ShowRelatedRequirements": {
            "type": "boolean",
            "description": "Option, show related requirements."
          },
          "ShowRelatedTestCases": {
            "type": "boolean",
            "description": "Option, show related test cases."
          },
          "ShowRelatedTestScenarios": {
            "type": "boolean",
            "description": "Option, show related test scenarios."
          },
          "ItemType": {
            "type": "string"
          }
        }
      },
      "ApiDefectReportOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportOptions"
          },
          {
            "type": "object",
            "description": "A type-specific version of report options affecting report generation on a given level.",
            "additionalProperties": false,
            "properties": {
              "IncludeRelatedExecutions": {
                "type": "boolean",
                "description": "Option, include related executions."
              }
            }
          }
        ]
      },
      "ApiRequirementReportOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportOptions"
          },
          {
            "type": "object",
            "description": "A type-specific version of report options affecting report generation on a given level.",
            "additionalProperties": false
          }
        ]
      },
      "ApiTestCaseReportOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportOptions"
          },
          {
            "type": "object",
            "description": "A type-specific version of report options affecting report generation on a given level.",
            "additionalProperties": false,
            "properties": {
              "IncludeTestSteps": {
                "type": "boolean",
                "description": "Option, include test steps."
              },
              "IncludeExecutions": {
                "type": "boolean",
                "description": "Option, include executions."
              },
              "IncludeTestData": {
                "type": "boolean",
                "description": "Option, include test data."
              }
            }
          }
        ]
      },
      "ApiTestScenarioReportOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBaseObjectReportOptions"
          },
          {
            "type": "object",
            "description": "A type-specific version of report options affecting report generation on a given level.",
            "additionalProperties": false,
            "properties": {
              "IncludeTestJobs": {
                "type": "boolean",
                "description": "Option, include test jobs."
              },
              "IncludeExecutions": {
                "type": "boolean",
                "description": "Option, include executions."
              }
            }
          }
        ]
      },
      "ApiReportPrintoutRequestPdf": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "PdfOptions": {
                "description": "Pdf specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportPdfPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportPdfPrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "PageRange": {
            "type": "string",
            "description": "The page range to be exported. Ranges are comma separated. e.g. â1,4,7-10â.\nInvalid page numbers are ignored, if all page numbers are invalid, all pages are exported.",
            "default": "",
            "nullable": true
          },
          "RasterizationResolution": {
            "type": "integer",
            "description": "The resolution (in DPI) used to rasterize vector images.",
            "format": "int32",
            "default": 96
          },
          "ConvertImagesToJpeg": {
            "type": "boolean",
            "description": "When True, contained images will be converted to jpg.",
            "default": true
          },
          "ShowPrintDialogOnOpen": {
            "type": "boolean",
            "description": "When true the print dialog is displayed on opening the pdf",
            "default": false
          },
          "NeverEmbeddedFonts": {
            "type": "string",
            "description": "Semicolon delimited list of fonts never to embed in the pdf",
            "default": "",
            "nullable": true
          },
          "ExportEditingFieldsToAcroForms": {
            "type": "boolean",
            "description": "Specifies whether to convert editable fields to AcroForms fields on PDF export.",
            "default": false
          },
          "ImageQuality": {
            "description": "the quality of images in the resulting PDF file.",
            "default": "Highest",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfImageQuality"
              }
            ]
          },
          "PdfACompatibility": {
            "description": "Document compatibility with the PDF/A specification",
            "default": "None",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfACompatibility"
              }
            ]
          },
          "PasswordSecurityOptions": {
            "description": "PDF security options of the document, which require specifying a password.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfPasswordSecurityOptions"
              }
            ]
          },
          "DocumentOptions": {
            "description": "Document Properties of the created PDF file",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPdfPrintoutDocumentOptions"
              }
            ]
          }
        }
      },
      "ApiPdfImageQuality": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `High` \r\n  - `Highest` \r\n  - `Low` \r\n  - `Lowest` \r\n  - `Medium` \r\n",
        "x-enumNames": [
          "Lowest",
          "Low",
          "Medium",
          "High",
          "Highest"
        ],
        "enum": [
          "Lowest",
          "Low",
          "Medium",
          "High",
          "Highest"
        ]
      },
      "ApiPdfACompatibility": {
        "type": "string",
        "description": "PDF/A compatibility mode of a document.\r\nThis enum has the following values:\r\n  - `None` The document is not PDF/A-compatible and supports the ISO 32000-1:2005 specification.\r\n  - `PdfA1a` The document supports the PDF/A-1a (Accessible) specification and contains tags\nthat assistive technologies can use.\n            \r\n  - `PdfA1b` The document supports the PDF/A-1b (ISO 19005-1) specification.\n            \r\n  - `PdfA2a` The document supports the PDF/A-2a (Accessible) specification and contains tags\nthat assistive technologies can use.\n            \r\n  - `PdfA2b` The document supports the PDF/A-2b (ISO 19005-2:2011) specification.\n            \r\n  - `PdfA3a` The document supports the PDF/A-3a (Accessible) specification and contains tags\nthat assistive technologies can use.\n            \r\n  - `PdfA3b` The document supports the PDF/A-3b (ISO 19005-3:2012) specification.\n            \r\n",
        "x-enumNames": [
          "None",
          "PdfA1a",
          "PdfA1b",
          "PdfA2a",
          "PdfA2b",
          "PdfA3a",
          "PdfA3b"
        ],
        "enum": [
          "None",
          "PdfA1a",
          "PdfA1b",
          "PdfA2a",
          "PdfA2b",
          "PdfA3a",
          "PdfA3b"
        ]
      },
      "ApiPdfPasswordSecurityOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "OpenPassword": {
            "type": "string",
            "description": "password for opening the exported PDF document.",
            "default": "",
            "nullable": true
          },
          "EncryptionLevel": {
            "description": "The algorithm used to encrypt PDF content.",
            "default": "AES128",
            "oneOf": [
              {
                "$ref": "#/components/schemas/PdfEncryptionLevel"
              }
            ]
          },
          "PermissionsPassword": {
            "type": "string",
            "description": "the PDF permissions password for the document.",
            "default": "",
            "nullable": true
          },
          "PermissionsOptions": {
            "description": "Provides access to the PDF permission options of the document.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfPermissionsOptions"
              }
            ]
          }
        }
      },
      "PdfEncryptionLevel": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `AES128` \r\n  - `AES256` \r\n  - `ARC4` \r\n",
        "x-enumNames": [
          "AES128",
          "AES256",
          "ARC4"
        ],
        "enum": [
          "AES128",
          "AES256",
          "ARC4"
        ]
      },
      "ApiPdfPermissionsOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ChangingPermissions": {
            "description": "Permissions for changing the exported PDF document",
            "default": "None",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfChangingPermissions"
              }
            ]
          },
          "PrintingPermissions": {
            "description": "Permissions for printing the exported PDF document",
            "default": "None",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPdfPrintingPermissions"
              }
            ]
          },
          "EnableScreenReaders": {
            "type": "boolean",
            "description": "Permissions for screen readers access to the exported PDF document",
            "default": true
          },
          "EnableCopying": {
            "type": "boolean",
            "description": "Permissions for copying the content of the exported PDF document.",
            "default": false
          }
        }
      },
      "ApiPdfChangingPermissions": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `AnyExceptExtractingPages` Permits any changes for the PDF document, except extracting its pages.\r\n  - `CommentingFillingSigning` Permits commenting, filling in form fields, and signing existing signature fields for the PDF document.\r\n  - `FillingSigning` Permits filling in form fields and signing existing signature fields for the PDF document.\r\n  - `InsertingDeletingRotating` Permits inserting, deleting and rotating the PDF documentâs pages.\r\n  - `None` No changes are permitted to the PDF document.\r\n",
        "x-enumNames": [
          "None",
          "InsertingDeletingRotating",
          "FillingSigning",
          "CommentingFillingSigning",
          "AnyExceptExtractingPages"
        ],
        "enum": [
          "None",
          "InsertingDeletingRotating",
          "FillingSigning",
          "CommentingFillingSigning",
          "AnyExceptExtractingPages"
        ]
      },
      "ApiPdfPrintingPermissions": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `HighResolution` Permits the PDF documentâs printing in high resolution only\r\n  - `LowResolution` Permits the PDF documentâs printing in low resolution only (150 dpi)\r\n  - `None` Forbids printing of the PDF document\r\n",
        "x-enumNames": [
          "None",
          "LowResolution",
          "HighResolution"
        ],
        "enum": [
          "None",
          "LowResolution",
          "HighResolution"
        ]
      },
      "ApiReportPdfPrintoutDocumentOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Author": {
            "type": "string",
            "description": "Author property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Application": {
            "type": "string",
            "description": "Application property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Subject property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Keywords": {
            "type": "string",
            "description": "Keywords property of the resulting document",
            "default": "",
            "nullable": true
          }
        }
      },
      "ApiReportPrintoutRequestHtml": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HtmlOptions": {
                "description": "Html specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportHtmlPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportHtmlPrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ExportMode": {
            "description": "Specifies whether the source is exported as a single page or pages seperated by page borders. ",
            "default": "SingleFile",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutExportMode"
              }
            ]
          },
          "PageRange": {
            "type": "string",
            "description": "The page range to be exported. Ranges are comma separated. e.g. â1,4,7-10â.\nInvalid page numbers are ignored, if all page numbers are invalid, all pages are exported.",
            "default": "",
            "nullable": true
          },
          "RasterizationResolution": {
            "type": "integer",
            "description": "The resolution (in DPI) used to rasterize vector images.",
            "format": "int32",
            "default": 96
          },
          "PageBorderColor": {
            "type": "string",
            "description": "Color to be used (optional). HEX RGB string e.g. \"0xffaabc\"",
            "nullable": true
          },
          "PageBorderWidth": {
            "type": "integer",
            "description": "Width (in pixels) of page borders when a document is exported to HTML page-by-page.",
            "format": "int32",
            "default": 1
          },
          "Title": {
            "type": "string",
            "description": "Title of the created HTML file",
            "default": "Document",
            "nullable": true
          },
          "TableLayout": {
            "type": "boolean",
            "description": "Determines whether to use the table or non-table layout in the resulting HTML file.",
            "default": true
          },
          "UseHRefHyperlinks": {
            "type": "boolean",
            "description": "Specifies whether or not the document navigation is implemented by using scripts.",
            "default": false
          },
          "AllowJSURLs": {
            "type": "boolean",
            "description": "Specifies whether the JavaScript code can be placed in URLs in the resulting HTML document.",
            "default": false
          },
          "RemoveSecondarySymbols": {
            "type": "boolean",
            "description": "Specifies Gets or sets a value indicating whether secondary symbols should be removed from the resulting HTML file, to reduce its size. ",
            "default": false
          },
          "ExportWatermarks": {
            "type": "boolean",
            "description": "Specifies whether to export watermarks to HTML along with the rest of the document content.",
            "default": true
          },
          "CharacterSet": {
            "type": "string",
            "description": "A Stringï»¿ representing the encoding name set in the HTML file (e.g. \"utf-8\").",
            "default": "utf-8",
            "nullable": true
          }
        }
      },
      "ApiReportPrintoutExportMode": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `SingleFile` \r\n  - `SingleFilePageByPage` \r\n",
        "x-enumNames": [
          "SingleFile",
          "SingleFilePageByPage"
        ],
        "enum": [
          "SingleFile",
          "SingleFilePageByPage"
        ]
      },
      "ApiReportPrintoutRequestMht": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "MhtOptions": {
                "description": "Mht specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportMhtPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportMhtPrintoutOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportHtmlPrintoutOptions"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiReportPrintoutRequestRtf": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "RtfOptions": {
                "description": "Rtf specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportRtfPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportRtfPrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ExportMode": {
            "description": "Specifies whether the source is exported as a single page or pages seperated by page borders. ",
            "default": "SingleFile",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutExportMode"
              }
            ]
          },
          "PageRange": {
            "type": "string",
            "description": "The page range to be exported. Ranges are comma separated. e.g. â1,4,7-10â.\nInvalid page numbers are ignored, if all page numbers are invalid, all pages are exported.",
            "default": "",
            "nullable": true
          },
          "RasterizationResolution": {
            "type": "integer",
            "description": "The resolution (in DPI) used to rasterize vector images.",
            "format": "int32",
            "default": 96
          },
          "ExportPageBreaks": {
            "type": "boolean",
            "description": "True if pagebreaks should be included in the export",
            "default": true
          },
          "ExportWatermarks": {
            "type": "boolean",
            "description": "True if watermarks should be included in the export",
            "default": true
          }
        }
      },
      "ApiReportPrintoutRequestXls": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "XlsOptions": {
                "description": "Xls specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportXlsPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportXlsPrintoutOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportXlsxPrintoutOptions"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Suppress256ColumnsWarning": {
                "type": "boolean",
                "description": "Whether to suppress the exception that raises when trying to export a document to an XLS file with more than 256 columns. ",
                "default": false
              },
              "Suppress65536RowsWarning": {
                "type": "boolean",
                "description": "Whether to suppress the exception that raises when trying to export a document to an XLS file with more than 65536 rows.",
                "default": false
              },
              "WorkbookColorPaletteCompliance": {
                "description": "Specifies the color palette compatibility mode with different workbooks versions.",
                "default": "ReducePaletteForExactColors",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportWorkbookColorPaletteCompliance"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportWorkbookColorPaletteCompliance": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `AdjustColorsToDefaultPalette` Degrade the color values to match the 56 standard colors of the default workbook palette.\r\n  - `ReducePaletteForExactColors` Keep the original color values, but include only the first 56 colors into the palette.\r\n",
        "x-enumNames": [
          "AdjustColorsToDefaultPalette",
          "ReducePaletteForExactColors"
        ],
        "enum": [
          "AdjustColorsToDefaultPalette",
          "ReducePaletteForExactColors"
        ]
      },
      "ApiReportXlsxPrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ExportMode": {
            "description": "Specifies whether the source is exported as a single worksheet or individual worksheets. ",
            "default": "SingleFile",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutExportMode"
              }
            ]
          },
          "PageRange": {
            "type": "string",
            "description": "The page range to be exported. Ranges are comma separated. e.g. â1,4,7-10â.\nInvalid page numbers are ignored, if all page numbers are invalid, all pages are exported.",
            "default": "",
            "nullable": true
          },
          "RasterizationResolution": {
            "type": "integer",
            "description": "The resolution (in DPI) used to rasterize vector images.",
            "format": "int32",
            "default": 96
          },
          "TextExportMode": {
            "description": "Whether the cells in the resulting execl document should use the same formatting as the original document",
            "default": "Value",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutTextExportMode"
              }
            ]
          },
          "ExportHyperlinks": {
            "type": "boolean",
            "description": "Whether hyperlinks should be exported",
            "default": true
          },
          "RawDataMode": {
            "type": "boolean",
            "description": "Enables the mode that produces simple tabular data without graphic elements, style and appearance settings.",
            "default": false
          },
          "SheetName": {
            "type": "string",
            "description": "Name of the sheet in the created excel document",
            "default": "Sheet",
            "nullable": true
          },
          "ShowGridLines": {
            "type": "boolean",
            "description": "Whether worksheet gridlines are visible",
            "default": false
          },
          "RasterizeImages": {
            "type": "boolean",
            "description": "If vector images should be rasterized to the corresponding document format.",
            "default": true
          },
          "FitToPrintedPageWidth": {
            "type": "boolean",
            "description": "If the output document should be fit to the page width when printed. ",
            "default": false
          },
          "FitToPrintedPageHeight": {
            "type": "boolean",
            "description": "If the output document should be fit to the page height when printed. ",
            "default": false
          },
          "IgnoreErrors": {
            "description": "Lists the document errors that should be ignored by Excel.",
            "default": "None",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiXlsIgnoreErrors"
              }
            ]
          },
          "RightToLeftDocument": {
            "description": "If the layout of the resulting XLS document should be aligned to support locales using right-to-left fonts.",
            "default": "Default",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutDefaultBoolean"
              }
            ]
          },
          "EncryptionOptions": {
            "description": "XLS and XLSX file encryption options",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportXlPrintoutEncryptionOptions"
              }
            ]
          },
          "DocumentOptions": {
            "description": "XLS or XLSX fileâs Document Properties.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportXlPrintoutDocumentOptions"
              }
            ]
          }
        }
      },
      "ApiReportPrintoutTextExportMode": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Text` \r\n  - `Value` \r\n",
        "x-enumNames": [
          "Text",
          "Value"
        ],
        "enum": [
          "Text",
          "Value"
        ]
      },
      "ApiXlsIgnoreErrors": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `None` No document errors are ignored in a resulting Excel file.\r\n  - `NumberStoredAsText` Values stored as text are ignored in a resulting Excel file.\r\n",
        "x-enumNames": [
          "None",
          "NumberStoredAsText"
        ],
        "enum": [
          "None",
          "NumberStoredAsText"
        ]
      },
      "ApiReportPrintoutDefaultBoolean": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Default` \r\n  - `False` \r\n  - `True` \r\n",
        "x-enumNames": [
          "True",
          "False",
          "Default"
        ],
        "enum": [
          "True",
          "False",
          "Default"
        ]
      },
      "ApiReportXlPrintoutEncryptionOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Password": {
            "type": "string",
            "description": "Password to open the file",
            "default": "",
            "nullable": true
          },
          "Type": {
            "description": "Specifies the applied encryption mechanism.",
            "default": "Strong",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportXlsPrintoutEncryptionType"
              }
            ]
          }
        }
      },
      "ApiReportXlsPrintoutEncryptionType": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Compatible` \r\n  - `Strong` \r\n",
        "x-enumNames": [
          "Strong",
          "Compatible"
        ],
        "enum": [
          "Strong",
          "Compatible"
        ]
      },
      "ApiReportXlPrintoutDocumentOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Author": {
            "type": "string",
            "description": "Author property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Application": {
            "type": "string",
            "description": "Application property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Subject property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Tags": {
            "type": "string",
            "description": "Tags property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "description": "Category property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments property of the resulting excel file",
            "default": "",
            "nullable": true
          },
          "Company": {
            "type": "string",
            "description": "Company property of the resulting excel file",
            "default": "",
            "nullable": true
          }
        }
      },
      "ApiReportPrintoutRequestXlsx": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "XlsxOptions": {
                "description": "Xlsx specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportXlsxPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportPrintoutRequestCsv": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "CsvOptions": {
                "description": "Csv specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportCsvPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportCsvPrintoutOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportTextPrintoutOptions"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "SkipEmptyRows": {
                "type": "boolean",
                "description": "If empty rows should be skipped",
                "default": true
              },
              "SkipEmptyColumns": {
                "type": "boolean",
                "description": "If empty columns should be skipped",
                "default": true
              }
            }
          }
        ]
      },
      "ApiReportTextPrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Encoding": {
            "type": "string",
            "description": "Encoding to be used in printout ",
            "default": "utf-8",
            "nullable": true
          },
          "TextExportMode": {
            "description": "Use the formatting of the data fields in the bound dataset for the cells in the exported document.",
            "default": "Text",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutTextExportMode"
              }
            ]
          },
          "QuoteStrings": {
            "type": "boolean",
            "description": "If a string should be quoted when it contains the seperator",
            "default": true
          },
          "Seperator": {
            "type": "string",
            "description": "The character(s) used to separate elements",
            "default": "\\t",
            "nullable": true
          }
        }
      },
      "ApiReportPrintoutRequestText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "TextOptions": {
                "description": "Text specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportTextPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportPrintoutRequestImage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "ImageOptions": {
                "description": "Image specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportImagePrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportImagePrintoutOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ExportMode": {
            "description": "Specifies whether the source is exported as a single image or individiual pages with borders drawn around them. ",
            "default": "SingleFile",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutExportMode"
              }
            ]
          },
          "PageRange": {
            "type": "string",
            "description": "The page range to be exported. Ranges are comma separated. e.g. â1,4,7-10â.\nInvalid page numbers are ignored, if all page numbers are invalid, all pages are exported.",
            "default": "",
            "nullable": true
          },
          "Resolution": {
            "type": "integer",
            "description": "The resolution (in DPI) ",
            "format": "int32",
            "default": 96
          },
          "PageBorderColor": {
            "type": "string",
            "description": "Color to be used (optional). HEX RGB string e.g. \"0xffaabc\"",
            "nullable": true
          },
          "PageBorderWidth": {
            "type": "integer",
            "description": "Width (in pixels) of page borders when a document is exported to HTML page-by-page.",
            "format": "int32",
            "default": 1
          },
          "Format": {
            "description": "The target image format for the export",
            "default": "png",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiReportPrintoutExportImageType"
              }
            ]
          }
        }
      },
      "ApiReportPrintoutExportImageType": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `gif` \r\n  - `jpeg` \r\n  - `png` \r\n",
        "x-enumNames": [
          "jpeg",
          "png",
          "gif"
        ],
        "enum": [
          "jpeg",
          "png",
          "gif"
        ]
      },
      "ApiReportPrintoutRequestDocx": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportPrintoutRequestFile"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "DocxOptions": {
                "description": "Docx specific options for the printout",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportDocxPrintoutOptions"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiReportDocxPrintoutOptions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiReportRtfPrintoutOptions"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "TableLayout": {
                "type": "boolean",
                "description": "Whether to use the table or frame layout in the resulting DOCX file.",
                "default": false
              },
              "DocumentOptions": {
                "description": "The exported documentâs options",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiReportDocxPrintoutDocumentOptions"
                  }
                ]
              },
              "RasterizeImages": {
                "type": "boolean",
                "description": "If vector images should be rasterized to the corresponding document format.",
                "default": true
              },
              "KeepRowHeight": {
                "type": "boolean",
                "description": "Whether the height of table rows in a resulting document should have fixed values, or adding a new line of text to a cellâs content should increase the row height.",
                "default": false
              }
            }
          }
        ]
      },
      "ApiReportDocxPrintoutDocumentOptions": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Author": {
            "type": "string",
            "description": "Author property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Subject property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Keywords": {
            "type": "string",
            "description": "Keywords property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "description": "Category property of the resulting document",
            "default": "",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments property of the resulting document",
            "default": "",
            "nullable": true
          }
        }
      },
      "ApiEditStatus": {
        "type": "object",
        "description": "Edit status information",
        "additionalProperties": false,
        "properties": {
          "Version": {
            "type": "integer",
            "description": "This field provides information about item version.",
            "format": "int32"
          },
          "EditableInfo": {
            "description": "This field provides information about the item editibale status and if item is locked, about a lock user.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditableInfo"
              }
            ]
          }
        }
      },
      "ApiRequirement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemWithDescription"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HasSubRequirements": {
                "type": "boolean",
                "description": "True if requirement has any sub requirements. "
              }
            }
          }
        ]
      },
      "ApiItemWithDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItem"
          },
          {
            "type": "object",
            "description": "Represents an item with a rich text description.",
            "additionalProperties": false,
            "properties": {
              "Description": {
                "description": "Contains the description of the item in different formats.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiRichText"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemUpdateWithDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemUpdate"
          },
          {
            "type": "object",
            "description": "Specifies the changes to perform on a specific item including its\ndescription.",
            "additionalProperties": false,
            "properties": {
              "Description": {
                "description": "The new description of the item. You must specify exactly one type\nof description.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiRichText"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiItemNewWithDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemNew"
          },
          {
            "type": "object",
            "description": "Contains the necessary data to create a new item including its description.",
            "additionalProperties": false,
            "properties": {
              "Description": {
                "description": "The new description of the item. You must specify exactly one type\nof description.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiRichText"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiSubrequirement": {
        "type": "object",
        "description": "A sub requirement is a child of another requirement. This\nclass contains basic information for the sub requirement.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the sub requirement.",
            "format": "int32"
          },
          "Item": {
            "description": "Further information on the requirement which is attached as a sub\nrequirement. Location and version are currently not provided.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemInfo"
              }
            ]
          },
          "ParentId": {
            "type": "integer",
            "description": "The id of the parent of this sub requirement.",
            "format": "int32"
          },
          "ChildIndex": {
            "type": "integer",
            "description": "The index of this requirement in the list of sub requirements\nof the parent requirement.",
            "format": "int32"
          },
          "Position": {
            "type": "array",
            "description": "This list contains the position of this sub requirement in each level\nof the sub requirement tree of the root requirement. E.g. [4,2]\nmeans that this sub requirement is the 2nd sub requirement of the 4th\nsub requirement of the root requirement.\nThis information is relative to the requirement for which the sub requirements\nwere requested.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "FurtherSubrequirementsCount": {
            "type": "integer",
            "description": "The number of sub requirements of the current sub requirement.",
            "format": "int32"
          },
          "EditableStatus": {
            "description": "The edit status of the current sub requirement. Null means that no information\nregarding the edit status is provided. This sub requirement should not\nbe edited based this information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditableStatus"
              }
            ]
          }
        }
      },
      "ApiSubrequirementsUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Subrequirements": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiSubrequirement"
            }
          }
        }
      },
      "ApiSubrequirementsNew": {
        "type": "object",
        "description": "Contains a list of sub requirements which should be\nadded to the specified the requirement in a single operation.",
        "additionalProperties": false,
        "properties": {
          "Subrequirements": {
            "type": "array",
            "description": "The sub requirements which should be added",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiSubrequirementNew"
            }
          }
        }
      },
      "ApiSubrequirementNew": {
        "type": "object",
        "description": "The information necessary to create a new sub requirement.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the requirement which become the new sub requirement.",
            "format": "int32"
          }
        }
      },
      "ApiSubrequirementUpdate": {
        "type": "object",
        "description": "The information to update in a given sub requirement.",
        "additionalProperties": false,
        "properties": {
          "ChildIndex": {
            "type": "integer",
            "description": "The new child index of the sub requirement.",
            "format": "int32"
          }
        }
      },
      "ApiHistoryEntryRequirement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiHistoryEntry"
          },
          {
            "type": "object",
            "description": "Contains all changes which were done to a requirement in one operation\ntogether with information on when and by whom the requirement has been changed.\nWhen no changes of a given type occurred, the corresponding field in\nthis response will be missing.",
            "additionalProperties": false,
            "properties": {
              "Subrequirements": {
                "description": "The list of changes to the sub requirements of this requirement. Only\nadding or removing of sub requirements is recorded here. For changes\nto the sub requirement itself, check the separate history of the\nsub requirement.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiHistorySubrequirements"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiHistorySubrequirements": {
        "type": "object",
        "description": "The list of changes to the sub requirements of a requirement.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "The list of names of the sub requirements which were added\nto the requirement",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of names of the sub requirements which were removed\nfrom the requirement",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Rearranged": {
            "type": "boolean",
            "description": "True is any subrequirements have been rearranged (i.e. changed their positions). "
          }
        }
      },
      "ApiBatchOperation": {
        "type": "object",
        "description": "Represents a batch operation. A batch operation performs\nthe same change on multiple items.",
        "additionalProperties": false,
        "properties": {
          "Type": {
            "description": "Specifies the type of the batch operation.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiBatchOperationType"
              }
            ]
          },
          "Ids": {
            "type": "array",
            "description": "Specifies the items which should be modified with this batch operation.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiBatchOperationType": {
        "type": "string",
        "description": "The type of batch operation.\r\nThis enum has the following values:\r\n  - `Unlock` Remove any edit locks by the current user on the specified items.\r\n",
        "x-enumNames": [
          "Unlock"
        ],
        "enum": [
          "Unlock"
        ]
      },
      "ApiResetPasswordResult": {
        "type": "object",
        "description": "Provides information about the result of resetting a user's password",
        "additionalProperties": false,
        "properties": {
          "IsSuccess": {
            "type": "boolean",
            "description": "Result about resetting for users"
          },
          "Message": {
            "type": "string",
            "description": "Info about resetting for users",
            "nullable": true
          }
        }
      },
      "ApiResetPasswordUser": {
        "type": "object",
        "description": "Contains info about user who is resetting the password",
        "additionalProperties": false,
        "properties": {
          "Email": {
            "type": "string",
            "description": "User's email",
            "nullable": true
          },
          "Tenant": {
            "type": "string",
            "description": "User's tenant",
            "nullable": true
          }
        }
      },
      "ApiScript": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItem"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiMyUserInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserInfo"
          },
          {
            "type": "object",
            "description": "Contains information regarding the currently logged in\nuser. It contains additional information which is not always\nexposed for users.",
            "additionalProperties": false,
            "properties": {
              "CustomerId": {
                "type": "integer",
                "description": "The id of the current customer.",
                "format": "int32"
              },
              "IsFirstLogin": {
                "type": "boolean",
                "description": "Indicates whether this is the first login to aqua\nby the current user."
              },
              "ServerAdministrator": {
                "type": "boolean",
                "description": "Indicates if the user is server administrator or not."
              },
              "TenantName": {
                "type": "string",
                "description": "The name of the tenant if the current user has one",
                "nullable": true
              },
              "SecureModeHash": {
                "type": "string",
                "description": "The hash required to securely retrieve LaunchDarkly user variations",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiSystemSettings": {
        "type": "object",
        "description": "Contains some server wide settings which might be interesting for\na client.",
        "additionalProperties": false,
        "properties": {
          "CustomizedStrings": {
            "description": "Certain strings like item names can be customized in aqua. These\ncustomized strings can be found here. This is primarily used to\ncorrectly localize UIs.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiCustomizedStrings"
              }
            ]
          },
          "WikiLinksSettings": {
            "description": "Settings for the integration with the aqua wiki.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWikiLinksSettings"
              }
            ]
          },
          "NewsSettings": {
            "description": "Settings related to the aqua news.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNewsSettings"
              }
            ]
          },
          "UseCaptureSettings": {
            "description": "Settings to control capture integration",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiConfigElement"
              }
            ]
          },
          "ServerIdentity": {
            "type": "string",
            "description": "The name of this aqua server. Each aqua server can be configured\nto have a dedicated server name.",
            "nullable": true
          },
          "SoftwareVersion": {
            "type": "string",
            "description": "The version of aqua which this server is running.",
            "nullable": true
          },
          "AttachmentMaxFileSize": {
            "type": "integer",
            "description": "The maximum file size in bytes which is allowed for item attachments",
            "format": "int32"
          },
          "AttachmentMaxFileSizeForUploadUrl": {
            "type": "integer",
            "description": "The maximum file size in bytes which is allowed for item attachments\nwhen the attachment is uploaded using an upload URL.",
            "format": "int64"
          },
          "TestJobsInTestScenarioMaxCount": {
            "type": "integer",
            "description": "The maximum number of test jobs which might be contained in a\nsingle test scenario.",
            "format": "int32"
          },
          "IsEnterpriseModeOn": {
            "type": "boolean",
            "description": "If true, indicates that the aqua installation is running in enterprise mode."
          },
          "OceanModeOn": {
            "type": "boolean",
            "description": "If true, indicates that the aqua is running in ocean mode."
          },
          "ScreenShotMaxFileSize": {
            "type": "integer",
            "description": "The maximum file size in bytes which is allowed for screenshot.",
            "format": "int32"
          },
          "EnableNewUI": {
            "type": "boolean",
            "description": "If true, indicates that client should use new UI features of current release"
          },
          "AllowedAttachmentFileExtensions": {
            "type": "string",
            "description": "Contains a comma-separated list of accepted file extensions. Sample \".png,.jpg,.png\". \nIf string is empty, all files will be accepted.",
            "nullable": true
          },
          "EnableStopWatchForManualExecutions": {
            "type": "boolean",
            "description": "Indicates whether the execution time for manual test executions is tracked\nand the stop watch in FormRunTestJob is enabled.\n            "
          },
          "WL": {
            "type": "string",
            "description": "-",
            "nullable": true
          },
          "MaximumNumberOfAttachedLabels": {
            "type": "integer",
            "description": "Defines the maximum number of attached labels allowed on a single object.",
            "format": "int32"
          },
          "AllowInternalUserAuthentication": {
            "type": "boolean",
            "description": "Whether or not the internal authentication in enabled in aqua."
          }
        }
      },
      "ApiCustomizedStrings": {
        "type": "object",
        "description": "Contains the string which are customized for each server. This is primarily the case\nfor item names which can be customized for each server.",
        "additionalProperties": false,
        "properties": {
          "German": {
            "type": "object",
            "description": "Customized strings which should be used for the German localization.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "English": {
            "type": "object",
            "description": "Customized strings which should be used for the English localization.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiWikiLinksSettings": {
        "type": "object",
        "description": "Contains the necessary settings to create links to the aqua wiki.",
        "additionalProperties": false,
        "properties": {
          "BaseUrls": {
            "type": "object",
            "description": "Contains the base URL of the wiki for the different\nlocales (e.g. en or de).",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ApiNewsSettings": {
        "type": "object",
        "description": "Contains settings related to the aqua news.",
        "additionalProperties": false,
        "properties": {
          "Url": {
            "type": "string",
            "description": "The URL of the news page for aqua.",
            "nullable": true
          }
        }
      },
      "GenericPermissionInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Title": {
            "type": "string",
            "nullable": true
          },
          "GenericPermissionName": {
            "type": "string",
            "nullable": true
          },
          "Group": {
            "type": "string",
            "nullable": true
          },
          "PermissionAll": {
            "$ref": "#/components/schemas/Permission"
          },
          "PermissionAssigned": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Permission"
              }
            ]
          },
          "PermissionOwned": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Permission"
              }
            ]
          },
          "Scope": {
            "$ref": "#/components/schemas/PermissionScope"
          },
          "AllowedFolderLevel": {
            "type": "boolean"
          },
          "RequiredAll": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "RequiredAny": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "LoginClientType": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/AquaClientType"
              }
            ]
          },
          "LicenseOnly": {
            "type": "boolean"
          },
          "PermisionVariants": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PermissionVariant"
            }
          }
        }
      },
      "Permission": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "RQViewContentAll",
          "RQViewDiscussionsAll",
          "RQViewWordExportAll",
          "RQViewWordExportAssigned",
          "RQViewWordExportOwn",
          "RQCreateEditFieldsDescriptionAll",
          "RQCreateEditCommentsAll",
          "RQCreateWordImportAll",
          "RQEditStatusAll",
          "RQEditStatusAssigned",
          "RQEditStatusOwn",
          "RQEditFieldsAll",
          "RQEditFieldsAssigned",
          "RQEditFieldsOwn",
          "RQEditDescriptionAll",
          "RQEditDescriptionAssigned",
          "RQEditDescriptionOwn",
          "RQEditCommentsAll",
          "RQEditCommentsAssigned",
          "RQEditCommentsOwn",
          "RQEditWordImportAll",
          "RQEditWordImportAssigned",
          "RQEditWordImportOwn",
          "RQEditBatchAll",
          "RQDeleteAll",
          "RQDeleteAssigned",
          "RQDeleteOwn",
          "RQMoveInProjectAll",
          "RQMoveInProjectAssigned",
          "RQMoveInProjectOwn",
          "RQMoveBetweenProjectsAll",
          "RQMoveBetweenProjectsAssigned",
          "RQMoveBetweenProjectsOwn",
          "RQCreateDependencyAll",
          "RQDeleteDependencyAll",
          "DFViewContentAll",
          "DFCreateAll",
          "DFEditAll",
          "DFEditAssigned",
          "DFEditOwn",
          "DFEditEnclosuresAll",
          "DFEditEnclosuresOwn",
          "DFDeleteAll",
          "DFDeleteAssigned",
          "DFDeleteOwn",
          "DFDeleteEnclosuresAll",
          "DFDeleteEnclosuresOwn",
          "DFEditBatchAll",
          "DFMoveInProjectAll",
          "DFMoveInProjectAssigned",
          "DFMoveInProjectOwn",
          "DFMoveBetweenProjectsAll",
          "DFMoveBetweenProjectsAssigned",
          "DFMoveBetweenProjectsOwn",
          "DFCreateDependencyAll",
          "DFDeleteDependencyAll",
          "TCViewContentAll",
          "TCCreateEditFieldsDescriptionAll",
          "TCCreateEditVariablesAll",
          "TCCreateEditNestingAll",
          "TCCreateEditTestAutomationAll",
          "TCEditStatusAll",
          "TCEditStatusAssigned",
          "TCEditStatusOwn",
          "TCEditFieldDescriptionAll",
          "TCEditFieldDescriptionAssigned",
          "TCEditFieldDescriptionOwn",
          "TCEditStepsAll",
          "TCEditStepsAssigned",
          "TCEditStepsOwn",
          "TCEditVariablesAll",
          "TCEditVariablesAssigned",
          "TCEditVariablesOwn",
          "TCEditNestingAll",
          "TCEditNestingAssigned",
          "TCEditNestingOwn",
          "TCEditTestAutomationAll",
          "TCEditTestAutomationAssigned",
          "TCEditTestAutomationOwn",
          "TCEditBatchAll",
          "TCDeleteAll",
          "TCDeleteAssigned",
          "TCDeleteOwn",
          "TCMoveInProjectAll",
          "TCMoveInProjectAssigned",
          "TCMoveInProjectOwn",
          "TCMoveBetweenProjectsAll",
          "TCMoveBetweenProjectsAssigned",
          "TCMoveBetweenProjectsOwn",
          "TCCreateDependencyAll",
          "TCDeleteDependencyAll",
          "TSViewContentAll",
          "TSCreateAll",
          "TSEditAll",
          "TSEditAssigned",
          "TSEditOwn",
          "TSDeleteAll",
          "TSDeleteAssigned",
          "TSDeleteOwn",
          "TSEditBatchAll",
          "TSMoveInProjectAll",
          "TSMoveInProjectAssigned",
          "TSMoveInProjectOwn",
          "TSMoveBetweenProjectsAll",
          "TSMoveBetweenProjectsAssigned",
          "TSMoveBetweenProjectsOwn",
          "TSCreateDependencyAll",
          "TSDeleteDependencyAll",
          "EXSchedulingAll",
          "EXSchedulingAssigned",
          "EXSchedulingOwn",
          "EXTCManualAll",
          "EXTCAutomatedAll",
          "EXTSManualAll",
          "EXTSAutomatedAll",
          "EXFinalizeAll",
          "EXSetRelevanceAll",
          "SCViewContentAll",
          "SCCreateAll",
          "SCEditAll",
          "SCEditAssigned",
          "SCEditOwn",
          "SCDeleteAll",
          "SCDeleteAssigned",
          "SCDeleteOwn",
          "SCEditBatchAll",
          "SCMoveInProjectAll",
          "SCMoveInProjectAssigned",
          "SCMoveInProjectOwn",
          "SCMoveBetweenProjectsAll",
          "SCMoveBetweenProjectsAssigned",
          "SCMoveBetweenProjectsOwn",
          "SCCreateDependencyAll",
          "SCDeleteDependencyAll",
          "GEViewsPublishAll",
          "GEViewsEditPublicAll",
          "GEProjectEditTreeAll",
          "GEProjectConfigureAll",
          "GEProjectConfigureUsersAll",
          "GEProjectConfigureSubtemplateAll",
          "GEProjectViewAllUsersAll",
          "GENotificationsAll",
          "GEMindMapViewAll",
          "GEMindMapCreateEditAll",
          "GEAttachmentsViewOpenAll",
          "GEAttachmentsAddAll",
          "GEAttachmentsDeleteAll",
          "GEExportItemAll",
          "GEImportItemAll",
          "PPViewContentAll",
          "PPReportWorkAll",
          "PPCreateEditDeleteItemsAll",
          "PPShowEarnedValueAnalysisAll",
          "DAViewAll",
          "DAEditAll",
          "DAChartPublishAll",
          "DAChartEditPublicAll",
          "AGViewAll",
          "AGSprintCreateEditAll",
          "AGSprintDeleteAll",
          "AGSprintPlanningAll",
          "RPUseAll",
          "RPManageTemplatesAll",
          "RPCreateTemplateEditLayoutAll",
          "RPExportPDFAll",
          "RPExportHTMLAll",
          "RPExportMHTAll",
          "RPExportRTFAll",
          "RPExportXLSAll",
          "RPExportXLSXAll",
          "RPExportCSVAll",
          "RPExportTextFileAll",
          "RPExportImageFileAll",
          "RPExportDOCAll",
          "RPExportDOCXAll",
          "RPExportODTAll",
          "RPSignPDFAll",
          "LoginRichClientAll",
          "LoginWebAll",
          "LoginOfflineAll",
          "LoginApiAll",
          "TranslateContentAll",
          "EnterpriseSystemAll",
          "GlobalConfigureRoles"
        ],
        "enum": [
          1010,
          1040,
          1050,
          1051,
          1052,
          1110,
          1130,
          1140,
          1210,
          1211,
          1212,
          1220,
          1221,
          1222,
          1230,
          1231,
          1232,
          1240,
          1241,
          1242,
          1270,
          1271,
          1272,
          1280,
          1310,
          1311,
          1312,
          1410,
          1411,
          1412,
          1420,
          1421,
          1422,
          1510,
          1520,
          2010,
          2110,
          2210,
          2211,
          2212,
          2220,
          2222,
          2310,
          2311,
          2312,
          2320,
          2322,
          2410,
          2510,
          2511,
          2512,
          2520,
          2521,
          2522,
          2610,
          2620,
          3010,
          3110,
          3120,
          3130,
          3140,
          3210,
          3211,
          3212,
          3220,
          3221,
          3222,
          3230,
          3231,
          3232,
          3240,
          3241,
          3242,
          3250,
          3251,
          3252,
          3260,
          3261,
          3262,
          3270,
          3310,
          3311,
          3312,
          3410,
          3411,
          3412,
          3420,
          3421,
          3422,
          3510,
          3520,
          4010,
          4110,
          4210,
          4211,
          4212,
          4310,
          4311,
          4312,
          4410,
          4510,
          4511,
          4512,
          4520,
          4521,
          4522,
          4610,
          4620,
          5210,
          5211,
          5212,
          5310,
          5320,
          5410,
          5420,
          5510,
          5520,
          6010,
          6110,
          6210,
          6211,
          6212,
          6310,
          6311,
          6312,
          6410,
          6510,
          6511,
          6512,
          6520,
          6521,
          6522,
          6610,
          6620,
          7010,
          7020,
          7110,
          7120,
          7130,
          7140,
          7150,
          7210,
          7310,
          7320,
          7410,
          7420,
          7430,
          7510,
          7520,
          8010,
          8020,
          8030,
          8040,
          9010,
          9020,
          9030,
          9040,
          10010,
          10020,
          10030,
          10040,
          11010,
          11020,
          11030,
          11110,
          11120,
          11130,
          11140,
          11150,
          11160,
          11170,
          11180,
          11190,
          11200,
          11210,
          11220,
          11230,
          50010,
          50020,
          50030,
          50040,
          60010,
          60020,
          100010
        ]
      },
      "PermissionScope": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Project",
          "Global"
        ],
        "enum": [
          0,
          1
        ]
      },
      "AquaClientType": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Rich",
          "Offline",
          "Web",
          "API"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "PermissionVariant": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "All",
          "Assigned",
          "Owned"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ApiSystemGetColorsResponse": {
        "type": "object",
        "description": "Contains the response for get colors.",
        "additionalProperties": false,
        "properties": {
          "Colors": {
            "type": "array",
            "description": "List of predefined colors.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiRoleIdName"
          },
          {
            "type": "object",
            "description": "Represents the role.",
            "additionalProperties": false,
            "properties": {
              "Permissions": {
                "type": "array",
                "description": "The list of permissions of the role.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiPermission"
                }
              },
              "IsDefault": {
                "type": "boolean",
                "description": "True if role is a default role, which means it can't be changed."
              }
            }
          }
        ]
      },
      "ApiPermission": {
        "type": "string",
        "description": "Represention of possible permissions.\r\nThis enum has the following values:\r\n  - `AGSprintCreateEditAll` Allows the user to create new sprints and edit existing ones.\r\n  - `AGSprintDeleteAll` Allows the user to delete sprints.\r\n  - `AGSprintPlanningAll` Allows the user to access the sprint planning.\r\n  - `AGViewAll` Allows the user to see the agile board.\r\n  - `DAChartEditPublicAll` Allows the user to change saved charts.\r\n  - `DAChartPublishAll` Allows the user to save charts in the chart gallery.\r\n  - `DAEditAll` Allows the user to add new charts or change visible charts.\r\n  - `DAViewAll` Allows the user to see the dashboard.\r\n  - `DFCreateAll` Allows the user to create new defects.\r\n  - `DFCreateDependencyAll` Allows to create new defect dependencies.\r\n  - `DFDeleteAll` Allows the user to delete all defects.\r\n  - `DFDeleteAssigned` Allows the user to delete assigned defects.\r\n  - `DFDeleteDependencyAll` Allows to delete existing defect dependencies.\r\n  - `DFDeleteEnclosuresAll` Allows the user to delete enclosures of all defects.\r\n  - `DFDeleteEnclosuresOwn` Allows the user to delete enclosures of own defects.\r\n  - `DFDeleteOwn` Allows the user to delete own defects.\r\n  - `DFEditAll` Allows the user to change all defects.\r\n  - `DFEditAssigned` Allows the user to change assigned defects.\r\n  - `DFEditBatchAll` Allows to batch change defects.\r\n  - `DFEditEnclosuresAll` Allows the user to add or change enclosures, for all defects.\r\n  - `DFEditEnclosuresOwn` Allows the user to add or change enclosures, for own defects.\r\n  - `DFEditOwn` Allows the user to change own defects.\r\n  - `DFMoveBetweenProjectsAll` Allows the user to move all defects between different projects.\r\n  - `DFMoveBetweenProjectsAssigned` Allows the user to move assigned defects between different projects.\r\n  - `DFMoveBetweenProjectsOwn` Allows the user to move own defects between different projects.\r\n  - `DFMoveInProjectAll` Allows the user to move all defects within one project.\r\n  - `DFMoveInProjectAssigned` Allows the user to move assigned defects within one project.\r\n  - `DFMoveInProjectOwn` Allows the user to move own defects within one project.\r\n  - `DFViewContentAll` Allows the user to open defects.\r\n  - `EXFinalizeAll` Allows the user to finalize an execution.\r\n  - `EXSchedulingAll` Allows the user to set up schedules for all regularly executed test scenarios.\r\n  - `EXSchedulingAssigned` Allows the user to set up schedules for assigned regularly executed test scenarios.\r\n  - `EXSchedulingOwn` Allows the user to set up schedules for own regularly executed test scenarios.\r\n  - `EXSetRelevanceAll` Allows the user to mark and unmark executions as (ir)relevant.\r\n  - `EXTCAutomatedAll` Allows the user to execute test cases which contain an automation.\r\n  - `EXTCManualAll` Allows the user to manually execute test cases.\r\n  - `EXTSAutomatedAll` Allows the user to execute test scenarios which contain an automation.\r\n  - `EXTSManualAll` Allows the user to manually execute test scenarios.\r\n  - `GEAttachmentsAddAll` Allows the user to add files.\r\n  - `GEAttachmentsDeleteAll` Allows the user to delete attachments.\r\n  - `GEAttachmentsViewOpenAll` Allows the user to open attached files.\r\n  - `GEExportItemAll` Allows to export items.\r\n  - `GEImportItemAll` Allows to import items.\r\n  - `GEMindMapCreateEditAll` Allows the user to edit and create Mind Maps.\r\n  - `GEMindMapViewAll` Allows the user to see Mind Maps.\r\n  - `GENotificationsAll` Allows the user to configure notifications and receive them.\r\n  - `GEProjectConfigureAll` Allows the user to add new projects and change configuration.\r\n  - `GEProjectConfigureSubtemplateAll` Allows the user to configure the sub template of a project.\r\n  - `GEProjectConfigureUsersAll` Allows the user to assign users to a project.\r\n  - `GEProjectEditTreeAll` Allows the user to add sub folders to a project.\r\n  - `GEProjectViewAllUsersAll` Allows the user to see all other users.\r\n  - `GEViewsEditPublicAll` Allows the user to change public filtered views in project gallery.\r\n  - `GEViewsPublishAll` Allows the user to publish saved filtered views in project gallery.\r\n  - `PPCreateEditDeleteItemsAll` Allows the user to create / edit / delete items in the project plan.\r\n  - `PPReportWorkAll` Allows the user to report work on items in the project plan.\r\n  - `PPShowEarnedValueAnalysisAll` Allows the user to see the earned value analysis of a project plan.\r\n  - `PPViewContentAll` Allows the user to open project plans.\r\n  - `RPCreateTemplateEditLayoutAll` Allows the user to create new reports and edit existing ones.\r\n  - `RPExportCSVAll` Allows the user to export reports to CSV format.\r\n  - `RPExportDOCAll` Allows the user to export reports to DOC format.\r\n  - `RPExportDOCXAll` Allows the user to export reports to DOCX format.\r\n  - `RPExportHTMLAll` Allows the user to export reports to HTML format.\r\n  - `RPExportImageFileAll` Allows the user to export reports to Image File.\r\n  - `RPExportMHTAll` Allows the user to export reports to MHT format.\r\n  - `RPExportODTAll` Allows the user to export reports to ODT format.\r\n  - `RPExportPDFAll` Allows the user to export reports to PDF format.\r\n  - `RPExportRTFAll` Allows the user to export reports to RTF format.\r\n  - `RPExportTextFileAll` Allows the user to export reports to Text File.\r\n  - `RPExportXLSAll` Allows the user to export reports to XLS format.\r\n  - `RPExportXLSXAll` Allows the user to export reports to XLSX format.\r\n  - `RPManageTemplatesAll` Allows to import/export report templates as well as to configure properties.\r\n  - `RPSignPDFAll` Allows the user to sign reports which are exported as PDF.\r\n  - `RPUseAll` Allows the user to see the reports.\r\n  - `RQCreateDependencyAll` Allows to create new requirement dependencies.\r\n  - `RQCreateEditCommentsAll` Allows the user to create comments in the description of the requirement.\r\n  - `RQCreateEditFieldsDescriptionAll` Allows the user to create new requirements.\r\n  - `RQCreateWordImportAll` Allows the user to import requirements from word.\r\n  - `RQDeleteAll` Allows the user to delete all requirements.\r\n  - `RQDeleteAssigned` Allows the user to delete assigned requirements.\r\n  - `RQDeleteDependencyAll` Allows to delete existing requirement dependencies.\r\n  - `RQDeleteOwn` Allows the user to delete own requirements.\r\n  - `RQEditBatchAll` Allows to batch change requirements.\r\n  - `RQEditCommentsAll` Allows the user to edit existing comments, for all requirements.\r\n  - `RQEditCommentsAssigned` Allows the user to edit existing comments, for assigned requirements.\r\n  - `RQEditCommentsOwn` Allows the user to edit existing comments, for own requirements.\r\n  - `RQEditDescriptionAll` Allows the user to edit the description of a requirement, for all requirements.\r\n  - `RQEditDescriptionAssigned` Allows the user to edit the description of a requirement, for assigned requirements.\r\n  - `RQEditDescriptionOwn` Allows the user to edit the description of a requirement, for own requirements.\r\n  - `RQEditFieldsAll` Allows the user to edit fields in the metadata, for all requirements.\r\n  - `RQEditFieldsAssigned` Allows the user to edit fields in the metadata, for assigned requirements.\r\n  - `RQEditFieldsOwn` Allows the user to edit fields in the metadata, for own requirements.\r\n  - `RQEditStatusAll` Allows the user to change the status of a requirement, for all requirements.\r\n  - `RQEditStatusAssigned` Allows the user to change the status of a requirement, for assigned requirements.\r\n  - `RQEditStatusOwn` Allows the user to change the status of a requirement, for own requirements.\r\n  - `RQEditWordImportAll` Allows to import a description from a Word-File, for all requirements.\r\n  - `RQEditWordImportAssigned` Allows to import a description from a Word-File, for assigned requirements.\r\n  - `RQEditWordImportOwn` Allows to import a description from a Word-File, for own requirements.\r\n  - `RQMoveBetweenProjectsAll` Allows the user to move all requirements between different projects.\r\n  - `RQMoveBetweenProjectsAssigned` Allows the user to move assigned requirements between different projects.\r\n  - `RQMoveBetweenProjectsOwn` Allows the user to move own requirements between different projects.\r\n  - `RQMoveInProjectAll` Allows the user to move all requirements within one project.\r\n  - `RQMoveInProjectAssigned` Allows the user to move assigned requirements within one project.\r\n  - `RQMoveInProjectOwn` Allows the user to move own requirements within one project.\r\n  - `RQViewContentAll` Allows the user to open requirements.\r\n  - `RQViewDiscussionsAll` Allows the user to open UMLs, for all requirements.\r\n  - `RQViewWordExportAll` Allows the user to export all requirements to a Word document.\r\n  - `RQViewWordExportAssigned` Allows the user to export assigned requirements to a Word document.\r\n  - `RQViewWordExportOwn` Allows the user to export own requirements to a Word document.\r\n  - `SCCreateAll` Allows the user to create new scripts.\r\n  - `SCCreateDependencyAll` Allows to create new script dependencies.\r\n  - `SCDeleteAll` Allows the user to delete all scripts.\r\n  - `SCDeleteAssigned` Allows the user to delete assigned scripts.\r\n  - `SCDeleteDependencyAll` Allows to delete existing script dependencies.\r\n  - `SCDeleteOwn` Allows the user to delete own scripts.\r\n  - `SCEditAll` Allows the user to edit all scripts.\r\n  - `SCEditAssigned` Allows the user to edit assigned scripts.\r\n  - `SCEditBatchAll` Allows to batch change scripts.\r\n  - `SCEditOwn` Allows the user to edit own scripts.\r\n  - `SCMoveBetweenProjectsAll` Allows the user to move all scripts between different projects.\r\n  - `SCMoveBetweenProjectsAssigned` Allows the user to move assigned scripts between different projects.\r\n  - `SCMoveBetweenProjectsOwn` Allows the user to move own scripts between different projects.\r\n  - `SCMoveInProjectAll` Allows the user to move all scripts within one project.\r\n  - `SCMoveInProjectAssigned` Allows the user to move assigned scripts within one project.\r\n  - `SCMoveInProjectOwn` Allows the user to move own scripts within one project.\r\n  - `SCViewContentAll` Allows the user to open scripts.\r\n  - `TCCreateDependencyAll` Allows to create new test case dependencies.\r\n  - `TCCreateEditFieldsDescriptionAll` Allows the user to create new test case.\r\n  - `TCCreateEditNestingAll` Allows the user to nest a test case within a test step.\r\n  - `TCCreateEditTestAutomationAll` Allows the user to use the automation tab to add new scripts.\r\n  - `TCCreateEditVariablesAll` Allows the user to parameterize tests using the variable manager.\r\n  - `TCDeleteAll` Allows the user to delete all test cases.\r\n  - `TCDeleteAssigned` Allows the user to delete assigned test cases.\r\n  - `TCDeleteDependencyAll` Allows to delete existing test case dependencies.\r\n  - `TCDeleteOwn` Allows the user to delete own test cases.\r\n  - `TCEditBatchAll` Allows to batch change test cases.\r\n  - `TCEditFieldDescriptionAll` Allows the user to edit fields in the metadata and the description, for all test cases.\r\n  - `TCEditFieldDescriptionAssigned` Allows the user to edit fields in the metadata and the description, for assigned test cases.\r\n  - `TCEditFieldDescriptionOwn` Allows the user to edit fields in the metadata and the description, for own test cases.\r\n  - `TCEditNestingAll` Allows the user to change nested test cases, for all test cases.\r\n  - `TCEditNestingAssigned` Allows the user to change nested test cases, for assigned test cases.\r\n  - `TCEditNestingOwn` Allows the user to change nested test cases, for own test cases.\r\n  - `TCEditStatusAll` Allows the user to change the status of all test cases.\r\n  - `TCEditStatusAssigned` Allows the user to change the status of assigned test cases.\r\n  - `TCEditStatusOwn` Allows the user to change the status of own test cases.\r\n  - `TCEditStepsAll` Allows the user to use the step designer, for all test cases.\r\n  - `TCEditStepsAssigned` Allows the user to use the step designer, for assigned test cases.\r\n  - `TCEditStepsOwn` Allows the user to use the step designer, for own test cases.\r\n  - `TCEditTestAutomationAll` Allows the user to change test scripts in test steps, for all test cases.\r\n  - `TCEditTestAutomationAssigned` Allows the user to change test scripts in test steps, for assigned test cases.\r\n  - `TCEditTestAutomationOwn` Allows the user to change test scripts in test steps, for own test cases.\r\n  - `TCEditVariablesAll` Allows the user to change variables in variable manager, for all test cases.\r\n  - `TCEditVariablesAssigned` Allows the user to change variables in variable manager, for assigned test cases.\r\n  - `TCEditVariablesOwn` Allows the user to change variables in variable manager, for own test cases.\r\n  - `TCMoveBetweenProjectsAll` Allows the user to move all test cases between different projects.\r\n  - `TCMoveBetweenProjectsAssigned` Allows the user to move assigned test cases between different projects.\r\n  - `TCMoveBetweenProjectsOwn` Allows the user to move own test cases between different projects.\r\n  - `TCMoveInProjectAll` Allows the user to move all test cases within one project.\r\n  - `TCMoveInProjectAssigned` Allows the user to move assigned test cases within one project.\r\n  - `TCMoveInProjectOwn` Allows the user to move own test cases within one project.\r\n  - `TCViewContentAll` Allows the user to open test cases.\r\n  - `TSCreateAll` Allows the user to create new test scenarios.\r\n  - `TSCreateDependencyAll` Allows to create new dependencies, for test scenarios.\r\n  - `TSDeleteAll` Allows the user to delete all test scenarios.\r\n  - `TSDeleteAssigned` Allows the user to delete assigned test scenarios.\r\n  - `TSDeleteDependencyAll` Allows to delete existing dependencies, for test scenarios.\r\n  - `TSDeleteOwn` Allows the user to delete own test scenarios.\r\n  - `TSEditAll` Allows the user to change all test scenarios.\r\n  - `TSEditAssigned` Allows the user to change assigned test scenarios.\r\n  - `TSEditBatchAll` Allows to batch change test scenarios.\r\n  - `TSEditOwn` Allows the user to change own test scenarios.\r\n  - `TSMoveBetweenProjectsAll` Allows the user to move all test scenarios between different projects.\r\n  - `TSMoveBetweenProjectsAssigned` Allows the user to move assigned test scenarios between different projects.\r\n  - `TSMoveBetweenProjectsOwn` Allows the user to move own test scenarios between different projects.\r\n  - `TSMoveInProjectAll` Allows the user to move all test scenarios within one project.\r\n  - `TSMoveInProjectAssigned` Allows the user to move assigned test scenarios within one project.\r\n  - `TSMoveInProjectOwn` Allows the user to move own test scenarios within one project.\r\n  - `TSViewContentAll` Allows the user to open test scenarios.\r\n",
        "x-enumNames": [
          "RQViewContentAll",
          "RQViewDiscussionsAll",
          "RQViewWordExportAll",
          "RQViewWordExportAssigned",
          "RQViewWordExportOwn",
          "RQCreateEditFieldsDescriptionAll",
          "RQCreateEditCommentsAll",
          "RQCreateWordImportAll",
          "RQEditStatusAll",
          "RQEditStatusAssigned",
          "RQEditStatusOwn",
          "RQEditFieldsAll",
          "RQEditFieldsAssigned",
          "RQEditFieldsOwn",
          "RQEditDescriptionAll",
          "RQEditDescriptionAssigned",
          "RQEditDescriptionOwn",
          "RQEditCommentsAll",
          "RQEditCommentsAssigned",
          "RQEditCommentsOwn",
          "RQEditWordImportAll",
          "RQEditWordImportAssigned",
          "RQEditWordImportOwn",
          "RQEditBatchAll",
          "RQDeleteAll",
          "RQDeleteAssigned",
          "RQDeleteOwn",
          "RQMoveInProjectAll",
          "RQMoveInProjectAssigned",
          "RQMoveInProjectOwn",
          "RQMoveBetweenProjectsAll",
          "RQMoveBetweenProjectsAssigned",
          "RQMoveBetweenProjectsOwn",
          "RQCreateDependencyAll",
          "RQDeleteDependencyAll",
          "DFViewContentAll",
          "DFCreateAll",
          "DFEditAll",
          "DFEditAssigned",
          "DFEditOwn",
          "DFEditEnclosuresAll",
          "DFEditEnclosuresOwn",
          "DFEditBatchAll",
          "DFDeleteAll",
          "DFDeleteAssigned",
          "DFDeleteOwn",
          "DFDeleteEnclosuresAll",
          "DFDeleteEnclosuresOwn",
          "DFMoveInProjectAll",
          "DFMoveInProjectAssigned",
          "DFMoveInProjectOwn",
          "DFMoveBetweenProjectsAll",
          "DFMoveBetweenProjectsAssigned",
          "DFMoveBetweenProjectsOwn",
          "DFCreateDependencyAll",
          "DFDeleteDependencyAll",
          "TCViewContentAll",
          "TCCreateEditFieldsDescriptionAll",
          "TCCreateEditVariablesAll",
          "TCCreateEditNestingAll",
          "TCCreateEditTestAutomationAll",
          "TCEditStatusAll",
          "TCEditStatusAssigned",
          "TCEditStatusOwn",
          "TCEditFieldDescriptionAll",
          "TCEditFieldDescriptionAssigned",
          "TCEditFieldDescriptionOwn",
          "TCEditStepsAll",
          "TCEditStepsAssigned",
          "TCEditStepsOwn",
          "TCEditVariablesAll",
          "TCEditVariablesAssigned",
          "TCEditVariablesOwn",
          "TCEditNestingAll",
          "TCEditNestingAssigned",
          "TCEditNestingOwn",
          "TCEditTestAutomationAll",
          "TCEditTestAutomationAssigned",
          "TCEditTestAutomationOwn",
          "TCEditBatchAll",
          "TCDeleteAll",
          "TCDeleteAssigned",
          "TCDeleteOwn",
          "TCMoveInProjectAll",
          "TCMoveInProjectAssigned",
          "TCMoveInProjectOwn",
          "TCMoveBetweenProjectsAll",
          "TCMoveBetweenProjectsAssigned",
          "TCMoveBetweenProjectsOwn",
          "TCCreateDependencyAll",
          "TCDeleteDependencyAll",
          "TSViewContentAll",
          "TSCreateAll",
          "TSEditAll",
          "TSEditAssigned",
          "TSEditOwn",
          "TSEditBatchAll",
          "TSDeleteAll",
          "TSDeleteAssigned",
          "TSDeleteOwn",
          "TSMoveInProjectAll",
          "TSMoveInProjectAssigned",
          "TSMoveInProjectOwn",
          "TSMoveBetweenProjectsAll",
          "TSMoveBetweenProjectsAssigned",
          "TSMoveBetweenProjectsOwn",
          "TSCreateDependencyAll",
          "TSDeleteDependencyAll",
          "EXTCManualAll",
          "EXTCAutomatedAll",
          "EXTSManualAll",
          "EXTSAutomatedAll",
          "EXSchedulingAll",
          "EXSchedulingAssigned",
          "EXSchedulingOwn",
          "EXFinalizeAll",
          "EXSetRelevanceAll",
          "SCViewContentAll",
          "SCCreateAll",
          "SCEditAll",
          "SCEditAssigned",
          "SCEditOwn",
          "SCEditBatchAll",
          "SCDeleteAll",
          "SCDeleteAssigned",
          "SCDeleteOwn",
          "SCMoveInProjectAll",
          "SCMoveInProjectAssigned",
          "SCMoveInProjectOwn",
          "SCMoveBetweenProjectsAll",
          "SCMoveBetweenProjectsAssigned",
          "SCMoveBetweenProjectsOwn",
          "SCCreateDependencyAll",
          "SCDeleteDependencyAll",
          "GEViewsPublishAll",
          "GEViewsEditPublicAll",
          "GEProjectEditTreeAll",
          "GEProjectConfigureAll",
          "GEProjectConfigureUsersAll",
          "GEProjectConfigureSubtemplateAll",
          "GEProjectViewAllUsersAll",
          "GENotificationsAll",
          "GEMindMapViewAll",
          "GEMindMapCreateEditAll",
          "GEAttachmentsViewOpenAll",
          "GEAttachmentsAddAll",
          "GEAttachmentsDeleteAll",
          "GEExportItemAll",
          "GEImportItemAll",
          "PPViewContentAll",
          "PPReportWorkAll",
          "PPCreateEditDeleteItemsAll",
          "PPShowEarnedValueAnalysisAll",
          "DAViewAll",
          "DAEditAll",
          "DAChartPublishAll",
          "DAChartEditPublicAll",
          "AGViewAll",
          "AGSprintCreateEditAll",
          "AGSprintDeleteAll",
          "AGSprintPlanningAll",
          "RPUseAll",
          "RPManageTemplatesAll",
          "RPCreateTemplateEditLayoutAll",
          "RPExportPDFAll",
          "RPExportHTMLAll",
          "RPExportMHTAll",
          "RPExportRTFAll",
          "RPExportXLSAll",
          "RPExportXLSXAll",
          "RPExportCSVAll",
          "RPExportTextFileAll",
          "RPExportImageFileAll",
          "RPExportDOCAll",
          "RPExportDOCXAll",
          "RPExportODTAll",
          "RPSignPDFAll"
        ],
        "enum": [
          "RQViewContentAll",
          "RQViewDiscussionsAll",
          "RQViewWordExportAll",
          "RQViewWordExportAssigned",
          "RQViewWordExportOwn",
          "RQCreateEditFieldsDescriptionAll",
          "RQCreateEditCommentsAll",
          "RQCreateWordImportAll",
          "RQEditStatusAll",
          "RQEditStatusAssigned",
          "RQEditStatusOwn",
          "RQEditFieldsAll",
          "RQEditFieldsAssigned",
          "RQEditFieldsOwn",
          "RQEditDescriptionAll",
          "RQEditDescriptionAssigned",
          "RQEditDescriptionOwn",
          "RQEditCommentsAll",
          "RQEditCommentsAssigned",
          "RQEditCommentsOwn",
          "RQEditWordImportAll",
          "RQEditWordImportAssigned",
          "RQEditWordImportOwn",
          "RQEditBatchAll",
          "RQDeleteAll",
          "RQDeleteAssigned",
          "RQDeleteOwn",
          "RQMoveInProjectAll",
          "RQMoveInProjectAssigned",
          "RQMoveInProjectOwn",
          "RQMoveBetweenProjectsAll",
          "RQMoveBetweenProjectsAssigned",
          "RQMoveBetweenProjectsOwn",
          "RQCreateDependencyAll",
          "RQDeleteDependencyAll",
          "DFViewContentAll",
          "DFCreateAll",
          "DFEditAll",
          "DFEditAssigned",
          "DFEditOwn",
          "DFEditEnclosuresAll",
          "DFEditEnclosuresOwn",
          "DFEditBatchAll",
          "DFDeleteAll",
          "DFDeleteAssigned",
          "DFDeleteOwn",
          "DFDeleteEnclosuresAll",
          "DFDeleteEnclosuresOwn",
          "DFMoveInProjectAll",
          "DFMoveInProjectAssigned",
          "DFMoveInProjectOwn",
          "DFMoveBetweenProjectsAll",
          "DFMoveBetweenProjectsAssigned",
          "DFMoveBetweenProjectsOwn",
          "DFCreateDependencyAll",
          "DFDeleteDependencyAll",
          "TCViewContentAll",
          "TCCreateEditFieldsDescriptionAll",
          "TCCreateEditVariablesAll",
          "TCCreateEditNestingAll",
          "TCCreateEditTestAutomationAll",
          "TCEditStatusAll",
          "TCEditStatusAssigned",
          "TCEditStatusOwn",
          "TCEditFieldDescriptionAll",
          "TCEditFieldDescriptionAssigned",
          "TCEditFieldDescriptionOwn",
          "TCEditStepsAll",
          "TCEditStepsAssigned",
          "TCEditStepsOwn",
          "TCEditVariablesAll",
          "TCEditVariablesAssigned",
          "TCEditVariablesOwn",
          "TCEditNestingAll",
          "TCEditNestingAssigned",
          "TCEditNestingOwn",
          "TCEditTestAutomationAll",
          "TCEditTestAutomationAssigned",
          "TCEditTestAutomationOwn",
          "TCEditBatchAll",
          "TCDeleteAll",
          "TCDeleteAssigned",
          "TCDeleteOwn",
          "TCMoveInProjectAll",
          "TCMoveInProjectAssigned",
          "TCMoveInProjectOwn",
          "TCMoveBetweenProjectsAll",
          "TCMoveBetweenProjectsAssigned",
          "TCMoveBetweenProjectsOwn",
          "TCCreateDependencyAll",
          "TCDeleteDependencyAll",
          "TSViewContentAll",
          "TSCreateAll",
          "TSEditAll",
          "TSEditAssigned",
          "TSEditOwn",
          "TSEditBatchAll",
          "TSDeleteAll",
          "TSDeleteAssigned",
          "TSDeleteOwn",
          "TSMoveInProjectAll",
          "TSMoveInProjectAssigned",
          "TSMoveInProjectOwn",
          "TSMoveBetweenProjectsAll",
          "TSMoveBetweenProjectsAssigned",
          "TSMoveBetweenProjectsOwn",
          "TSCreateDependencyAll",
          "TSDeleteDependencyAll",
          "EXTCManualAll",
          "EXTCAutomatedAll",
          "EXTSManualAll",
          "EXTSAutomatedAll",
          "EXSchedulingAll",
          "EXSchedulingAssigned",
          "EXSchedulingOwn",
          "EXFinalizeAll",
          "EXSetRelevanceAll",
          "SCViewContentAll",
          "SCCreateAll",
          "SCEditAll",
          "SCEditAssigned",
          "SCEditOwn",
          "SCEditBatchAll",
          "SCDeleteAll",
          "SCDeleteAssigned",
          "SCDeleteOwn",
          "SCMoveInProjectAll",
          "SCMoveInProjectAssigned",
          "SCMoveInProjectOwn",
          "SCMoveBetweenProjectsAll",
          "SCMoveBetweenProjectsAssigned",
          "SCMoveBetweenProjectsOwn",
          "SCCreateDependencyAll",
          "SCDeleteDependencyAll",
          "GEViewsPublishAll",
          "GEViewsEditPublicAll",
          "GEProjectEditTreeAll",
          "GEProjectConfigureAll",
          "GEProjectConfigureUsersAll",
          "GEProjectConfigureSubtemplateAll",
          "GEProjectViewAllUsersAll",
          "GENotificationsAll",
          "GEMindMapViewAll",
          "GEMindMapCreateEditAll",
          "GEAttachmentsViewOpenAll",
          "GEAttachmentsAddAll",
          "GEAttachmentsDeleteAll",
          "GEExportItemAll",
          "GEImportItemAll",
          "PPViewContentAll",
          "PPReportWorkAll",
          "PPCreateEditDeleteItemsAll",
          "PPShowEarnedValueAnalysisAll",
          "DAViewAll",
          "DAEditAll",
          "DAChartPublishAll",
          "DAChartEditPublicAll",
          "AGViewAll",
          "AGSprintCreateEditAll",
          "AGSprintDeleteAll",
          "AGSprintPlanningAll",
          "RPUseAll",
          "RPManageTemplatesAll",
          "RPCreateTemplateEditLayoutAll",
          "RPExportPDFAll",
          "RPExportHTMLAll",
          "RPExportMHTAll",
          "RPExportRTFAll",
          "RPExportXLSAll",
          "RPExportXLSXAll",
          "RPExportCSVAll",
          "RPExportTextFileAll",
          "RPExportImageFileAll",
          "RPExportDOCAll",
          "RPExportDOCXAll",
          "RPExportODTAll",
          "RPSignPDFAll"
        ]
      },
      "ApiRoleNewResponse": {
        "type": "object",
        "description": "Contains information about created role.",
        "additionalProperties": false,
        "properties": {
          "RoleId": {
            "type": "integer",
            "description": "The id of the role.",
            "format": "int32"
          }
        }
      },
      "ApiRoleNew": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the role.",
            "nullable": true
          },
          "Permissions": {
            "type": "array",
            "description": "The list of permission of this role.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiPermission"
            }
          }
        }
      },
      "ApiUpdateRole": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "NewName": {
            "type": "string",
            "description": "The new name of the role.",
            "nullable": true
          },
          "NewPermissions": {
            "type": "array",
            "description": "The list of new permission of this role.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiPermission"
            }
          }
        }
      },
      "ApiRolePatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "ReplaceRole": "#/components/schemas/ApiRolePatchRequestReplaceRole"
          }
        },
        "description": "Represent a request to modify a role.\nActual subclasses are used, depending on OperationType.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiRolePatchRequestReplaceRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiRolePatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that replace the role, the role on which the request is performed will be deleted.",
            "additionalProperties": false,
            "properties": {
              "RoleIdToReplaceWith": {
                "type": "integer",
                "description": "The id of the role which should be set.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiPermissionDependenciesPatchResponse": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "AddPermission": "#/components/schemas/ApiDependenciesAddPermissionPatchResponse",
            "RemovePermission": "#/components/schemas/ApiDependenciesRemovePermissionPatchResponse",
            "PermissionSet": "#/components/schemas/ApiDependenciesPermissionSetPatchResponse"
          }
        },
        "description": "Represent a response to validate permission dependencies.\nActual subclasses are used, depending on OperationType.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiDependenciesAddPermissionPatchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiPermissionDependenciesPatchResponse"
          },
          {
            "type": "object",
            "description": "Represents an reponse that validates the permission depedencies for adding permission.",
            "additionalProperties": false,
            "properties": {
              "PermissionsToAdd": {
                "type": "array",
                "description": "List of dependet but missing permissions.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiPermission"
                }
              }
            }
          }
        ]
      },
      "ApiDependenciesRemovePermissionPatchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiPermissionDependenciesPatchResponse"
          },
          {
            "type": "object",
            "description": "Represents an reponse that validates the permission depedencies for removing permission.",
            "additionalProperties": false,
            "properties": {
              "PermissionsToRemove": {
                "type": "array",
                "description": "List of permission where depdencie is not resolved, after the remove operation.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiPermission"
                }
              }
            }
          }
        ]
      },
      "ApiDependenciesPermissionSetPatchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiPermissionDependenciesPatchResponse"
          },
          {
            "type": "object",
            "description": "Represents an reponse that validates the permission depedencies for an permission set.",
            "additionalProperties": false,
            "properties": {
              "PermissionsToAdd": {
                "type": "array",
                "description": "List of dependet but missing permissions.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiPermission"
                }
              }
            }
          }
        ]
      },
      "ApiDependenciesPermissionPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "AddSinglePermission": "#/components/schemas/ApiDependenciesAddSinglePermissionPatchRequest",
            "RemoveSinglePermission": "#/components/schemas/ApiDependenciesRemoveSinglePermissionPatchRequest",
            "PermissionSet": "#/components/schemas/ApiDependenciesPermissionSetPatchRequest"
          }
        },
        "description": "Represent a request to validate permission dependencies.\nActual subclasses are used, depending on OperationType.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "AllPermissions": {
            "type": "array",
            "description": "List of permissions to validate.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiPermission"
            }
          },
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiDependenciesAddSinglePermissionPatchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiDependenciesPermissionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that validates the permission depedencies for added permissions.",
            "additionalProperties": false,
            "properties": {
              "AddedPermission": {
                "description": "Currently checked permission.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiPermission"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiDependenciesRemoveSinglePermissionPatchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiDependenciesPermissionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that validates the permission depedencies for removed permissions.",
            "additionalProperties": false,
            "properties": {
              "RemovedPermission": {
                "description": "Currently unchecked permission.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiPermission"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiDependenciesPermissionSetPatchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiDependenciesPermissionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that validates depedencies for an permission set.",
            "additionalProperties": false
          }
        ]
      },
      "ApiRegisteredFileEditorsRepository": {
        "type": "object",
        "description": "Contains repository of registered file editors (used in automation).",
        "additionalProperties": false,
        "properties": {
          "Meta": {
            "type": "array",
            "description": "Editors meta-data ",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRegisteredFileEditor"
            }
          },
          "Scripts": {
            "type": "array",
            "description": "Editors scripts (javascript content)",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiRegisteredFileEditor": {
        "type": "object",
        "description": "Contains meta-data of the registered file editor (used in automation).",
        "additionalProperties": false,
        "properties": {
          "FileExtension": {
            "type": "string",
            "description": "Extension of the files supported by this editor (e.g. \"cvs\")",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "description": "Unique key to identify the registered editor. For example 'CSV'.",
            "nullable": true
          },
          "JSControllerName": {
            "type": "string",
            "description": "Name of the javascript object that implements functionality of this editor. \n(the proper javascript file needs to be injected/evaluated in order to access the editor code). ",
            "nullable": true
          },
          "Icon16": {
            "type": "string",
            "description": "Small icon representing the editor/file type. \nContains Base64 encoded PNG bytes to be used with 'data:image/png;base64,'",
            "nullable": true
          },
          "Icon32": {
            "type": "string",
            "description": "Large icon representing the editor/file type. \nContains Base64 encoded PNG bytes to be used with 'data:image/png;base64,'",
            "nullable": true
          }
        }
      },
      "ApiLongOperationInfoBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "InfoType",
          "mapping": {
            "LongOperationInfo": "#/components/schemas/ApiLongOperationInfo",
            "ItemLongOperationInfo": "#/components/schemas/ApiItemLongOperationInfo",
            "ExportLongRunningTaskInfo": "#/components/schemas/ApiExportLongRunningTaskInfo",
            "ImportLongRunningTaskInfo": "#/components/schemas/ApiImportLongRunningTaskInfo"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "InfoType"
        ],
        "properties": {
          "Status": {
            "description": "Current status of the long running operation.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiLongOperationStatus"
              }
            ]
          },
          "InfoType": {
            "type": "string"
          }
        }
      },
      "ApiLongOperationStatus": {
        "type": "string",
        "description": "Represents status of a long running operation.\r\nThis enum has the following values:\r\n  - `Aborted` Long operation has been aborted.\r\n  - `BlockedByAnotherTask` Long operation has been blocked by another task.\r\n  - `Failed` Long operation has failed.\r\n  - `Finished` Long operation has finished without problems.\r\n  - `FinishedWithWarning` Long operation has finished but there were some problems.\r\n  - `InProgress` Long operation is in progress.\r\n  - `Queued` Long operation has been queued, not started yet.\r\n",
        "x-enumNames": [
          "Queued",
          "InProgress",
          "Finished",
          "FinishedWithWarning",
          "Failed",
          "Aborted",
          "BlockedByAnotherTask"
        ],
        "enum": [
          "Queued",
          "InProgress",
          "Finished",
          "FinishedWithWarning",
          "Failed",
          "Aborted",
          "BlockedByAnotherTask"
        ]
      },
      "ApiLongOperationInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLongOperationInfoBase"
          },
          {
            "type": "object",
            "description": "Details of a long running operation (including status).\nDepending on actual type might be heavyweight (e.g. include detailed information about failures)",
            "additionalProperties": false,
            "properties": {
              "Done": {
                "type": "integer",
                "description": "Number of elements processed so far. Includes also failed elements.",
                "format": "int32"
              },
              "Total": {
                "type": "integer",
                "description": "Number of all elements to be processed.",
                "format": "int32"
              },
              "Failed": {
                "type": "integer",
                "description": "Number of all elements that could not be processed.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiItemLongOperationInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLongOperationInfo"
          },
          {
            "type": "object",
            "description": "A dedicated version of ApiLongOperationInfo returned for batch-item update long operations.",
            "additionalProperties": false,
            "properties": {
              "Issues": {
                "type": "array",
                "description": "List of failures. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiBatchItemOperationIssue"
                }
              }
            }
          }
        ]
      },
      "ApiBatchItemOperationIssue": {
        "type": "object",
        "description": "Represents a failure of batch-item update operation for a single item.",
        "additionalProperties": false,
        "properties": {
          "Item": {
            "description": "Item information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemIdentifier"
              }
            ]
          },
          "Reason": {
            "description": "Reason of a failure.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiBatchItemUpdateIssueDetailsBase"
              }
            ]
          },
          "IssueType": {
            "description": "Type of the issue.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiBatchItemOperationIssueType"
              }
            ]
          }
        }
      },
      "ApiBatchItemUpdateIssueDetailsBase": {
        "type": "object",
        "discriminator": {
          "propertyName": "DetailsType",
          "mapping": {
            "FieldIssueDetails": "#/components/schemas/ApiBatchItemUpdateFieldIssueDetails",
            "IssueDetails": "#/components/schemas/ApiBatchItemUpdateIssueDetails"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "DetailsType"
        ],
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ApiBatchItemUpdateIssueDetailsType"
          },
          "DetailsType": {
            "type": "string"
          }
        }
      },
      "ApiBatchItemUpdateIssueDetailsType": {
        "type": "string",
        "description": "Represents reason of a failure of batch-item update operation\r\nThis enum has the following values:\r\n  - `Denied` Access to the item has been denied\r\n  - `Failure` Uncategorized failure\r\n  - `FieldIncompatible` A field could not be converted due to incompatibility\r\n  - `Locked` Item was currently edited by someone\r\n  - `NotFound` Item has not been found\r\n  - `ValueNotAllowed` When updating an item, the given value was not allowed (e.g. due to format, length, denied by workflow rules etc.)\r\n",
        "x-enumNames": [
          "NotFound",
          "Locked",
          "Denied",
          "ValueNotAllowed",
          "Failure",
          "FieldIncompatible"
        ],
        "enum": [
          "NotFound",
          "Locked",
          "Denied",
          "ValueNotAllowed",
          "Failure",
          "FieldIncompatible"
        ]
      },
      "ApiBatchItemUpdateFieldIssueDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBatchItemUpdateIssueDetailsBase"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "SourceFieldName": {
                "type": "string",
                "nullable": true
              },
              "TargetFieldName": {
                "type": "string",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiBatchItemUpdateIssueDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiBatchItemUpdateIssueDetailsBase"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiBatchItemOperationIssueType": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `FieldError` \r\n  - `FieldInformation` \r\n  - `FieldWarning` \r\n  - `ItemError` \r\n  - `ItemInformation` \r\n  - `ItemWarning` \r\n",
        "x-enumNames": [
          "ItemError",
          "ItemWarning",
          "ItemInformation",
          "FieldError",
          "FieldWarning",
          "FieldInformation"
        ],
        "enum": [
          "ItemError",
          "ItemWarning",
          "ItemInformation",
          "FieldError",
          "FieldWarning",
          "FieldInformation"
        ]
      },
      "ApiExportLongRunningTaskInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLongOperationInfo"
          },
          {
            "type": "object",
            "description": "A dedicated version of ApiLongOperationInfo returned for excel expprt long operations. ",
            "additionalProperties": false,
            "properties": {
              "ExportFileGuid": {
                "type": "string",
                "description": "When finished, this will contain the file guid to the export file",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiImportLongRunningTaskInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLongOperationInfo"
          },
          {
            "type": "object",
            "description": "A dedicated version of ApiLongOperationInfo returned for excel import long operations. ",
            "additionalProperties": false,
            "properties": {
              "FailedItems": {
                "type": "array",
                "description": "List of failed imports.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiImportErrorReportItem"
                }
              },
              "ExpectedPhases": {
                "type": "array",
                "description": "List of expected phases during import, filled only after the excel file was read",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiImportPhase"
                }
              },
              "CurrentPhase": {
                "description": "The current phase of the import",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiImportPhase"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiImportErrorReportItem": {
        "type": "object",
        "description": "An individual error during import",
        "additionalProperties": false,
        "properties": {
          "ErrorType": {
            "description": "The type of the error, defined in ApiImportErrorType",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiImportErrorType"
              }
            ]
          },
          "ImportKey": {
            "type": "string",
            "description": "The column header",
            "nullable": true
          },
          "Row": {
            "type": "integer",
            "description": "The row number on the Worksheet the error occured on",
            "format": "int32"
          },
          "PropertyName": {
            "type": "string",
            "description": "Target property of the baseobject (or subitem like teststep,enclosure etc)",
            "nullable": true
          },
          "IncorrectValue": {
            "type": "string",
            "description": "Invalid value from worksheet",
            "nullable": true
          },
          "ErrorMessage": {
            "type": "string",
            "description": "The Error Message",
            "nullable": true
          },
          "Column": {
            "type": "integer",
            "description": "The column number on the Worksheet the error occured on",
            "format": "int32"
          },
          "WorkSheetName": {
            "type": "string",
            "description": "The Worksheet the error occured on",
            "nullable": true
          }
        }
      },
      "ApiImportErrorType": {
        "type": "string",
        "description": "Represents reason of a failure of import operation\nNote that some of these errors can be caused by using the wrong culture\r\nThis enum has the following values:\r\n  - `CreateAttachmentError` Never used\r\n  - `CreateDateTimeError` Invalid Datetime: value could not be parsed\r\n  - `CreateDependencyError` Invalid Depenceny\r\n  - `CreateEnclosureError` No Id column to match Enclosures to Defect\r\n  - `CreateEnclosureItemError` Invalid type supplied for enclosure\r\n  - `CreateHierarchyError` Error while matching requirement to parent\r\n  - `CreateListError` Invalid MultiChoiceDropDown: value could not be matched to a list of valid values\r\n  - `CreateNumberError` Invalid Number: value could not be parsed\r\n  - `CreateTestJobNoRelatedTestCaseImportedError` The TestCase for a TestScenario's TestJob was not imported during this import\r\n  - `CreateTestJobsError` No Id column to match Testjobs to testscenario\r\n  - `CreateTestStepError` No Id column to match Teststep to TestCase\r\n  - `CreateTestStepItemError` Invalid type supplied for TestStep\r\n  - `CreateUserError` Invalid User: value could not be matched to a single user\r\n  - `DefectNoFieldMatchedError` No data in Row to import into Defect\r\n  - `DuplicateId` The same id is given to several objects (has to be unique across all worksheets)\r\n  - `DuplicateUser` Value from import-file denotes more than one user\r\n  - `ImportFileInvalid` xls file can not be read as such\r\n  - `InvalidArchive` corrupt zip file\r\n  - `InvalidColumnNameError` Column mapped to not importable property of object\r\n  - `InvalidSheetName` Worksheetname is not recognized to relate to an objecttype.\r\n  - `NoDataInWorkSheet` No data to import found after header row/No columns found besides id column\r\n  - `NoKeyColumn` No Id column found in worksheet\r\n  - `NoPermissionToCreateItem` Importing user has not the permission to create object in destined folder\r\n  - `NoValidFileInArchive` Zip-archive contains not xls on root level\r\n  - `RequirementNoFieldMathchedError` No data in Row to import into Requirement\r\n  - `ScreenShotNotFoundError` Rich client only - linked Screenshot in rtf not found in import data\r\n  - `ServerError` An internal server error occured\r\n  - `TestCaseNoFieldMatchedError` No data in Row to import into Testcase\r\n  - `TestScenarioNoFieldMatchedError` No data in Row to import into testscenario\r\n",
        "x-enumNames": [
          "CreateDateTimeError",
          "CreateNumberError",
          "CreateUserError",
          "CreateListError",
          "CreateHierarchyError",
          "CreateDependencyError",
          "CreateEnclosureError",
          "CreateAttachmentError",
          "CreateTestStepError",
          "InvalidColumnNameError",
          "DefectNoFieldMatchedError",
          "RequirementNoFieldMathchedError",
          "TestCaseNoFieldMatchedError",
          "ScreenShotNotFoundError",
          "CreateTestStepItemError",
          "CreateEnclosureItemError",
          "TestScenarioNoFieldMatchedError",
          "CreateTestJobsError",
          "CreateTestJobNoRelatedTestCaseImportedError",
          "NoPermissionToCreateItem",
          "NoKeyColumn",
          "NoDataInWorkSheet",
          "InvalidSheetName",
          "DuplicateUser",
          "DuplicateId",
          "NoValidFileInArchive",
          "ImportFileInvalid",
          "InvalidArchive",
          "ServerError"
        ],
        "enum": [
          "CreateDateTimeError",
          "CreateNumberError",
          "CreateUserError",
          "CreateListError",
          "CreateHierarchyError",
          "CreateDependencyError",
          "CreateEnclosureError",
          "CreateAttachmentError",
          "CreateTestStepError",
          "InvalidColumnNameError",
          "DefectNoFieldMatchedError",
          "RequirementNoFieldMathchedError",
          "TestCaseNoFieldMatchedError",
          "ScreenShotNotFoundError",
          "CreateTestStepItemError",
          "CreateEnclosureItemError",
          "TestScenarioNoFieldMatchedError",
          "CreateTestJobsError",
          "CreateTestJobNoRelatedTestCaseImportedError",
          "NoPermissionToCreateItem",
          "NoKeyColumn",
          "NoDataInWorkSheet",
          "InvalidSheetName",
          "DuplicateUser",
          "DuplicateId",
          "NoValidFileInArchive",
          "ImportFileInvalid",
          "InvalidArchive",
          "ServerError"
        ]
      },
      "ApiImportPhase": {
        "type": "string",
        "description": "Represents reason of a failure of import operation\nThe enumeration is sorted in the order these phases occur during import\r\nThis enum has the following values:\r\n  - `CreatingDependencies` Creating Depedencies\r\n  - `CreatingHierarchy` Creating Requirement Hierarchy\r\n  - `CreatingTestJobs` Creating TestJobs from Testcases for TestScenarios, only using TestCases/TestScenarios created during this import\r\n  - `Done` Finished\r\n  - `Error` Aborted due to error during import\r\n  - `Finishing` Finishing up, writing Data to DB\r\n  - `ImportingDefects` Importing Defects\r\n  - `ImportingRequirements` Importing Requirements\r\n  - `ImportingTestCases` Importing TestCases and TestSteps\r\n  - `ImportingTestScenarios` Importing Testscenarion WITHOUT TestJobs\r\n  - `Initializing` Preparing for reading of file\r\n  - `ReadingFile` Reading the excel file and trying to map columns to baseobject-properties\r\n",
        "x-enumNames": [
          "Initializing",
          "ReadingFile",
          "ImportingRequirements",
          "ImportingDefects",
          "ImportingTestCases",
          "ImportingTestScenarios",
          "CreatingDependencies",
          "CreatingTestJobs",
          "CreatingHierarchy",
          "Finishing",
          "Done",
          "Error"
        ],
        "enum": [
          "Initializing",
          "ReadingFile",
          "ImportingRequirements",
          "ImportingDefects",
          "ImportingTestCases",
          "ImportingTestScenarios",
          "CreatingDependencies",
          "CreatingTestJobs",
          "CreatingHierarchy",
          "Finishing",
          "Done",
          "Error"
        ]
      },
      "ApiLongOperationPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "Operation",
          "mapping": {
            "Abort": "#/components/schemas/ApiLongOperationPatchAbort"
          }
        },
        "description": "Represents patch operation that modifies 'long operation'.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Operation"
        ],
        "properties": {
          "Operation": {
            "type": "string"
          }
        }
      },
      "ApiLongOperationPatchAbort": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiLongOperationPatchOperation"
          },
          {
            "type": "object",
            "description": "Abort 'long operation' operation.",
            "additionalProperties": false
          }
        ]
      },
      "ApiCustomNotificationNew": {
        "type": "object",
        "description": "A new email notification to be send to given users.",
        "additionalProperties": false,
        "properties": {
          "Recipients": {
            "type": "array",
            "description": "List of recipients (ids of users)",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Subject": {
            "type": "string",
            "description": "Subject of the email to be send (plain text)",
            "nullable": true
          },
          "Body": {
            "type": "string",
            "description": "Body of the email to be send (plain text)",
            "nullable": true
          }
        }
      },
      "ApiUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserInfo"
          },
          {
            "type": "object",
            "description": "Contains user information for administration.",
            "additionalProperties": false,
            "properties": {
              "ServerAdministrator": {
                "type": "boolean",
                "description": "Indicates if the user is server administrator or not."
              },
              "Status": {
                "description": "The status of the user.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiUserStatus"
                  }
                ]
              },
              "Projects": {
                "type": "array",
                "description": "List of projects with roles assigned to the user.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserProjectAssignment"
                }
              },
              "Licenses": {
                "type": "array",
                "description": "List of licenses assigned to the user.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserLicenseAssignment"
                }
              },
              "LicenseProfiles": {
                "type": "array",
                "description": "List of license profiles",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiLicenseProfile"
                }
              }
            }
          }
        ]
      },
      "ApiUserStatus": {
        "type": "string",
        "description": "Identifies the user status.\r\nThis enum has the following values:\r\n  - `Activated` The user is activated.\r\n  - `Deactivated` The user is deactivated.\r\n  - `LicenseDeactivated` The license is deactivated.\r\n",
        "x-enumNames": [
          "Activated",
          "Deactivated",
          "LicenseDeactivated"
        ],
        "enum": [
          "Activated",
          "Deactivated",
          "LicenseDeactivated"
        ]
      },
      "ApiUserProjectAssignment": {
        "type": "object",
        "description": "The user project assignment information.",
        "additionalProperties": false,
        "properties": {
          "Project": {
            "description": "Assigned project, with subfolder information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiProjectIdNameHasSubfolders"
              }
            ]
          },
          "Role": {
            "description": "Assigned role.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRoleIdName"
              }
            ]
          }
        }
      },
      "ApiProjectIdNameHasSubfolders": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectIdName"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HasSubfolders": {
                "type": "boolean",
                "description": "Indicates whether this project has any subfolders. "
              }
            }
          }
        ]
      },
      "ApiUserLicenseAssignment": {
        "type": "object",
        "description": "The user license assignment information.",
        "additionalProperties": false,
        "properties": {
          "Code": {
            "type": "string",
            "description": "The code of the license.",
            "nullable": true
          },
          "Type": {
            "description": "The type of the license.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiLicenseType"
              }
            ]
          }
        }
      },
      "ApiLicenseType": {
        "type": "string",
        "description": "Identifies the type of the licens.\r\nThis enum has the following values:\r\n  - `Floated` Floated licens.\r\n  - `Named` Named licens.\r\n",
        "x-enumNames": [
          "Floated",
          "Named"
        ],
        "enum": [
          "Floated",
          "Named"
        ]
      },
      "ApiLicenseProfile": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ProfileCode": {
            "type": "string",
            "description": "The code of the license profile",
            "nullable": true
          },
          "ProfileName": {
            "type": "string",
            "description": "The name of the license profile",
            "nullable": true
          },
          "NamedTotal": {
            "type": "integer",
            "description": "The maximal number of named licenses.",
            "format": "int32"
          },
          "FloatingTotal": {
            "type": "integer",
            "description": "The maximal number of floating licenses.",
            "format": "int32"
          },
          "NamedUsed": {
            "type": "integer",
            "description": "The used number of named licenses.",
            "format": "int32"
          },
          "FloatingUsed": {
            "type": "integer",
            "description": "The used number of floating licenses.",
            "format": "int32"
          }
        }
      },
      "ApiUserMinimalInfo": {
        "type": "object",
        "description": "Represents the necessary minimal information about a user.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the user.",
            "format": "int32"
          },
          "UserName": {
            "type": "string",
            "description": "The username of the user.",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "The surname / last name of the user.",
            "nullable": true
          },
          "Status": {
            "description": "The current user status.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserStatus"
              }
            ]
          },
          "AnyActiveLicense": {
            "type": "boolean",
            "description": "If set, indicates the the user has at least one active license assigned."
          }
        }
      },
      "ApiUserNewReponse": {
        "type": "object",
        "description": "Contains information about created user.",
        "additionalProperties": false,
        "properties": {
          "UserId": {
            "type": "integer",
            "description": "The id of the user.",
            "format": "int32"
          }
        }
      },
      "ApiUserNew": {
        "type": "object",
        "description": "Represents the necessary information to create a user.",
        "additionalProperties": false,
        "properties": {
          "UserName": {
            "type": "string",
            "description": "The username of the user.",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "The surname / last name of the user.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "The email address of the user.",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "The phone number of the user.",
            "nullable": true
          },
          "Position": {
            "type": "string",
            "description": "The position of the user in the company.",
            "nullable": true
          }
        }
      },
      "ApiUpdateUser": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "UserName": {
            "type": "string",
            "description": "The new username of the user.",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "The new first name of the user.",
            "nullable": true
          },
          "Surname": {
            "type": "string",
            "description": "The new surname / last name of the user.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "The new email address of the user.",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "The new phone number of the user.",
            "nullable": true
          },
          "Position": {
            "type": "string",
            "description": "The new position of the user in the company.",
            "nullable": true
          }
        }
      },
      "ApiUserPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType",
          "mapping": {
            "DeactivateUser": "#/components/schemas/ApiUserPatchRequestDeactivateUser",
            "ActivateUser": "#/components/schemas/ApiUserPatchRequestActivateUser",
            "PasswordReset": "#/components/schemas/ApiUserPatchRequestPasswordReset",
            "SetServerAdministrator": "#/components/schemas/ApiUserPatchRequestSetServerAdministrator",
            "SetUserPassword": "#/components/schemas/ApiUserPatchRequestSetUserPassword"
          }
        },
        "description": "Represent a request to modify a user.\nActual subclasses are used, depending on OperationType. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiUserPatchRequestDeactivateUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that deactivates the user. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiUserPatchRequestActivateUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that activates the user. ",
            "additionalProperties": false
          }
        ]
      },
      "ApiUserPatchRequestPasswordReset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that resets the user password.",
            "additionalProperties": false
          }
        ]
      },
      "ApiUserPatchRequestSetServerAdministrator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that modifys server administrator flag.",
            "additionalProperties": false,
            "properties": {
              "ServerAdministrator": {
                "type": "boolean",
                "description": "Server administrator flag."
              }
            }
          }
        ]
      },
      "ApiUserPatchRequestSetUserPassword": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchRequest"
          },
          {
            "type": "object",
            "description": "Represents an operation that modifys user password.",
            "additionalProperties": false,
            "properties": {
              "NewPassword": {
                "type": "string",
                "description": "New user password.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiGetLicenseResponse": {
        "type": "object",
        "description": "Represents the get license response.",
        "additionalProperties": false,
        "properties": {
          "Licenses": {
            "type": "array",
            "description": "The list of licenses.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLicense"
            }
          }
        }
      },
      "ApiLicense": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Code": {
            "type": "string",
            "description": "The code of the license.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the license.",
            "nullable": true
          },
          "MaxNamedLicensesAvailable": {
            "type": "integer",
            "description": "The maximal number of named licenses.",
            "format": "int32"
          },
          "MaxFloatingLicensesAvailable": {
            "type": "integer",
            "description": "The maximal number of floating licenses.",
            "format": "int32"
          },
          "StartTime": {
            "type": "string",
            "description": "The start date of the license.",
            "format": "date-time"
          },
          "ExpiryTime": {
            "type": "string",
            "description": "The expire date of the license.",
            "format": "date-time"
          }
        }
      },
      "ApiPaginatedResultOfApiUserLastActivityInfo": {
        "type": "object",
        "description": "Contains a paginated result.",
        "additionalProperties": false,
        "properties": {
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.\nThis value is provided during the request.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The actual items included in this response.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiUserLastActivityInfo"
            }
          }
        }
      },
      "ApiUserLastActivityInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "LastActivity": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LicenseUsage": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLicenseProfileUtilizationInfo"
            }
          },
          "ClientId": {
            "type": "string",
            "nullable": true
          },
          "User": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "State": {
            "$ref": "#/components/schemas/ApiUserSessionState"
          },
          "ClientType": {
            "$ref": "#/components/schemas/ApiAquaClientType"
          }
        }
      },
      "ApiLicenseProfileUtilizationInfo": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Utilization": {
            "$ref": "#/components/schemas/ApiLicenseProfileUtilization"
          },
          "ProfileCode": {
            "type": "string",
            "nullable": true
          },
          "AsFloating": {
            "type": "boolean"
          }
        }
      },
      "ApiLicenseProfileUtilization": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `FloatingLicenseNotAvailable` Floating license active, but no more instances available.\r\n  - `LicenseGranted` License was granted.\n            \r\n  - `NoValidLicense` No active license.\r\n  - `ProfileDeactivatedByLicense` License active, but profile assignment was deactivated by license.\r\n",
        "x-enumNames": [
          "NoValidLicense",
          "LicenseGranted",
          "FloatingLicenseNotAvailable",
          "ProfileDeactivatedByLicense"
        ],
        "enum": [
          "NoValidLicense",
          "LicenseGranted",
          "FloatingLicenseNotAvailable",
          "ProfileDeactivatedByLicense"
        ]
      },
      "ApiUserSessionState": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Active` \r\n  - `Inactive` \r\n  - `Unknown` \r\n",
        "x-enumNames": [
          "Unknown",
          "Active",
          "Inactive"
        ],
        "enum": [
          "Unknown",
          "Active",
          "Inactive"
        ]
      },
      "ApiAquaClientType": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `API` API Client\r\n  - `Offline` Offline Desktop Client (Depricated)\r\n  - `Rich` Desktop Client\r\n  - `Unknown` Unknown or invalid client\r\n  - `Web` Web Client\r\n",
        "x-enumNames": [
          "Unknown",
          "Rich",
          "Offline",
          "Web",
          "API"
        ],
        "enum": [
          "Unknown",
          "Rich",
          "Offline",
          "Web",
          "API"
        ]
      },
      "ApiGetLicensePermissionsResponse": {
        "type": "object",
        "description": "Represents the get license permission response.",
        "additionalProperties": false,
        "properties": {
          "Permissions": {
            "type": "array",
            "description": "The list of permissions.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiPermission"
            }
          }
        }
      },
      "ApiPaginatedResultOfApiLoginIncident": {
        "type": "object",
        "description": "Contains a paginated result.",
        "additionalProperties": false,
        "properties": {
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.\nThis value is provided during the request.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The actual items included in this response.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLoginIncident"
            }
          }
        }
      },
      "ApiLoginIncident": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "CustomerId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "LoginSuccessfull": {
            "type": "boolean"
          },
          "OccurrenceDate": {
            "type": "string",
            "format": "date-time"
          },
          "ReasonCode": {
            "$ref": "#/components/schemas/ApiLoginIncidentReason"
          },
          "ReasonData": {
            "type": "string",
            "nullable": true
          },
          "ClientType": {
            "$ref": "#/components/schemas/ApiAquaClientType"
          },
          "ClientId": {
            "type": "string",
            "nullable": true
          },
          "Relogin": {
            "type": "boolean"
          },
          "User": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          }
        }
      },
      "ApiLoginIncidentReason": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `AuthenticationFailure` User not authenticated (neither by external module, if any, nor by our mechanism; usually means invalid username or password).\r\n  - `CustomerDeactivated` The customer is deactivated.\r\n  - `FloatingLicenseNotAvailable` Not possible to obtain a floating license (all in use).\r\n  - `NoActiveLicenseAssignment` User is assigned with a license(s) but all assignments are deactivated.\r\n  - `NoLicenseAssignment` User is not assigned with any license.\r\n  - `NoLoginPermission` User is assigned with some valid licenses, but they does not include a login permission for given client type.\r\n  - `NotMemberOfCustomer` The user is not a member of the current customer.\r\n  - `Unknown` unknown reason (or no reason).\r\n  - `UserDeactivated` User is deactivated.\r\n  - `UserDeleted` User is deleted.\r\n  - `UsernameNotUnique` Indicates that the username is not unique. This might happen\nwhen different users have the same username in different capitalizations.\r\n",
        "x-enumNames": [
          "Unknown",
          "FloatingLicenseNotAvailable",
          "NoLicenseAssignment",
          "NoActiveLicenseAssignment",
          "NoLoginPermission",
          "AuthenticationFailure",
          "UserDeactivated",
          "UserDeleted",
          "NotMemberOfCustomer",
          "CustomerDeactivated",
          "UsernameNotUnique"
        ],
        "enum": [
          "Unknown",
          "FloatingLicenseNotAvailable",
          "NoLicenseAssignment",
          "NoActiveLicenseAssignment",
          "NoLoginPermission",
          "AuthenticationFailure",
          "UserDeactivated",
          "UserDeleted",
          "NotMemberOfCustomer",
          "CustomerDeactivated",
          "UsernameNotUnique"
        ]
      },
      "ApiUserLicenseAssignmentPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "OperationType"
        },
        "description": "Represent the necessary information to change the license type.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "OperationType"
        ],
        "properties": {
          "OperationType": {
            "type": "string"
          }
        }
      },
      "ApiUserLicenseAssignmentChangeLicenseTypePatchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserLicenseAssignmentPatchRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "NewLicenseType": {
                "description": "The new license type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiLicenseType"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiCreateLoginLinkResponse": {
        "type": "object",
        "description": "The response containing a URL that is only valid for\na short period of time (default 10 minutes)",
        "additionalProperties": false,
        "properties": {
          "Url": {
            "type": "string",
            "description": "The URL containing the token that can be used to\nconnect to aqua for a limited time ",
            "nullable": true
          }
        }
      },
      "ApiTestCase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemWithDescription"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HasSteps": {
                "type": "boolean",
                "description": "True if test case has any steps. "
              },
              "HasData": {
                "type": "boolean",
                "description": "True if test case is parametrized i.e. value set needs to be selected before \nstarting execution of this test case. \nPlease note actual test data may be owned by another test case (i.e. is \"referenced\" only here)"
              },
              "HasExecutions": {
                "type": "boolean",
                "description": "True if test case has at least one execution."
              },
              "LastExecutionStatus": {
                "description": "Contains information about the last execution status.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestCaseRunStatus"
                  }
                ]
              },
              "LastExecutionId": {
                "type": "integer",
                "description": "Contains id of the last execution.",
                "format": "int32",
                "nullable": true
              },
              "TestCaseExecutionDefaults": {
                "description": "Contains the test case execution defaults.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestCaseExecutionDefaults"
                  }
                ]
              },
              "RequiredAgentTechnologies": {
                "type": "array",
                "description": "Contains the information about required agent technologies.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiAutomationTechnology"
                }
              },
              "SupportsAutomaticExecution": {
                "description": "Information about the support level of the automatic execution.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAutomaticExecutionSupport"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestCaseExecutionDefaults": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestCaseExecutionDefaultsBase"
          },
          {
            "type": "object",
            "description": "Contains information about the test case execution defaults.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "the id of the test case execution default.",
                "format": "int32"
              },
              "TestCaseId": {
                "type": "integer",
                "description": "The id of the test case.",
                "format": "int32"
              },
              "Agent": {
                "description": "The id and name of the agent.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAgentIdAndName"
                  }
                ]
              },
              "CustomFields": {
                "type": "array",
                "description": "The list of custom fields.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFieldWithValue"
                }
              },
              "EditLayout": {
                "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEditLayout"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestCaseExecutionDefaultsBase": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ValueSetGuid": {
            "type": "string",
            "description": "The value set guid.",
            "nullable": true
          },
          "TestedVersion": {
            "type": "string",
            "description": "The tested version.",
            "nullable": true
          },
          "Labels": {
            "type": "array",
            "description": "On creation of a test execution those labels are copied over as ApiLabelAttached.\nVersion is not checked and can be null.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          }
        }
      },
      "ApiAutomaticExecutionSupport": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Complete` Automatic execution complete supported.\r\n  - `None` Automatic execution not supported.\r\n  - `Partially` Automatic execution partially supported.\r\n",
        "x-enumNames": [
          "None",
          "Partially",
          "Complete"
        ],
        "enum": [
          "None",
          "Partially",
          "Complete"
        ]
      },
      "ApiItemUpdateWithTestDataAndTestSteps": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemUpdateWithDescription"
          },
          {
            "type": "object",
            "description": "Specifies the changes to perform on a specific item including its\ntest data and test steps.",
            "additionalProperties": false,
            "properties": {
              "TestData": {
                "description": "Contains the updated test data.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestDataUpdate"
                  }
                ]
              },
              "TestSteps": {
                "description": "Contains the updated information for the test steps.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestStepsUpdate"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestDataUpdate": {
        "type": "object",
        "discriminator": {
          "propertyName": "Variant",
          "mapping": {
            "Local": "#/components/schemas/ApiTestDataUpdateLocal",
            "ReferencedTestCase": "#/components/schemas/ApiTestDataUpdateReferencedTestCase"
          }
        },
        "description": "Base class for updated test data of a test case.\nThis class is abstract, not intended to be used directly. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Variant"
        ],
        "properties": {
          "Variant": {
            "type": "string"
          }
        }
      },
      "ApiTestDataUpdateLocal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataUpdate"
          },
          {
            "type": "object",
            "description": "Represents test data to be updated as \"local\" i.e. owned by current test case. ",
            "additionalProperties": false,
            "required": [
              "ValueSets",
              "Variables",
              "Values"
            ],
            "properties": {
              "ValueSets": {
                "type": "array",
                "description": "The value sets which are part of the test data.",
                "items": {
                  "$ref": "#/components/schemas/ApiTestDataUpdateValueSet"
                }
              },
              "Variables": {
                "type": "array",
                "description": "The variables which are part of the test data.",
                "items": {
                  "$ref": "#/components/schemas/ApiTestDataUpdateVariable"
                }
              },
              "Values": {
                "type": "array",
                "description": "The actual values contained in the test data. The table\nis a two-dimensional array which contains for each value\nset a list of values. The data is ordered according to\nthe ValueSets and Variables list.",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiTestDataUpdateValueSet": {
        "type": "object",
        "description": "Contains the meta data of a certain value set in the test data.",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The GUID of the value set.\nMust be null for newly created values sets.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the value set.",
            "minLength": 1
          }
        }
      },
      "ApiTestDataUpdateVariable": {
        "type": "object",
        "description": "Contains the meta data of a certain variable in the test data.",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The variable name.",
            "minLength": 1
          }
        }
      },
      "ApiTestDataUpdateReferencedTestCase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataUpdate"
          },
          {
            "type": "object",
            "description": "Represents test data referenced from another test case. ",
            "additionalProperties": false,
            "properties": {
              "ReferencedTestCaseId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiTestStepsUpdate": {
        "type": "object",
        "description": "Contains a list of different changes which should be applied to the\ntest step collection.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "A list with the new test steps which should be added.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestStepNew"
            }
          },
          "Modified": {
            "type": "array",
            "description": "A list with test steps which should be updated.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestStepUpdateWithId"
            }
          },
          "Removed": {
            "type": "array",
            "description": "A list with the ids of the test steps which should be removed.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiTestStepNew": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestStepBase"
          },
          {
            "type": "object",
            "description": "A new test step of a test case.",
            "additionalProperties": false,
            "properties": {
              "Automation": {
                "description": "Automation part of a test step. \nLack of automation is represented either by null or by object with Technology=None",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAutomationSave"
                  }
                ]
              },
              "NestedTestCase": {
                "description": "Contains information about nested test case.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiNestedTestCaseInfoNew"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiAutomationSave": {
        "type": "object",
        "description": "Automation part of a test step, as used when saving data.",
        "additionalProperties": false,
        "properties": {
          "ScriptId": {
            "type": "integer",
            "description": "If not zero indicates that automation script (represented by this object) is from script library. \nIn such case update is only possible via corresponding Script item, not via Test Case. ",
            "format": "int32"
          },
          "Script": {
            "description": "Automation script details. Content depends on Technology.\nIf ScriptId is not zero, the Script attribute should not be provided at all.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationScriptSave"
              }
            ]
          }
        }
      },
      "ApiAutomationScriptSave": {
        "type": "object",
        "discriminator": {
          "propertyName": "Technology",
          "mapping": {
            "Database": "#/components/schemas/ApiAutomationScriptDatabaseSave",
            "Jenkins": "#/components/schemas/ApiAutomationScriptJenkinsSave",
            "JMeter": "#/components/schemas/ApiAutomationScriptJMeterSave",
            "None": "#/components/schemas/ApiAutomationScriptNoneSave",
            "PowerShell": "#/components/schemas/ApiAutomationScriptPowerShellSave",
            "QTP": "#/components/schemas/ApiAutomationScriptQTPSave",
            "Ranorex": "#/components/schemas/ApiAutomationScriptRanorexSave",
            "SoapUI": "#/components/schemas/ApiAutomationScriptSoapUISave",
            "UFT": "#/components/schemas/ApiAutomationScriptUFTSave",
            "UnixShell": "#/components/schemas/ApiAutomationScriptUnixShellSave"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Technology"
        ],
        "properties": {
          "IsNew": {
            "type": "boolean",
            "description": "Indicates whether data represent a new (transient) content or an update of existing content. \nShould be set to true if we are saving a new automation into step that previously contained any automation already."
          },
          "Technology": {
            "type": "string"
          }
        }
      },
      "ApiAutomationScriptDatabaseSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptNotSupportedSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptSave"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptJenkinsSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShellSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptShellSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptWithAttachedFilesSave"
          },
          {
            "type": "object",
            "description": "Automation part of a test step, as used when saving data.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "ScriptContent": {
                "type": "string",
                "description": "Script content. ",
                "nullable": true
              },
              "Profile": {
                "type": "string",
                "description": "Code of shell profile to be used (if any)",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiAutomationScriptWithAttachedFilesSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptSave"
          },
          {
            "type": "object",
            "description": "A base class for models of automation that support attached files (e.g. shell, qtp etc.)\nused in save operations. ",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "NewFiles": {
                "type": "array",
                "description": "A list of files to be added. \nNote that each file includes Position (zero based index) where to insert the new file. \nServer at first deletes all files listed in 'DeletedFiles' and then inserts new files. \nIn-place modification of attached files is not supported, thus modification is \nachieved by deleting existing attachment and adding a new one. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiAutomationAttachedScriptFileNew"
                }
              },
              "DeletedFiles": {
                "type": "array",
                "description": "A list of files (their ids) to be removed.",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiAutomationAttachedScriptFileNew": {
        "type": "object",
        "description": "An attachment which should be created as part of a list of attachment\nchanges for a certain item. The file attach must have been uploaded to\n/File beforehand.The InsertAt property indicates where on the list \nthe new attachment should be located. ",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The ID of the temporary upload which should be added as the new\nattachment. The temporary upload can be created with the \n[UploadFile](#operation/File_UploadFile)\nendpoint.",
            "format": "guid"
          },
          "InsertAt": {
            "type": "integer",
            "description": "Location where to insert the new file. ",
            "format": "int32"
          }
        }
      },
      "ApiAutomationScriptJMeterSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptNoneSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptPowerShellSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShellSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptQTPSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptRanorexSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptSoapUISave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptUFTSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupportedSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptUnixShellSave": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShellSave"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiNestedTestCaseInfoNew": {
        "type": "object",
        "description": "Contains information about nested test case.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the nested test case, set the id only if the type is nested test case.",
            "format": "int32"
          },
          "NestedTestCaseValueSetGuid": {
            "type": "string",
            "description": "The guid of the value set, set the guid only if the type is nested test case.",
            "nullable": true
          },
          "NestedTestCaseVariablesInheritance": {
            "description": "Defines the source of variables.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNestedTestCaseVariablesInheritance"
              }
            ]
          }
        }
      },
      "ApiNestedTestCaseVariablesInheritance": {
        "type": "string",
        "description": "Identifies the source of variables.\r\nThis enum has the following values:\r\n  - `PreferNested` Variable source is from nested test case.\r\n  - `PreferOuter` Variable source is from host test case.\r\n",
        "x-enumNames": [
          "PreferOuter",
          "PreferNested"
        ],
        "enum": [
          "PreferOuter",
          "PreferNested"
        ]
      },
      "ApiTestStepBase": {
        "type": "object",
        "description": "A base class representing test step of a test case.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Test step name.",
            "nullable": true
          },
          "Index": {
            "type": "integer",
            "description": "The index of this test step.",
            "format": "int32"
          },
          "Description": {
            "description": "The description of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ExpectedResult": {
            "description": "The expected result of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResultTemplate": {
            "description": "The actual result template of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "StepType": {
            "description": "The type of this test step.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepType"
              }
            ]
          }
        }
      },
      "ApiTestStepType": {
        "type": "string",
        "description": "Identifies the type of an execution.\r\nThis enum has the following values:\r\n  - `Condition` Represents 'condition'\r\n  - `NestedTestCase` Only for internal use.\r\n  - `Step` Represents 'step'\r\n",
        "x-enumNames": [
          "Step",
          "Condition",
          "NestedTestCase"
        ],
        "enum": [
          "Step",
          "Condition",
          "NestedTestCase"
        ]
      },
      "ApiTestStepUpdateWithId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestStepUpdate"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "Test step id.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiTestStepUpdate": {
        "type": "object",
        "description": "Contains update Information for a test step of a test case.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "Test step name. When the value is null, it will be ignored.",
            "nullable": true
          },
          "Index": {
            "type": "integer",
            "description": "The index of this test step.",
            "format": "int32"
          },
          "Description": {
            "description": "The description of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ExpectedResult": {
            "description": "The expected result of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResultTemplate": {
            "description": "The actual result template of the test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "NestedTestCase": {
            "description": "Contains information about nested test case.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNestedTestCaseInfoUpdate"
              }
            ]
          },
          "Automation": {
            "description": "Automation part of the test step. \nIf null, then automation is not updated. \nTo represent update that clears automation please use instance of ApiAutomationScriptEmptySave",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationSave"
              }
            ]
          }
        }
      },
      "ApiNestedTestCaseInfoUpdate": {
        "type": "object",
        "description": "Contains update information for the nested test case.",
        "additionalProperties": false,
        "properties": {
          "NestedTestCaseValueSetGuid": {
            "type": "string",
            "description": "The guid of the value set, set the guid only if the type is nested test case.",
            "nullable": true
          },
          "NestedTestCaseVariablesInheritance": {
            "description": "Defines the source of variables.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNestedTestCaseVariablesInheritance"
              }
            ]
          }
        }
      },
      "ApiItemNewWithTestDataAndTestSteps": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemNewWithDescription"
          },
          {
            "type": "object",
            "description": "Contains the necessary data to create a new item including its test data.",
            "additionalProperties": false,
            "properties": {
              "TestData": {
                "description": "Contains the updated test data.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestDataNew"
                  }
                ]
              },
              "TestSteps": {
                "type": "array",
                "description": "Contains the test steps.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestStepNew"
                }
              }
            }
          }
        ]
      },
      "ApiTestDataNew": {
        "type": "object",
        "discriminator": {
          "propertyName": "Variant",
          "mapping": {
            "Local": "#/components/schemas/ApiTestDataNewLocal",
            "ReferencedTestCase": "#/components/schemas/ApiTestDataNewReferencedTestCase"
          }
        },
        "description": "Base class for models used when providing test data during test case creation. \nThis class is abstract, not intended to be used directly. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Variant"
        ],
        "properties": {
          "Variant": {
            "type": "string"
          }
        }
      },
      "ApiTestDataNewLocal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataNew"
          },
          {
            "type": "object",
            "description": "Represents test data to be used as \"local\" (i.e. owned by current test case). ",
            "additionalProperties": false,
            "required": [
              "ValueSets",
              "Variables",
              "Values"
            ],
            "properties": {
              "ValueSets": {
                "type": "array",
                "description": "The value sets which are part of the test data.",
                "items": {
                  "$ref": "#/components/schemas/ApiTestDataNewValueSet"
                }
              },
              "Variables": {
                "type": "array",
                "description": "The variables which are part of the test data.",
                "items": {
                  "$ref": "#/components/schemas/ApiTestDataNewVariable"
                }
              },
              "Values": {
                "type": "array",
                "description": "The actual values contained in the test data. The table\nis a two-dimensional array which contains for each value\nset a list of values. The data is ordered according to\nthe ValueSets and Variables list.",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ApiTestDataNewValueSet": {
        "type": "object",
        "description": "Contains the meta data of a value set to be created in the test data.",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the value set.",
            "minLength": 1
          }
        }
      },
      "ApiTestDataNewVariable": {
        "type": "object",
        "description": "Contains the meta data of a variable to be created in the test data.",
        "additionalProperties": false,
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The variable name.",
            "minLength": 1
          }
        }
      },
      "ApiTestDataNewReferencedTestCase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataNew"
          },
          {
            "type": "object",
            "description": "Represents test data referenced from another test case.",
            "additionalProperties": false,
            "properties": {
              "ReferencedTestCaseId": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiTestCaseExecutionDefaultsUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestCaseExecutionDefaultsBase"
          },
          {
            "type": "object",
            "description": "Contains necessary information for the test case execution defaults update.",
            "additionalProperties": false,
            "properties": {
              "AgentId": {
                "type": "integer",
                "description": "The agent id (or null, if saving executions for non-automated test case). ",
                "format": "int32",
                "nullable": true
              },
              "CustomFields": {
                "type": "array",
                "description": "The list of custom fields.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiFieldUpdate"
                }
              }
            }
          }
        ]
      },
      "ApiTestStep": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestStepBase"
          },
          {
            "type": "object",
            "description": "A persistent test step of a test case.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The id of the test step.",
                "format": "int32"
              },
              "Automation": {
                "description": "Automation part of a test step. \nLack of automation is represented by an object with Technology=None.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiAutomation"
                  }
                ]
              },
              "NestedTestCase": {
                "description": "Contains information about nested test case.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiNestedTestCaseInfo"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiAutomation": {
        "type": "object",
        "description": "Automation part of a test step, as used when loading data. ",
        "additionalProperties": false,
        "properties": {
          "ScriptId": {
            "type": "integer",
            "description": "If not zero indicates that automation script (represented by this object) is referenced from script library. ",
            "format": "int32"
          },
          "Script": {
            "description": "Automation script details. Content depends on Technology.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationScript"
              }
            ]
          }
        }
      },
      "ApiAutomationScript": {
        "type": "object",
        "discriminator": {
          "propertyName": "Technology",
          "mapping": {
            "Database": "#/components/schemas/ApiAutomationScriptDatabase",
            "Jenkins": "#/components/schemas/ApiAutomationScriptJenkins",
            "JMeter": "#/components/schemas/ApiAutomationScriptJMeter",
            "None": "#/components/schemas/ApiAutomationScriptNone",
            "PowerShell": "#/components/schemas/ApiAutomationScriptPowerShell",
            "QTP": "#/components/schemas/ApiAutomationScriptQTP",
            "Ranorex": "#/components/schemas/ApiAutomationScriptRanorex",
            "SoapUI": "#/components/schemas/ApiAutomationScriptSoapUI",
            "UFT": "#/components/schemas/ApiAutomationScriptUFT",
            "UnixShell": "#/components/schemas/ApiAutomationScriptUnixShell"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Technology"
        ],
        "properties": {
          "Technology": {
            "type": "string"
          }
        }
      },
      "ApiAutomationScriptDatabase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptNotSupported": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScript"
          },
          {
            "type": "object",
            "x-abstract": true,
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptJenkins": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShell"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptShell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptWithAttachedFiles"
          },
          {
            "type": "object",
            "description": "Automation part of a test step, as used when loading data.",
            "x-abstract": true,
            "additionalProperties": false,
            "properties": {
              "ScriptContent": {
                "type": "string",
                "description": "Script content. ",
                "nullable": true
              },
              "Profile": {
                "type": "string",
                "description": "Code of shell profile to be used (if any)",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiAutomationScriptWithAttachedFiles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScript"
          },
          {
            "type": "object",
            "description": "A base class for models of automation that support attached files (e.g. shell, qtp etc.)\nused in load operations. ",
            "additionalProperties": false,
            "properties": {
              "AttachedFiles": {
                "type": "array",
                "description": "A list of attached files.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiAutomationAttachedScriptFileInfo"
                }
              }
            }
          }
        ]
      },
      "ApiAutomationAttachedScriptFileInfo": {
        "type": "object",
        "description": "Meta information for an attached file (used in some types of automation e.g. in PowerShell)\nContains e.g. file name and size. This structure does not contain the content of \nthe attachment which must be requested separately.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the attachment.",
            "format": "int32"
          },
          "Filename": {
            "type": "string",
            "description": "The full file name of the attachment including the file extension.",
            "nullable": true
          },
          "FileExtension": {
            "type": "string",
            "description": "The file extension of the attachment.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "The size of the attachment in bytes.",
            "format": "int64"
          },
          "ViewUrl": {
            "type": "string",
            "description": "The url where the content of the attachment is located. For this url,\nthe API will force browsers to display the content by setting the\ncontent-disposition header to inline.",
            "nullable": true
          },
          "DownloadUrl": {
            "type": "string",
            "description": "The url where the content of the attachment is located. For this url,\nthe API will force browsers to download the file by setting the\ncontent-disposition header to attachment.",
            "nullable": true
          }
        }
      },
      "ApiAutomationScriptJMeter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptNone": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScript"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptPowerShell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShell"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptQTP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptRanorex": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptSoapUI": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptUFT": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptNotSupported"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomationScriptUnixShell": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomationScriptShell"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiNestedTestCaseInfo": {
        "type": "object",
        "description": "Contains information about nested test case.",
        "additionalProperties": false,
        "properties": {
          "NestedTestCaseAccessibility": {
            "description": "Contains the information about accessbility of the test case.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiBaseItemAccessibility"
              }
            ]
          },
          "HasVariables": {
            "type": "boolean",
            "description": "No set if NestedTestCaseAccessibility is set to NoPermissions, true if test case contains any variables otherwise false.",
            "nullable": true
          },
          "Id": {
            "type": "integer",
            "description": "The id of the nested test case, set the id only if the type is nested test case.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the nested test case.",
            "nullable": true
          },
          "NestedTestCaseValueSet": {
            "description": "The value set, only set if the type is nested test case, if the ValueSet from the nested test case is deleted guid and name will be null.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestDataReferencedValueSetInfo"
              }
            ]
          },
          "NestedTestCaseVariablesInheritance": {
            "description": "Defines the source of variables.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNestedTestCaseVariablesInheritance"
              }
            ]
          }
        }
      },
      "ApiBaseItemAccessibility": {
        "type": "string",
        "description": "Identifies the test case accessibility.\r\nThis enum has the following values:\r\n  - `Accessible` The test case is accessible.\r\n  - `Archived` The test case is archived\r\n  - `Deleted` The test case is deleted.\r\n  - `NoPermissions` No permissions to access the test case.\r\n",
        "x-enumNames": [
          "Accessible",
          "Deleted",
          "NoPermissions",
          "Archived"
        ],
        "enum": [
          "Accessible",
          "Deleted",
          "NoPermissions",
          "Archived"
        ]
      },
      "ApiTestDataReferencedValueSetInfo": {
        "type": "object",
        "description": "Contains the meta data of certain value set which is referenced\nsomewhere (e.g. test step or test job).",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The GUID of the value set.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the value set. Is null, when the\nvalue set has been deleted.",
            "nullable": true
          },
          "Deleted": {
            "type": "boolean",
            "description": "Indicates whether the value set has been deleted."
          }
        }
      },
      "ApiAddSingleTestStepResponse": {
        "type": "object",
        "description": "Contains information about created test step.",
        "additionalProperties": false,
        "properties": {
          "TestStepId": {
            "type": "integer",
            "description": "The id of the test step.",
            "format": "int32"
          }
        }
      },
      "ApiTestCaseCreateMeta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemCreateMeta"
          },
          {
            "type": "object",
            "description": "Contains the metadata which is necessary for creating a new test case",
            "additionalProperties": false,
            "properties": {
              "RequireExpectedResults": {
                "type": "boolean",
                "description": "If set, then 'Expected Results' field is mandatory when defining a test case. "
              }
            }
          }
        ]
      },
      "ApiTestCaseEditMeta": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemEditMeta"
          },
          {
            "type": "object",
            "description": "Contains the metadata of fields of a test case being edited.",
            "additionalProperties": false,
            "properties": {
              "RequireExpectedResults": {
                "type": "boolean",
                "description": "If set, then 'Expected Results' field is mandatory when defining a test case. "
              }
            }
          }
        ]
      },
      "ApiTestDataValueSetUpdate": {
        "type": "object",
        "description": "Contains information about updated value set (along with values). \nVariables ()number and names) must match existing test data. ",
        "additionalProperties": false,
        "properties": {
          "ValueSetName": {
            "type": "string",
            "description": "The name of the value set.",
            "nullable": true
          },
          "Variables": {
            "type": "array",
            "description": "The variables contained in this value set together with their\nvalues.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestDataVariableWithValue"
            }
          }
        }
      },
      "ApiTestDataVariableWithValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataVariable"
          },
          {
            "type": "object",
            "description": "Represents a variable with its value in a certain\nvalue set.",
            "additionalProperties": false,
            "properties": {
              "Value": {
                "type": "string",
                "description": "The value the variable has in the current value set.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiTestDataVariable": {
        "type": "object",
        "description": "Contains the meta data of a certain variable in the test data.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The variable name.",
            "nullable": true
          }
        }
      },
      "ApiTestDataValueSetNew": {
        "type": "object",
        "description": "Contains information about new value set (along with values) \nto be part of test data (of a test case).",
        "additionalProperties": false,
        "properties": {
          "ValueSetName": {
            "type": "string",
            "description": "The name of the value set.",
            "nullable": true
          },
          "Variables": {
            "type": "array",
            "description": "The variables contained in this value set together with their\nvalues.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestDataVariableWithValue"
            }
          }
        }
      },
      "ApiTestData": {
        "type": "object",
        "discriminator": {
          "propertyName": "Variant",
          "mapping": {
            "Local": "#/components/schemas/ApiTestDataLocal",
            "ReferencedTestCase": "#/components/schemas/ApiTestDataReferencedTestCase"
          }
        },
        "description": "Contains the test data of test case.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Variant"
        ],
        "properties": {
          "ValueSets": {
            "type": "array",
            "description": "The value sets which are part of the test data.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestDataValueSetInfo"
            }
          },
          "Variables": {
            "type": "array",
            "description": "The variables which are part of the test data.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestDataVariable"
            }
          },
          "Values": {
            "type": "array",
            "description": "The actual values contained in the test data. The table\nis a two-dimensional array which contains for each value\nset a list of values. The data is ordered according to\nthe ValueSets and Variables list.",
            "nullable": true,
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "Fields": {
            "type": "array",
            "description": "The list of fields that can be used as replacement\nplaceholders in the TestCase",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldPlaceholder"
            }
          },
          "Variant": {
            "type": "string"
          }
        }
      },
      "ApiTestDataValueSetInfo": {
        "type": "object",
        "description": "Contains the meta data of a certain value set in the test data.",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The GUID of the value set.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "The name of the value set.",
            "nullable": true
          }
        }
      },
      "ApiFieldPlaceholder": {
        "type": "object",
        "description": "A placeholder field to be replaced with a value from the\nTestCase on test execution ",
        "additionalProperties": false,
        "properties": {
          "Placeholder": {
            "type": "string",
            "description": "The placeholder text for this field",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "The field title for UI purposes",
            "nullable": true
          },
          "FieldId": {
            "type": "string",
            "description": "The internal Id for the field.",
            "nullable": true
          },
          "FieldType": {
            "description": "The type of the field.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldType"
              }
            ]
          }
        }
      },
      "ApiTestDataLocal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestData"
          },
          {
            "type": "object",
            "description": "Represents \"local\" test data (in a test case) i.e. owned by this test case. \nSuch test data can be modified in scope of this test case. ",
            "additionalProperties": false,
            "properties": {
              "IsReferenced": {
                "type": "boolean",
                "description": "If not null, indicates whether this local test data is already referenced by other test cases. \nYou need to provide 'IsReferenced' as an option to 'include' parameter in order to \nrequest initialization of this field. ",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiTestDataReferencedTestCase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestData"
          },
          {
            "type": "object",
            "description": "Represents \"referenced\" test data (in a test case) i.e. owned by another test case. \nSuch test data cannot be modified in scope of current test case \n(please modify it in context of its owner test case)",
            "additionalProperties": false,
            "properties": {
              "ReferencedTestCaseId": {
                "type": "integer",
                "description": "Id of the referenced test case test data is shared from. ",
                "format": "int32"
              },
              "TestCaseAccessibility": {
                "description": "Information about accessibility of the other test case (owner of referenced test data).",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiBaseItemAccessibility"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestDataPreview": {
        "type": "object",
        "description": "This model is used when generating a \"preview\" of test data i.e. request server to provide \nactual data for all formulas included in the data. ",
        "additionalProperties": false,
        "properties": {
          "Values": {
            "type": "array",
            "description": "Content of test data matrix. \nOuter array represent rows, inner arrays represent cells in the row. ",
            "nullable": true,
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ApiTestDataValueSet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestDataValueSetInfo"
          },
          {
            "type": "object",
            "description": "A value set with its values.",
            "additionalProperties": false,
            "properties": {
              "Variables": {
                "type": "array",
                "description": "The variables contained in this value set together with their\nvalues.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestDataVariableWithValue"
                }
              }
            }
          }
        ]
      },
      "ApiTestDataFileFormat": {
        "type": "string",
        "description": "The file format in which the test data should be exported.\r\nThis enum has the following values:\r\n  - `CSV` CSV\r\n  - `XLS` The old Excel file format (97-2003)\r\n  - `XLSX` The new Excel file format (2007+)\r\n  - `XML` XML\r\n\r\nThis enum has the following values:\r\n  - `CSV` CSV\r\n  - `XLS` The old Excel file format (97-2003)\r\n  - `XLSX` The new Excel file format (2007+)\r\n  - `XML` XML\r\n",
        "x-enumNames": [
          "XLS",
          "XLSX",
          "XML",
          "CSV"
        ],
        "enum": [
          "XLS",
          "XLSX",
          "XML",
          "CSV"
        ]
      },
      "ApiTestExecutionInfo": {
        "type": "object",
        "description": "Contains basic information information of a test execution. Especially,\nthe step executions are not included here.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the execution.",
            "format": "int32"
          },
          "FormattedId": {
            "type": "string",
            "description": "The formatted id of the execution.",
            "nullable": true
          },
          "Guid": {
            "type": "string",
            "description": "Guid of the execution.",
            "nullable": true
          },
          "TestExecutionType": {
            "description": "Type of the execution.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionType"
              }
            ]
          },
          "TestCaseId": {
            "type": "integer",
            "description": "Id of the test case the execution is related to.",
            "format": "int32"
          },
          "TestCaseName": {
            "type": "string",
            "description": "Name of the test case the execution is related to.",
            "nullable": true
          },
          "TestCaseFormattedId": {
            "type": "string",
            "description": "Formatted name of the test case the execution is related to.",
            "nullable": true
          },
          "LastEditor": {
            "description": "Last editor of this execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "Tester": {
            "description": "Tester assigned to the execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "ExecutionDate": {
            "description": "Date of the execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "LastModified": {
            "description": "Date of last modification",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "ExecutionDuration": {
            "description": "Duration of the execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueTimeSpan"
              }
            ]
          },
          "Status": {
            "description": "Execution status - aggregated over all steps",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionStatus"
              }
            ]
          },
          "ValueSetName": {
            "type": "string",
            "description": "Name of the value set used (or none)",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "description": "Version",
            "format": "int32"
          },
          "TestedVersion": {
            "type": "string",
            "description": "Tested version",
            "nullable": true
          },
          "IrrelevantFlaggedBy": {
            "description": "User who marked the execution as irrelevant (if any)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "IrrelevantFlaggedAt": {
            "description": "Date when execution has been marked as irrelevant (if was)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "IrrelevantReason": {
            "type": "string",
            "description": "Reason why execution has been marked as irrelevant (if was)",
            "nullable": true
          },
          "Irrelevant": {
            "type": "boolean",
            "description": "True if execution has been marked as irrelevent. "
          },
          "AgentToUse": {
            "type": "string",
            "description": "Agents selected for this execution. Can be a pool (especially if execution consists of mixuture of different steps) ",
            "nullable": true
          },
          "IsFinalized": {
            "type": "boolean",
            "description": "True if execution is finalized. "
          },
          "HasAttachment": {
            "type": "boolean",
            "description": "True if execution has any attachments. "
          },
          "HasDefect": {
            "type": "boolean",
            "description": "True if execution has any defetcs related. "
          },
          "TestScenarioInfo": {
            "description": "Contains information specific for the execution in scope\nof a test scenario. Can be null, if the execution was not in scope of a test scenario.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionTestScenarioInfo"
              }
            ]
          },
          "AttachedLabels": {
            "type": "array",
            "description": "Contains labels attached to this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelAttached"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "Contains the custom fields of this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldWithValue"
            }
          },
          "HistoryTestCase": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItem"
              }
            ]
          }
        }
      },
      "ApiTestExecutionType": {
        "type": "string",
        "description": "Identifies the type of an execution.\r\nThis enum has the following values:\r\n  - `Automated` Represents automated execution.\r\n  - `Manual` Represents manual execution.\r\n",
        "x-enumNames": [
          "Manual",
          "Automated"
        ],
        "enum": [
          "Manual",
          "Automated"
        ]
      },
      "ApiTestExecutionStatus": {
        "type": "string",
        "description": "Identifies the status of an execution.\r\nThis enum has the following values:\r\n  - `Aborted` Execution has been aborted. \r\n  - `Blocked` At least one executed step was blocked, and there were no failures (only considered for manual tests)\r\n  - `Failed` At least one executed step marked as failed. \r\n  - `Incomplete` Some steps executed, but at least one step was not executed (and no failures or blocked yet). \r\n  - `InProgress` Execution is in progress.\r\n  - `NotApplicable` All steps were not applicable to the execution\r\n  - `NotRun` No steps executed yet. \r\n  - `Pass` All steps executed and passed. \r\n  - `Queued` The step is queued for automated execution.\r\n  - `Waiting` An execution was started and a step is waiting for pickup by agent\r\n",
        "x-enumNames": [
          "NotRun",
          "Incomplete",
          "Failed",
          "Pass",
          "Queued",
          "InProgress",
          "Aborted",
          "Blocked",
          "Waiting",
          "NotApplicable"
        ],
        "enum": [
          "NotRun",
          "Incomplete",
          "Failed",
          "Pass",
          "Queued",
          "InProgress",
          "Aborted",
          "Blocked",
          "Waiting",
          "NotApplicable"
        ]
      },
      "ApiTestExecutionTestScenarioInfo": {
        "type": "object",
        "description": "Contains information specific for the execution\nin scope of a test scenario.",
        "additionalProperties": false,
        "properties": {
          "Index": {
            "type": "integer",
            "description": "The index of this execution in the test scenario\nexecution. The index does not need to be consecutive as partial\nexecution of a test scenario is allowed.",
            "format": "int32"
          },
          "RunDependency": {
            "type": "array",
            "description": "The run dependencies for this execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRunDependencyEntry"
            }
          },
          "TestScenarioId": {
            "type": "integer",
            "description": "The id of the test scenario in scope of which this execution\nis performed.",
            "format": "int32"
          },
          "TestScenarioExecutionId": {
            "type": "integer",
            "description": "If of the related test scenario execution.",
            "format": "int32"
          },
          "TestJobId": {
            "type": "integer",
            "description": "The id of the test job to which this execution belongs.",
            "format": "int32"
          },
          "ExecutionStatistics": {
            "description": "Aggregated status of all test executions.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestScenarioExecutionStatistics"
              }
            ]
          }
        }
      },
      "ApiRunDependencyEntry": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "RunIndex",
          "OnSuccessOnly"
        ],
        "properties": {
          "RunIndex": {
            "type": "integer",
            "description": "Dependecy on run index.",
            "format": "int32"
          },
          "OnSuccessOnly": {
            "type": "boolean",
            "description": "Describes if true this is a hard dependency otherwise this is a soft dependecy."
          }
        }
      },
      "ApiTestScenarioExecutionStatistics": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "NotRun": {
            "type": "integer",
            "format": "int32"
          },
          "Incomplete": {
            "type": "integer",
            "format": "int32"
          },
          "Failed": {
            "type": "integer",
            "format": "int32"
          },
          "Pass": {
            "type": "integer",
            "format": "int32"
          },
          "Queued": {
            "type": "integer",
            "format": "int32"
          },
          "InProgress": {
            "type": "integer",
            "format": "int32"
          },
          "Aborted": {
            "type": "integer",
            "format": "int32"
          },
          "Blocked": {
            "type": "integer",
            "format": "int32"
          },
          "Waiting": {
            "type": "integer",
            "format": "int32"
          },
          "NotApplicable": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiLabelAttached": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of attached label. Does not reference to global label.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of label.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of label.",
            "nullable": true
          },
          "ParentId": {
            "type": "integer",
            "description": "Reference to another attached label.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiPaginatedResultOfApiTestExecutionInfo": {
        "type": "object",
        "description": "Contains a paginated result.",
        "additionalProperties": false,
        "properties": {
          "StartAt": {
            "type": "integer",
            "description": "The number of items which were skipped in the list of results.\nThis value is provided during the request.",
            "format": "int32"
          },
          "MaxResults": {
            "type": "integer",
            "description": "The maximum number of items which should be included in the result.\nThis value is provided during the request.",
            "format": "int32"
          },
          "Count": {
            "type": "integer",
            "description": "The overall number of items which are available. When using pagination,\nthis number is higher than the number of items which are included in the result.",
            "format": "int32"
          },
          "Items": {
            "type": "array",
            "description": "The actual items included in this response.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestExecutionInfo"
            }
          }
        }
      },
      "ApiTestCaseExecutionPreviewResponse": {
        "type": "object",
        "description": "Represents the test case execution preview response, containing a testexecution preview and further information.",
        "additionalProperties": false,
        "required": [
          "NewTestExecution",
          "CreateMeta"
        ],
        "properties": {
          "NewTestExecution": {
            "description": "Testexecution preview.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionNew"
              }
            ]
          },
          "RequireActualResult": {
            "type": "boolean",
            "description": "If true, then 'Actual Results' field is mandatory when manually executing. "
          },
          "CanFinalizeTestExecution": {
            "description": "If granted, execution can be finalized due to permission",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CreateMeta": {
            "description": "Contains metadata which is necessary for creating new executions.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionCreateMeta"
              }
            ]
          }
        }
      },
      "ApiTestExecutionNew": {
        "type": "object",
        "description": "A new test execution to be saved.",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "A GUID which uniquely identifies the test\nexecution.The GUID can be null. If a GUID\nis provided, it will be kept.",
            "nullable": true
          },
          "TestCaseId": {
            "type": "integer",
            "description": "The id of the test case to which this execution belongs.",
            "format": "int32"
          },
          "TestCaseName": {
            "type": "string",
            "description": "The name of the executed test case when the execution\nhas been started. The name can be defined freely.",
            "nullable": true
          },
          "Finalize": {
            "type": "boolean",
            "description": "Indicates whether the execution should be finalized. Finalized executions\ncannot be modified any further."
          },
          "ValueSetName": {
            "type": "string",
            "description": "The name of the value set which was chosen for this\nexecution. The value set name can be chosen freely\nhere and is not validated against the value sets defined\nin the test case.",
            "nullable": true
          },
          "TestScenarioInfo": {
            "description": "Contains information specific for the execution in scope\nof a test scenario. Can be null, if the execution should\nnot happen in scope of a test scenario.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionNewTestScenarioInfo"
              }
            ]
          },
          "Steps": {
            "type": "array",
            "description": "Contains the steps of this execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestStepExecutionNew"
            }
          },
          "TestedVersion": {
            "type": "string",
            "description": "The tested version.",
            "nullable": true
          },
          "ExecutionDuration": {
            "description": "The duration of the execution. Can be set freely. Might be\nmeasured by the client",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueTimeSpan"
              }
            ]
          },
          "AttachedLabels": {
            "type": "array",
            "description": "Contains labels attached to this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelAttached"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "The values which should be set for the custom fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          },
          "Attachments": {
            "type": "array",
            "description": "Contains the attachments.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAttachmentNew"
            }
          }
        }
      },
      "ApiTestExecutionNewTestScenarioInfo": {
        "type": "object",
        "description": "Contains information specific for the execution\nin scope of a test scenario.",
        "additionalProperties": false,
        "properties": {
          "Index": {
            "type": "integer",
            "description": "The index of this execution in the test scenario\nexecution. The index does not need to be consecutive as partial\nexecution of a test scenario is allowed.",
            "format": "int32"
          },
          "RunDependency": {
            "type": "array",
            "description": "The run dependencies for this execution. The run dependencies\ncan be defined freely here but are enforced afterwards by the UI\nwhen updating the execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRunDependencyEntry"
            }
          },
          "TestScenarioId": {
            "type": "integer",
            "description": "The id of the test scenario in scope of which this execution\nis performed.",
            "format": "int32"
          },
          "TestJobId": {
            "type": "integer",
            "description": "The id of the test job to which this execution belongs. This id is optional\nand ids which do not exist anymore will be silently dropped. A valid id needs\nto be provided when the last execution information for a test job should be\nupdated.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiTestStepExecutionNew": {
        "type": "object",
        "description": "A new test step execution to be saved.",
        "additionalProperties": false,
        "properties": {
          "Index": {
            "type": "integer",
            "description": "The one-based index of this test step in the list\nof test steps.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of this test step.",
            "nullable": true
          },
          "StepType": {
            "description": "The step type of this test step execution.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepExecutionStepType"
              }
            ]
          },
          "Status": {
            "description": "The execution status of this test step execution.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepExecutionUpdateStatus"
              }
            ]
          },
          "Description": {
            "description": "The description of this test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ExpectedResults": {
            "description": "The expected result of the execution of this test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResults": {
            "description": "The actual result of the execution of this test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResultsLastUpdatedBy": {
            "description": "The user who last modified the actual results field\nor null if not modified outside the first test execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "ActualResultsLastUpdated": {
            "type": "string",
            "description": "The time when the Actual Result was updated",
            "format": "date-time"
          }
        }
      },
      "ApiTestStepExecutionStepType": {
        "type": "string",
        "description": "The possible step types for a test step execution.\nNestedTestCase is intentionally not included as test\nexecution are flat. Test steps of a nested test case\nare merged into the flat test execution.\r\nThis enum has the following values:\r\n  - `Condition` The step represents a condition.\r\n  - `Step` The step is a normal test step.\r\n",
        "x-enumNames": [
          "Condition",
          "Step"
        ],
        "enum": [
          "Condition",
          "Step"
        ]
      },
      "ApiTestStepExecutionUpdateStatus": {
        "type": "string",
        "description": "The list of statuses a test step execution can be set to\nwhen updating it.\r\nThis enum has the following values:\r\n  - `Blocked` The execution of the step is blocked.\r\n  - `Failed` The execution of the step has failed.\n            \r\n  - `NotApplicable` Step is not applicable for the current test execution, not considered for overall execution status. \r\n  - `NotRun` The step has not been executed yet.\r\n  - `Pass` The step has been executed successfully.\r\n",
        "x-enumNames": [
          "NotRun",
          "Pass",
          "Failed",
          "Blocked",
          "NotApplicable"
        ],
        "enum": [
          "NotRun",
          "Pass",
          "Failed",
          "Blocked",
          "NotApplicable"
        ]
      },
      "ApiTestExecutionCreateMeta": {
        "type": "object",
        "description": "Contains the metadata which is necessary for creating a new execution.",
        "additionalProperties": false,
        "required": [
          "Fields",
          "EditLayout"
        ],
        "properties": {
          "Fields": {
            "type": "array",
            "description": "Contains all available fields together with their metadata.",
            "items": {
              "$ref": "#/components/schemas/ApiField"
            }
          },
          "EditLayout": {
            "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiEditLayout"
              }
            ]
          }
        }
      },
      "ApiTestCaseExecutionPreviewRequest": {
        "type": "object",
        "description": "Represents the test case execution preview request.",
        "additionalProperties": false,
        "properties": {
          "TestedVersion": {
            "type": "string",
            "description": "Tested version, is only used if test job tested version is not set.",
            "nullable": true
          },
          "ValueSetGuid": {
            "type": "string",
            "description": "The guid of the value set.",
            "nullable": true
          },
          "Labels": {
            "type": "array",
            "description": "Contains labels that will be used for the test jobs created by this preview.\nOn creation of a test execution those labels are copied over as ApiLabelAttached.\nVersion is not checked and can be null.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "Contains the custom fields of this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          }
        }
      },
      "ApiRichTextIncludeType": {
        "type": "string",
        "description": "This enum determinates wich information should be included in the richtext.\r\nThis enum has the following values:\r\n  - `All` All, this means Html and plain text are included.\r\n  - `HTML` Html is included.\r\n  - `PlainText` Plain text is included.\r\n",
        "x-enumNames": [
          "HTML",
          "PlainText",
          "All"
        ],
        "enum": [
          "HTML",
          "PlainText",
          "All"
        ]
      },
      "ApiAutomatedTestCaseExecution": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ValueSetKey": {
            "type": "string",
            "description": "Contains the id of the value set key.",
            "nullable": true
          },
          "TestedVersion": {
            "type": "string",
            "description": "Contains the information about the test version.",
            "nullable": true
          },
          "AgentId": {
            "type": "integer",
            "description": "Contains the id of the agent.",
            "format": "int32"
          },
          "Labels": {
            "type": "array",
            "description": "Contains labels that will be used for the test jobs created by this preview.\nOn creation of a test execution those labels are copied over as ApiLabelAttached.\nVersion is not checked and can be null.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelAttached"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "The values which should be set for the custom fields.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          }
        }
      },
      "ApiExternalInfo": {
        "type": "object",
        "description": "ONLT FOR INTERNAL USE\n\nContains basic information about a item as requested \nfrom external system (e.g. JIRA plugin) using search by related external item id (e.g. JIRA Id).\nPlease note that in case when current user has no access to view the item, only the Id field \nis properly filled. ",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the item.",
            "format": "int32"
          },
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project where test case is located.\nIf 0 then item is not accessible for current user. ",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder where item is located (or 0 if in root folder).",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the item.",
            "nullable": true
          },
          "DateCreated": {
            "description": "The date when item was created.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "LastModified": {
            "description": "The date when item was last modified.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "LastExecutionDate": {
            "description": "The date when item was last time executed.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          }
        }
      },
      "ApiHistoryEntryTestCase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiHistoryEntry"
          },
          {
            "type": "object",
            "description": "Contains all changes which were done to a test case in one operation\ntogether with information on when and by whom the test case has been changed.\nWhen no changes of a given type occurred, the corresponding field in\nthis response will be missing.",
            "additionalProperties": false,
            "properties": {
              "TestSteps": {
                "description": "The list of changes to the test steps of this test step. Only\nadding or removing of test steps is recorded here.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiHistoryTestSteps"
                  }
                ]
              },
              "TestData": {
                "description": "Changes to the test data (if any). \nSo far only the fact of modification of test data is recorded here \n(no further details/differences)",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiHistoryTestData"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiHistoryTestSteps": {
        "type": "object",
        "description": "The list of changes to the test steps of a test case.",
        "additionalProperties": false,
        "properties": {
          "Rearranged": {
            "type": "boolean",
            "description": "True is any steps have been rearranged (i.e. changed their positions). "
          },
          "Added": {
            "type": "array",
            "description": "The list of test steps which were added.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of test steps which were removed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Modified": {
            "type": "array",
            "description": "The list of test steps which were modified.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryTestStepModified"
            }
          }
        }
      },
      "ApiHistoryTestStepModified": {
        "type": "object",
        "description": "Contains the changes made to an existing test step. So far, only\nthe test step name and id are included.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the test step.",
            "format": "int32"
          },
          "CurrentName": {
            "type": "string",
            "description": "The name of the test step.",
            "nullable": true
          },
          "Fields": {
            "type": "array",
            "description": "The list of changes to the fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryFieldChanged"
            }
          },
          "Automation": {
            "description": "Contains the automation.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryAutomation"
              }
            ]
          }
        }
      },
      "ApiHistoryAutomation": {
        "type": "object",
        "description": "Contains the automation changes.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "description": "Contains the added automation type.\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationTechnology"
              }
            ]
          },
          "Removed": {
            "description": "Contains the removed automation type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationTechnology"
              }
            ]
          },
          "Modified": {
            "description": "Contains the changes to the automation files of this test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiHistoryAutomationModified"
              }
            ]
          }
        }
      },
      "ApiHistoryAutomationModified": {
        "type": "object",
        "description": "The list of changes to the automation related files. ",
        "additionalProperties": false,
        "properties": {
          "ScriptFilesAdded": {
            "type": "array",
            "description": "The list of names of the script files which were added.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "ScriptFilesModified": {
            "type": "array",
            "description": "The list of the script changes.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryScriptFileModified"
            }
          },
          "ScriptFilesRemoved": {
            "type": "array",
            "description": "The list of names of the script files which were removed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "DataFilesAdded": {
            "type": "array",
            "description": "The list of names of the data files which were added.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "DataFilesRemoved": {
            "type": "array",
            "description": "The list of names of the data files which were removed.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ApiHistoryScriptFileModified": {
        "type": "object",
        "description": "Changes to the script.",
        "additionalProperties": false,
        "properties": {
          "FileName": {
            "type": "string",
            "description": "The name of the File, is empty if script is changed directly.",
            "nullable": true
          },
          "ValueBefore": {
            "type": "string",
            "description": "The old value before the change, is empty if file changed.",
            "nullable": true
          },
          "ValueAfter": {
            "type": "string",
            "description": "The new value after the change, is empty if file changed.",
            "nullable": true
          }
        }
      },
      "ApiHistoryTestData": {
        "type": "object",
        "description": "Represents changes in test data",
        "additionalProperties": false
      },
      "ApiTestCasesHaveStepsResponse": {
        "type": "object",
        "description": "Contains an entry for each test case that has steps",
        "additionalProperties": false,
        "properties": {
          "TestCases": {
            "type": "object",
            "description": "The indication if the test case has steps. Any missing\nTest Case Ids that were originally provided in the\ninput can be assumed to have no steps",
            "nullable": true,
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "ApiFieldPlaceholders": {
        "type": "object",
        "description": "Contains the placeholder fields of a test case.",
        "additionalProperties": false,
        "properties": {
          "Fields": {
            "type": "array",
            "description": "The list of fields that can be used as replacement\nplaceholders in the TestCase",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldPlaceholder"
            }
          }
        }
      },
      "ApiTestExecutionContinueResponse": {
        "type": "object",
        "description": "Represents the test execution continue response.",
        "additionalProperties": false,
        "required": [
          "TestExecutions"
        ],
        "properties": {
          "TestExecutions": {
            "type": "array",
            "description": "Testexecution list.",
            "items": {
              "$ref": "#/components/schemas/ApiTestExecutionExtendedInfo"
            }
          },
          "RequireActualResult": {
            "type": "boolean",
            "description": "If true, then 'Actual Results' field is mandatory when manually executing. "
          },
          "CanFinalizeTestExecution": {
            "description": "If granted, execution can be finalized due to permission",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "Location": {
            "description": "The location (project and folder) of the item",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLocation"
              }
            ]
          }
        }
      },
      "ApiTestExecutionExtendedInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionInfo"
          },
          {
            "type": "object",
            "description": "Contains basic information of a test execution.\nThis information was extended by steps and attachments.",
            "additionalProperties": false,
            "properties": {
              "Steps": {
                "type": "array",
                "description": "Contains execution steps.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestStepExecution"
                }
              },
              "AttachedFiles": {
                "type": "array",
                "description": "List of files attached to this execution.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiAttachmentInfo"
                }
              },
              "EditLayout": {
                "description": "Contains information about fields layout (i.e. how to layout fields in the edit mask).",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEditLayout"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestStepExecution": {
        "type": "object",
        "description": "Represents single step of a test execution (manual or automated).",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of this step execution",
            "format": "int32"
          },
          "Status": {
            "description": "Status of the step execution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepExecutionStatus"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name of executed step ",
            "nullable": true
          },
          "Index": {
            "type": "integer",
            "description": "The index of this test step. The index does not need to be consecutive as partial\nexecution is allowed.",
            "format": "int32"
          },
          "StepType": {
            "description": "Type of step ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepType"
              }
            ]
          },
          "Description": {
            "description": "Step's description (instructions)",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ExpectedResults": {
            "description": "Expected results",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResults": {
            "description": "Actual results",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          },
          "ActualResultsLastUpdatedBy": {
            "description": "The user who last modified the actual results field\nor null if not modified outside the first test execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "ActualResultsLastUpdated": {
            "type": "string",
            "description": "The time when the Actual Result was updated",
            "format": "date-time"
          },
          "AgentsUsed": {
            "type": "string",
            "description": "Agent used to execute this step (if any). \nNote: in case of JMeter automation it can happen (but this is very uncommon though) \nthat more than one agent executes the step. In this case this field contains comma separated list of agents.  ",
            "nullable": true
          },
          "LastEditor": {
            "description": "Last user who edited this step execution. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "HasDefect": {
            "type": "boolean",
            "description": "Indicates whether a defect exists which is related to this test step."
          },
          "AutomationTechnology": {
            "description": "The type of test automation technology which is used for this test step.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomationTechnology"
              }
            ]
          }
        }
      },
      "ApiTestStepExecutionStatus": {
        "type": "string",
        "description": "Identifies the status of a test step execution.\r\nThis enum has the following values:\r\n  - `Aborted` Step has been aborted.\r\n  - `Blocked` Step has been blocked.\r\n  - `Failed` Step has failed. \r\n  - `InProgress` Is being executed by some agent.\r\n  - `NotApplicable` Step is not applicable for the current test execution, not considered for overall execution status. \r\n  - `NotRun` Step has not been run yet. \r\n  - `Pass` Step has passed. \r\n  - `Queued` Directly queued for execution, will be executed as soon as agent is able to process it. \r\n",
        "x-enumNames": [
          "NotRun",
          "Failed",
          "Pass",
          "Queued",
          "InProgress",
          "Aborted",
          "Blocked",
          "NotApplicable"
        ],
        "enum": [
          "NotRun",
          "Failed",
          "Pass",
          "Queued",
          "InProgress",
          "Aborted",
          "Blocked",
          "NotApplicable"
        ]
      },
      "ApiTestExecution": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionExtendedInfo"
          },
          {
            "type": "object",
            "description": "Represents a test execution (manual or automated).",
            "additionalProperties": false,
            "properties": {
              "Location": {
                "description": "The location (project and folder) of the test execution which is the location of the\ncorresponding test case.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiItemLocation"
                  }
                ]
              },
              "ExecutionLogs": {
                "type": "array",
                "description": "Contains execution logs (only for automated executions)",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionLog"
                }
              },
              "ExecutionDataAttributes": {
                "type": "array",
                "description": "Contains execution data attributes (only for automated executions)",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionDataAttribute"
                }
              },
              "Permissions": {
                "description": "Contains permissions for test execution.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestExecutionPermission"
                  }
                ]
              },
              "RequireActualResult": {
                "type": "boolean",
                "description": "If true, then 'Actual Results' field is mandatory when manually executing."
              },
              "EditStatus": {
                "description": "Contains information about the edit status.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiEditableInfo"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestExecutionLog": {
        "type": "object",
        "description": "Represents single log of an automated test execution.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "StepName": {
            "type": "string",
            "nullable": true
          },
          "StepIndex": {
            "type": "integer",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "DetailedMessage": {
            "type": "string",
            "nullable": true
          },
          "OccurrenceTime": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "Type": {
            "$ref": "#/components/schemas/ApiExecutionLogMessageType"
          },
          "ScreenShotCheckSum": {
            "type": "string",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApiExecutionLogMessageType": {
        "type": "string",
        "description": "Identifies the type of log execution entry.\r\nThis enum has the following values:\r\n  - `ExecutionError` \r\n  - `InformationalDebug` \r\n  - `InformationalInfo` \r\n  - `InformationalSuccess` \r\n  - `InformationalWarn` \r\n  - `PreparationError` \r\n  - `ScriptExecutionError` \r\n  - `SUTError` \r\n",
        "x-enumNames": [
          "SUTError",
          "ScriptExecutionError",
          "PreparationError",
          "ExecutionError",
          "InformationalInfo",
          "InformationalDebug",
          "InformationalWarn",
          "InformationalSuccess"
        ],
        "enum": [
          "SUTError",
          "ScriptExecutionError",
          "PreparationError",
          "ExecutionError",
          "InformationalInfo",
          "InformationalDebug",
          "InformationalWarn",
          "InformationalSuccess"
        ]
      },
      "ApiTestExecutionDataAttribute": {
        "type": "object",
        "description": "Represents a single \"exection data attribute\".",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the attribute ",
            "format": "int32"
          },
          "AttrName": {
            "type": "string",
            "description": "Name of the attribute ",
            "nullable": true
          },
          "AttrValue": {
            "type": "string",
            "description": "Value of the attribute (as string)",
            "nullable": true
          },
          "AttrType": {
            "description": "Type of the attribute",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionDataAttributeType"
              }
            ]
          },
          "ProcessElementExecutionId": {
            "type": "integer",
            "description": "Id of the related ProcessElementExecution",
            "format": "int32"
          },
          "TestStepExecutionId": {
            "type": "integer",
            "description": "Id of the related TestStepExecution",
            "format": "int32"
          },
          "TestJobExecutionId": {
            "type": "integer",
            "description": "Id of the related TestJobExecution",
            "format": "int32"
          },
          "DateModified": {
            "description": "Id of the related TestJobExecution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "StepName": {
            "type": "string",
            "description": "Name of the related automated step. ",
            "nullable": true
          },
          "StepIndex": {
            "type": "integer",
            "description": "Zero based index of related automated step execution. ",
            "format": "int32"
          }
        }
      },
      "ApiTestExecutionDataAttributeType": {
        "type": "string",
        "description": "Identifies the type of execution data attribute\r\nThis enum has the following values:\r\n  - `Float` \r\n  - `Integer` \r\n  - `String` \r\n",
        "x-enumNames": [
          "String",
          "Integer",
          "Float"
        ],
        "enum": [
          "String",
          "Integer",
          "Float"
        ]
      },
      "ApiTestExecutionPermission": {
        "type": "object",
        "description": "Represents permissions of an test execution. Intended to be subclassed \nby classes with more fine-grained permission set for given context. ",
        "additionalProperties": false,
        "properties": {
          "CanCreate": {
            "description": "Indicates whether user is able to create defects.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateDependency": {
            "description": "Indicates whether user is able to create the item dependency.\nIn order to create a dependency between two different item types it is enough to have 'Create Dependency' permission for either of the linked items.\nIf the permission is denied check the other side as well.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CanCreateExecutionLog": {
            "description": "Indicates whether user is able to create execution log.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          }
        }
      },
      "ApiTestExecutionNewResponse": {
        "type": "object",
        "discriminator": {
          "propertyName": "Context",
          "mapping": {
            "TestCase": "#/components/schemas/ApiTestExecutionNewResponseTestCaseContext",
            "TestScenario": "#/components/schemas/ApiTestExecutionNewResponseTestScenarioContext"
          }
        },
        "description": "Represents the response for creating new execution, the response depends on the execution context.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "Context"
        ],
        "properties": {
          "Context": {
            "type": "string"
          }
        }
      },
      "ApiTestExecutionNewResponseTestCaseContext": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionNewResponse"
          },
          {
            "type": "object",
            "description": "Represents the response for creating new test case execution.",
            "additionalProperties": false,
            "properties": {
              "TestExecutionIdentifier": {
                "description": "The test execution identifier.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestExecutionIdentifier"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestExecutionIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemIdentifier"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ApiTestExecutionNewResponseTestScenarioContext": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionNewResponse"
          },
          {
            "type": "object",
            "description": "Represents the response for creating new test scenario execution.",
            "additionalProperties": false,
            "properties": {
              "TestScenarioExecutionId": {
                "type": "integer",
                "description": "The id of the testscenario execution.",
                "format": "int32"
              },
              "TestExecutionIdentifiers": {
                "type": "array",
                "description": "List of related test executions. ",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestExecutionIdentifier"
                }
              }
            }
          }
        ]
      },
      "ApiTestExecutionUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionUpdateSingle"
          },
          {
            "type": "object",
            "description": "A test execution with id to be updated.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The id of the execution.",
                "format": "int32"
              },
              "Finalize": {
                "type": "boolean",
                "description": "Indicates whether the execution should be finalized. Finalized executions\ncannot be modified any further."
              },
              "IsContinuation": {
                "type": "boolean",
                "description": "Indicates if this is a continuation of the test execution"
              }
            }
          }
        ]
      },
      "ApiTestExecutionUpdateSingle": {
        "type": "object",
        "description": "A test execution to be updated.",
        "additionalProperties": false,
        "properties": {
          "Attachments": {
            "description": "Contains the attachments.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAttachments"
              }
            ]
          },
          "Steps": {
            "type": "array",
            "description": "Contains the steps of this execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestStepExecutionUpdate"
            }
          },
          "TestedVersion": {
            "type": "string",
            "description": "Tested version",
            "nullable": true
          },
          "AttachedLabels": {
            "type": "array",
            "description": "Contains labels attached to this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelAttached"
            }
          },
          "ExecutionDuration": {
            "description": "Duration of the execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueTimeSpan"
              }
            ]
          },
          "CustomFields": {
            "type": "array",
            "description": "The values which should be set for the custom fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          }
        }
      },
      "ApiTestStepExecutionUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestStepExecutionUpdateSingleStep"
          },
          {
            "type": "object",
            "description": "A test step execution to be updated.",
            "additionalProperties": false,
            "properties": {
              "Id": {
                "type": "integer",
                "description": "The id of the test step.",
                "format": "int32"
              },
              "ActualResultsLastUpdatedBy": {
                "description": "The user who last modified the actual results field\nor null if not modified outside the first test execution",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiUserInfo"
                  }
                ]
              },
              "ActualResultsLastUpdated": {
                "type": "string",
                "description": "The time when the Actual Result was updated",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "ApiTestStepExecutionUpdateSingleStep": {
        "type": "object",
        "description": "A test step execution single step to be updated.",
        "additionalProperties": false,
        "properties": {
          "Status": {
            "description": "The execution status of this test step execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepExecutionUpdateStatus"
              }
            ]
          },
          "ActualResults": {
            "description": "The actual result of the execution of this test step.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          }
        }
      },
      "ApiTestExecutionLogUserEntryNew": {
        "type": "object",
        "description": "Contains the necessary information for creating a new\nexecution log entry which was specified by an end user.",
        "additionalProperties": false,
        "required": [
          "Category",
          "Message",
          "Type"
        ],
        "properties": {
          "Category": {
            "type": "string",
            "description": "The category of the log message.",
            "minLength": 1
          },
          "Message": {
            "type": "string",
            "description": "The message of the log message",
            "minLength": 1
          },
          "DetailedMessage": {
            "type": "string",
            "description": "A more detailed message with additional information",
            "nullable": true
          },
          "OccurrenceTime": {
            "type": "string",
            "description": "The time when the logged event occurred. When no time is\nprovided, the current server time will be used.",
            "format": "date-time",
            "nullable": true
          },
          "Type": {
            "description": "The type of the log message",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiExecutionLogMessageType"
              }
            ]
          }
        }
      },
      "ApiTestExecutionPatchResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The guid of long running task.",
            "nullable": true
          },
          "ModifyingStatus": {
            "description": "The current status of the request.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionModifyingStatus"
              }
            ]
          }
        }
      },
      "ApiTestExecutionModifyingStatus": {
        "type": "string",
        "description": "Represents current modifying status of an test execution.\r\nThis enum has the following values:\r\n  - `Executing` \r\n  - `Finished` \r\n",
        "x-enumNames": [
          "Finished",
          "Executing"
        ],
        "enum": [
          "Finished",
          "Executing"
        ]
      },
      "ApiTestExecutionPatchRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchType",
          "mapping": {
            "Cancel": "#/components/schemas/ApiTestExecutionPatchCancel",
            "MarkIrrelevant": "#/components/schemas/ApiTestExecutionPatchMarkIrrelevant",
            "MarkRelevant": "#/components/schemas/ApiTestExecutionPatchMarkRelevant",
            "Finalize": "#/components/schemas/ApiTestExecutionPatchFinalize"
          }
        },
        "description": "Represents the test execution patch request.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchType"
        ],
        "properties": {
          "TestExecutionsIds": {
            "type": "array",
            "description": "The list of test executions ids which will be modified.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "PatchType": {
            "type": "string"
          }
        }
      },
      "ApiTestExecutionPatchCancel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the test execution cancel request.",
            "additionalProperties": false
          }
        ]
      },
      "ApiTestExecutionPatchMarkIrrelevant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the test execution mark irrelevant request.",
            "additionalProperties": false,
            "properties": {
              "IrrelevantReason": {
                "type": "string",
                "description": "The reason for marking the test executions irrelevant.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiTestExecutionPatchMarkRelevant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the test execution mark relevant request.",
            "additionalProperties": false
          }
        ]
      },
      "ApiTestExecutionPatchFinalize": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestExecutionPatchRequest"
          },
          {
            "type": "object",
            "description": "Represent the test execution finalize request.",
            "additionalProperties": false,
            "properties": {
              "FinalizeIncomplete": {
                "type": "boolean",
                "description": "When true, incomplete executions should be finalized as well.\nOtherwise, incomplete executions will be skipped."
              }
            }
          }
        ]
      },
      "ApiTestExecutionCreateLock": {
        "type": "object",
        "description": "Represents necessary information for creating an test execution lock.",
        "additionalProperties": false,
        "properties": {
          "TestExecutionId": {
            "type": "integer",
            "description": "The id of the test execution.",
            "format": "int32"
          },
          "LockInfo": {
            "description": "Contains lock information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiLockNew"
              }
            ]
          }
        }
      },
      "ApiBulkExecutionsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The Id of the project containing the test cases",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The Id of the folder containing the test cases.\nThis is used for a permission check to verify that the\nuser has permission to Finalize the test executions if needed",
            "format": "int32"
          },
          "TestCaseIds": {
            "type": "array",
            "description": "The test case Id and the value set to use for each test case",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ValueSetGuids": {
            "type": "array",
            "description": "The value set to use for each test case execution (Item1 is the\ntest case Id and Item2 is the value set GUID)",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ValueTupleOfIntegerAndString"
            }
          },
          "Finalize": {
            "type": "boolean",
            "description": "Whether or not the test execution should be finalized"
          },
          "Labels": {
            "type": "array",
            "description": "The labels that should be added to the test executions",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          },
          "Version": {
            "type": "string",
            "description": "The version number to associate with the test executions",
            "nullable": true
          },
          "Status": {
            "description": "The status for all the steps in each test execution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestStepExecutionStatus"
              }
            ]
          },
          "ActualResult": {
            "description": "The actual result for all the steps in each test execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiRichText"
              }
            ]
          }
        }
      },
      "ValueTupleOfIntegerAndString": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Item1": {
            "type": "integer",
            "format": "int32"
          },
          "Item2": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ApiTestScenario": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemWithDescription"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "HasTestCases": {
                "type": "boolean",
                "description": "True if test scenario has at least one test case. "
              },
              "LastExecutionStatus": {
                "description": "Contains information about the last execution status.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestScenarioRunStatus"
                  }
                ]
              },
              "HasExecutions": {
                "type": "boolean",
                "description": "True if test scenario has at least one execution."
              }
            }
          }
        ]
      },
      "ApiTestScenarioRunStatus": {
        "type": "string",
        "description": "\r\nThis enum has the following values:\r\n  - `Blocked` At least one test job is Blocked and there are no Failed tets jobs\r\n  - `Failed` At least one test job is Failed\r\n  - `NotCompleted` At least one test job is NotCompleted and there are no Blocked or Failed test jobs \r\n  - `NotRun` None of test jobs have been executed yet \r\n  - `Passed` All test jobs are Passed \r\n",
        "x-enumNames": [
          "NotRun",
          "NotCompleted",
          "Failed",
          "Passed",
          "Blocked"
        ],
        "enum": [
          "NotRun",
          "NotCompleted",
          "Failed",
          "Passed",
          "Blocked"
        ]
      },
      "ApiItemUpdateWithTestJobs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemUpdateWithDescription"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "TestJobs": {
                "description": "Contains all the modifications which should be applied to\nthe test jobs.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiTestJobsUpdate"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiTestJobsUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "A list with the new test jobs which should be added.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestJobNew"
            }
          },
          "Modified": {
            "type": "array",
            "description": "A list with test jobs which should be updated.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestJobUpdateWithId"
            }
          },
          "Removed": {
            "type": "array",
            "description": "A list with the ids of the test jobs which should be removed.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiTestJobNew": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestJobUpdate"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "TestCaseId"
            ],
            "properties": {
              "TestCaseId": {
                "type": "integer",
                "description": "Test case id.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiTestJobUpdate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "IndexInTestScenario"
        ],
        "properties": {
          "IndexInTestScenario": {
            "type": "integer",
            "description": "Index of the test job in test scenario.",
            "format": "int32"
          },
          "RunDependency": {
            "type": "array",
            "description": "The list of run dependencies of this test job.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRunDependencyEntry"
            }
          },
          "Details": {
            "description": "The details of the test job which should be updated.\nCan be null, when the details should not be updated.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestJobDetailsUpdate"
              }
            ]
          }
        }
      },
      "ApiTestJobDetailsUpdate": {
        "type": "object",
        "description": "Contains the details of the test job which should be updated.",
        "additionalProperties": false,
        "properties": {
          "AgentToUse": {
            "type": "integer",
            "description": "Id of the agent which should be used. Can be null.",
            "format": "int32",
            "nullable": true
          },
          "ValueSetGuid": {
            "type": "string",
            "description": "Guid of the value set guid which should be used.\nCan be null but only if the test case is not\nparameterized.",
            "nullable": true
          },
          "TestedVersion": {
            "type": "string",
            "description": "The tested version. Can be null.",
            "nullable": true
          },
          "Labels": {
            "type": "array",
            "description": "Contains labels attached to this test job.\nOn creation of a test execution those labels are copied over as ApiLabelAttached.\nVersion is not checked and can be null.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelInfo"
            }
          },
          "CustomFields": {
            "type": "array",
            "description": "Contains the updates which should be applied to the\nexecution custom fields of this test job.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldUpdate"
            }
          },
          "TesterId": {
            "type": "integer",
            "description": "Contains the tester user id.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "ApiTestJobUpdateWithId": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiTestJobUpdate"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "Id"
            ],
            "properties": {
              "Id": {
                "type": "integer",
                "description": "Test job id.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiItemNewWithTestJobs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiItemNewWithDescription"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "TestJobs": {
                "type": "array",
                "description": "A list with the new test jobs which should be added.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiTestJobNew"
                }
              }
            }
          }
        ]
      },
      "ApiTestScenarioExecutionPreviewResponse": {
        "type": "object",
        "description": "Represents the test scenario execution preview response, containing a testexecution preview and further information.",
        "additionalProperties": false,
        "required": [
          "NewTestExecutions",
          "CreateMeta"
        ],
        "properties": {
          "NewTestExecutions": {
            "type": "array",
            "description": "Testexecution preview list.",
            "items": {
              "$ref": "#/components/schemas/ApiTestExecutionNew"
            }
          },
          "RequireActualResult": {
            "type": "boolean",
            "description": "If true, then 'Actual Results' field is mandatory when manually executing. "
          },
          "CanFinalizeTestExecution": {
            "description": "If granted, execution can be finalized due to permission",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiPermissionResult"
              }
            ]
          },
          "CreateMeta": {
            "description": "Contains metadata which is necessary for creating new executions.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionCreateMeta"
              }
            ]
          }
        }
      },
      "ApiTestScenarioExecutionPreviewRequest": {
        "type": "object",
        "description": "Represents the test scenario execution preview request.",
        "additionalProperties": false,
        "properties": {
          "TestedVersion": {
            "type": "string",
            "description": "Tested version, is only used if test job tested version is not set.",
            "nullable": true
          },
          "TestJobIds": {
            "type": "array",
            "description": "List of test job ids.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ApiTestScenarioExecutionStatisticsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TestScenarioExecutionStatistics": {
            "type": "array",
            "description": "Contains the test scenario execution statistics",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestExecutionStatistics"
            }
          }
        }
      },
      "ApiTestExecutionStatistics": {
        "type": "object",
        "description": "The statistics for the test scenario execution",
        "additionalProperties": false,
        "properties": {
          "TestScenarioExecutionId": {
            "type": "integer",
            "description": "The test scenario execution that these statistics are for",
            "format": "int32"
          },
          "LastTester": {
            "description": "The tester from the most recent test execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "LastExecutionDate": {
            "description": "The date of the most recent execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "LastExecutionStatus": {
            "description": "The status of the most recent execution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestExecutionStatus"
              }
            ]
          },
          "LastExecutionId": {
            "type": "integer",
            "description": "The execution id of the most recent execution",
            "format": "int32"
          },
          "Statistics": {
            "description": "The count of test execution status values for the test scenario execution",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestScenarioExecutionStatistics"
              }
            ]
          }
        }
      },
      "ApiAutomatedTestScenarioExecutionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "TestScenarioExecutionId": {
            "type": "integer",
            "description": "Contains the id of the test scenario execution.",
            "format": "int32"
          },
          "LongRunningTaskGuid": {
            "type": "string",
            "description": "Contains the long running task guid.",
            "nullable": true
          }
        }
      },
      "ApiAutomatedTestScenarioExecutionRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "ExecutionType",
          "mapping": {
            "All": "#/components/schemas/ApiAutomatedTestScenarioExecutionRequestAll",
            "Partial": "#/components/schemas/ApiAutomatedTestScenarioExecutionRequestPartial"
          }
        },
        "description": "Base class for the different execution requests which can be used to start\nan automated execution of a test scenario.",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "ExecutionType"
        ],
        "properties": {
          "AgentId": {
            "type": "integer",
            "description": "The id of the agent which should be used as a fallback when\nno agent is specified for a test job.",
            "format": "int32",
            "nullable": true
          },
          "Sequential": {
            "type": "boolean",
            "description": "If true test jobs will be executed sequentially."
          },
          "ExecutionType": {
            "type": "string"
          }
        }
      },
      "ApiAutomatedTestScenarioExecutionRequestAll": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomatedTestScenarioExecutionRequest"
          },
          {
            "type": "object",
            "description": "Encapsulates the request for complete execution of an automated test scenario.\nAll test jobs which are contained in the test scenario will be executed.",
            "additionalProperties": false
          }
        ]
      },
      "ApiAutomatedTestScenarioExecutionRequestPartial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiAutomatedTestScenarioExecutionRequest"
          },
          {
            "type": "object",
            "description": "Encapsulates the request for a partial execution of an automated test scenario.\nThe ids of the test jobs which should be executed can be provided.",
            "additionalProperties": false,
            "required": [
              "TestJobIds"
            ],
            "properties": {
              "TestJobIds": {
                "type": "array",
                "description": "List of test job ids which should be executed.",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "ApiHistoryEntryTestScenario": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiHistoryEntry"
          },
          {
            "type": "object",
            "description": "Contains all changes which were done to a test scenario in one operation\ntogether with information on when and by whom the test scenario has been changed.\nWhen no changes of a given type occurred, the corresponding field in\nthis response will be missing.",
            "additionalProperties": false,
            "properties": {
              "TestJobs": {
                "description": "The list of changes to the test jobs of this test scenario. Only\nadding or removing of test jobs is recorded here.",
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiHistoryTestJobs"
                  }
                ]
              }
            }
          }
        ]
      },
      "ApiHistoryTestJobs": {
        "type": "object",
        "description": "The list of changes to the test jobs of a test scenario.",
        "additionalProperties": false,
        "properties": {
          "Added": {
            "type": "array",
            "description": "The list of names of the test jobs which were added\nto the test scenario.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Removed": {
            "type": "array",
            "description": "The list of names of the test jobs which were removed\nfrom the test scenario.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "Rearranged": {
            "type": "boolean",
            "description": "True is any test jobs have been rearranged (i.e. changed their positions). "
          },
          "Modified": {
            "type": "array",
            "description": "The list of test jobs which were modified.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryTestJobModified"
            }
          }
        }
      },
      "ApiHistoryTestJobModified": {
        "type": "object",
        "description": "Contains the changes made to an existing test job. ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the test job.",
            "format": "int32"
          },
          "TestCaseId": {
            "type": "string",
            "description": "Formatted id of the related test case .",
            "nullable": true
          },
          "Fields": {
            "type": "array",
            "description": "The list of changes to the fields",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiHistoryFieldChanged"
            }
          }
        }
      },
      "ApiAddSingleTestJobResponse": {
        "type": "object",
        "description": "Contains information about created test job.",
        "additionalProperties": false,
        "required": [
          "TestJobId"
        ],
        "properties": {
          "TestJobId": {
            "type": "integer",
            "description": "The id of the created test job.",
            "format": "int32"
          }
        }
      },
      "ApiTestJob": {
        "type": "object",
        "description": "Contains the test job information.",
        "additionalProperties": false,
        "required": [
          "Id",
          "Index"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the test job.",
            "format": "int32"
          },
          "Index": {
            "type": "integer",
            "description": "Index of the test job in test scenario.",
            "format": "int32"
          },
          "TestedVersion": {
            "type": "string",
            "description": "Tested version id.",
            "nullable": true
          },
          "RunDependency": {
            "type": "array",
            "description": "Run dependencies as list with more information.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiRunDependencyEntry"
            }
          },
          "TestCaseInfo": {
            "description": "Test case information.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestCaseJobInfo"
              }
            ]
          },
          "AgentToUse": {
            "description": "Agent wich will be used on execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAgentIdAndName"
              }
            ]
          },
          "SelectedValueSet": {
            "description": "Selected value set wich will be used on execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestDataReferencedValueSetInfo"
              }
            ]
          },
          "Labels": {
            "type": "array",
            "description": "Contains labels attached to this execution",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiLabelReference"
            }
          },
          "LastExecutionInfo": {
            "description": "Contains information about the last test job execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiLastExecutionInfo"
              }
            ]
          },
          "ExecutionHistory": {
            "description": "Contains history about the test job execution.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestCaseExecutionHistory"
              }
            ]
          },
          "Tester": {
            "description": "Contains Information about the tester.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueUser"
              }
            ]
          },
          "CustomFields": {
            "type": "array",
            "description": "Contains the execution custom fields for this test job",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiFieldWithValue"
            }
          }
        }
      },
      "ApiTestCaseJobInfo": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "Id",
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The id of the test case",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the test case",
            "minLength": 1
          },
          "TestCaseAccessibility": {
            "description": "Contains the information about accessbility of the test case.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiBaseItemAccessibility"
              }
            ]
          },
          "LastModified": {
            "description": "The last modification date of the test case.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFieldValueDateTime"
              }
            ]
          },
          "SupportsAutomaticExecution": {
            "description": "Information about the support level of the automatic execution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomaticExecutionSupport"
              }
            ]
          },
          "HasVariables": {
            "type": "boolean",
            "description": "If set, then the test case contains test data."
          },
          "RequiredAgentTechnologies": {
            "type": "array",
            "description": "Contains the information about required agent technologies for the test job execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAutomationTechnology"
            }
          }
        }
      },
      "ApiLabelReference": {
        "type": "object",
        "description": "Reference to a label. Contains minimal informations. Used for attaching labels to elements,\nretaining information about the global label and changing accordingly.",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of this label.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of this label.",
            "nullable": true
          },
          "IsSuperLabel": {
            "type": "boolean",
            "description": "Flag to indicate that this label has sub-labels."
          }
        }
      },
      "ApiLastExecutionInfo": {
        "type": "object",
        "description": "Contains information about the last execution.",
        "additionalProperties": false,
        "properties": {
          "LastExecutionId": {
            "type": "integer",
            "description": "The id of the last execution.",
            "format": "int32",
            "nullable": true
          },
          "LastExecutionStatus": {
            "description": "Contains the last test job execution status.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestCaseRunStatus"
              }
            ]
          },
          "LastExecutionDate": {
            "type": "string",
            "description": "Contains the last test job execution status date.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ApiTestJobPreviewResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "NotAccessibleTestCases": {
            "type": "array",
            "description": "The list of not accessible test case ids.",
            "nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "TestJobPreview": {
            "type": "array",
            "description": "The preview list of the test jobs.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiTestJobPreview"
            }
          }
        }
      },
      "ApiTestJobPreview": {
        "type": "object",
        "description": "Contains the test job preview information.",
        "additionalProperties": false,
        "required": [
          "ProjectId",
          "FolderId",
          "TestCaseId",
          "TestCaseName"
        ],
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "The id of the project.",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder.",
            "format": "int32"
          },
          "TestCaseId": {
            "type": "integer",
            "description": "The id of the test case.",
            "format": "int32"
          },
          "TestCaseName": {
            "type": "string",
            "description": "The name of the test case.",
            "minLength": 1
          },
          "SupportsAutomaticExecution": {
            "description": "Information about the support level of the automatic execution",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiAutomaticExecutionSupport"
              }
            ]
          },
          "HasVariables": {
            "type": "boolean",
            "description": "If set, then test case contains test data."
          },
          "RequiredAgentTechnologies": {
            "type": "array",
            "description": "Contains the information about required agent technologies for the test job execution.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiAutomationTechnology"
            }
          },
          "DefaultValueSet": {
            "description": "A default value set which can be preselected in the UI. Will be null, when\nthe test case is not parameterized.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiTestDataValueSetInfo"
              }
            ]
          }
        }
      },
      "ApiGridConfig": {
        "type": "object",
        "description": "The configuration of the item grid for a specific\nproject and item type",
        "additionalProperties": false,
        "properties": {
          "ActiveUserViewId": {
            "type": "integer",
            "description": "The id of the currently selected user view.\nCan be null when no user view is selected",
            "format": "int32",
            "nullable": true
          },
          "IncludeSubfolders": {
            "type": "boolean",
            "description": "Indicates whether sub folder should be included"
          },
          "IncludeArchivedItems": {
            "type": "boolean",
            "description": "Indicates whether archieved items should be\nincluded"
          },
          "ShowFilterRow": {
            "type": "boolean",
            "description": "Indicates whether the filter row of the grid\nis visible."
          },
          "FilterExpression": {
            "type": "array",
            "description": "The currently set filter",
            "nullable": true,
            "items": {}
          },
          "IsFilterActive": {
            "type": "boolean",
            "description": "indicates whether the filter is active"
          },
          "Columns": {
            "type": "array",
            "description": "The list of visible columns",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiGridConfigColumn"
            }
          },
          "SortGroup": {
            "type": "array",
            "description": "The list of columns for which the data is sorted\nor grouped by",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiGridConfigColumnSortGroup"
            }
          }
        }
      },
      "ApiGridConfigColumn": {
        "type": "object",
        "description": "Information regarding a single column",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "description": "The width of the column",
            "format": "int32"
          },
          "FixedPosition": {
            "description": "Indicates whether the column's position is fixed\nand to which side",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiGridConfigColumnFixedPosition"
              }
            ]
          }
        }
      },
      "ApiGridConfigColumnFixedPosition": {
        "type": "integer",
        "description": "The position to which a column is fixed in the grid",
        "x-enumNames": [
          "None",
          "Left",
          "Right"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "ApiGridConfigColumnSortGroup": {
        "type": "object",
        "description": "Information regarding the sorting/grouping of a single column",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field",
            "nullable": true
          },
          "SortOrder": {
            "description": "The direction in which the data is sorted",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiGridConfigColumnSortOrder"
              }
            ]
          },
          "IsGrouped": {
            "type": "boolean",
            "description": "Indicates whether this column is grouped"
          }
        }
      },
      "ApiGridConfigColumnSortOrder": {
        "type": "integer",
        "description": "The direction in which the column is sorted",
        "x-enumNames": [
          "Ascending",
          "Descending"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ApiFolderNotificationRuleResponse": {
        "type": "object",
        "description": "Contains the folder notification active and Inheritable rule.",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type this rule is defined for.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "ActiveFolderRule": {
            "description": "The current active folder rule.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFolderNotificationRule"
              }
            ]
          },
          "NextInheritableRule": {
            "description": "The next inheritable rule (could be the same as the active rule if the active rule is project default).",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFolderNotificationRule"
              }
            ]
          }
        }
      },
      "ApiFolderNotificationRule": {
        "type": "object",
        "description": "Contains the folder notification rule.",
        "additionalProperties": false,
        "properties": {
          "NotificationLocation": {
            "description": "The location of the notification.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLocation"
              }
            ]
          },
          "CreatedByUser": {
            "description": "Creator user info.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Owner": {
            "description": "Owner user info.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserInfo"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "The id of the rule.",
            "format": "int32"
          },
          "FilterType": {
            "description": "The type of the filter.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterType"
              }
            ]
          },
          "CustomFilterOptions": {
            "description": "Possible filter options only available if FilterType is Custom.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiNotificationRuleFilterOptions"
              }
            ]
          },
          "IgnoreIfOwnerAction": {
            "type": "boolean",
            "description": "Ignore if owner action."
          },
          "Recursive": {
            "type": "boolean",
            "description": "Use this rule for all subfolders."
          },
          "Inherited": {
            "type": "boolean",
            "description": "Indicates if this rule is inherited."
          },
          "InheritedFromProjectDefault": {
            "type": "boolean",
            "description": "Indicates if this rule is inherited from project default."
          }
        }
      },
      "ApiFolderNotificationRulePatchRequest": {
        "type": "object",
        "description": "Represents the folder notification rule request.",
        "additionalProperties": false,
        "properties": {
          "ItemType": {
            "description": "Item type this rule is defined for.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "FolderId": {
            "type": "integer",
            "description": "The id of the folder.",
            "format": "int32"
          },
          "Recursive": {
            "type": "boolean",
            "description": "Use this rule for all subfolders, this means all subfolder rules will be deleted."
          },
          "Operation": {
            "description": "Patch operation which will be applied.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFolderNotificationRulePatchTypes"
              }
            ]
          },
          "Rule": {
            "description": "New folder notification rule.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFolderNotificationRuleReplacement"
              }
            ]
          }
        }
      },
      "ApiFolderNotificationRulePatchTypes": {
        "type": "string",
        "description": "Represents the folder notification rules patch types.\r\nThis enum has the following values:\r\n  - `UseInheritedNotificationRule` Use the inherited notification rule,\nif the recusrive flag is set all user rules will be deleted.\r\n  - `UseThisNotificationRule` Use this notification rule.\r\n",
        "x-enumNames": [
          "UseInheritedNotificationRule",
          "UseThisNotificationRule"
        ],
        "enum": [
          "UseInheritedNotificationRule",
          "UseThisNotificationRule"
        ]
      },
      "ApiProjectFolderFavourite": {
        "type": "object",
        "description": "Represents a folder favourite. ",
        "additionalProperties": false,
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id of the record. ",
            "format": "int32"
          },
          "Location": {
            "description": "Location, which includes project & folder information. ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemLocation"
              }
            ]
          },
          "Label": {
            "type": "string",
            "description": "Custom label of this folder favorite. ",
            "nullable": true
          }
        }
      },
      "ApiProjectFolderFavouriteNew": {
        "type": "object",
        "description": "Represents a new folder favourite. ",
        "additionalProperties": false,
        "properties": {
          "ProjectId": {
            "type": "integer",
            "description": "Id of the project where the favorite is to be created",
            "format": "int32"
          },
          "FolderId": {
            "type": "integer",
            "description": "Id of the folder where the favorite is to refer to. \nMay be zero, what indicates favorite of root folder (i.e. project level)",
            "format": "int32"
          },
          "Label": {
            "type": "string",
            "description": "Custom label of this folder favorite. Empty values (and nulls) are allowed. ",
            "nullable": true
          }
        }
      },
      "ApiProjectFolderFavouritePatch": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "Rename": "#/components/schemas/ApiProjectFolderFavouritePatchRename"
          }
        },
        "description": "Represents data required to execute operation that modifies folder favourite.  \nThere are multiple modify operations supported - see ApiProjectFolderFavouritePatchTypes. \nDepending on the type the actual properties can differ. See subclasses for details. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiProjectFolderFavouritePatchRename": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiProjectFolderFavouritePatch"
          },
          {
            "type": "object",
            "description": "Contains data required to perform operation that renames a given folder favorite. ",
            "additionalProperties": false,
            "properties": {
              "Label": {
                "type": "string",
                "description": "Custom label of the favorite.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiUserPatchOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "UpdatePosition": "#/components/schemas/ApiUserPatchPosition"
          }
        },
        "description": "The information used when updating the user",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiUserPatchPosition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserPatchOperation"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "Position": {
                "type": "string",
                "description": "The position text to set",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiIntialType": {
        "type": "string",
        "description": "Identifies the type of the intial.\r\nThis enum has the following values:\r\n  - `All` Two letters as initials will be returned.\r\n  - `Single` One letter as initial will be returned.\r\n",
        "x-enumNames": [
          "All",
          "Single"
        ],
        "enum": [
          "All",
          "Single"
        ]
      },
      "ApiUserViewNewResponse": {
        "type": "object",
        "description": "Contains information about created user view.",
        "additionalProperties": false,
        "properties": {
          "UserViewId": {
            "type": "integer",
            "description": "The id of the user view.",
            "format": "int32"
          }
        }
      },
      "ApiUserViewNew": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserViewUpdate"
          },
          {
            "type": "object",
            "description": "Contains necessary information to create a user view.",
            "additionalProperties": false,
            "properties": {
              "ProjectId": {
                "type": "integer",
                "description": "The id of the project.",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ApiUserViewUpdate": {
        "type": "object",
        "description": "Contains necessary information for the user view update.",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the view.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the view.",
            "nullable": true
          },
          "Color": {
            "type": "string",
            "description": "The color of the view.\nAllowed are only predefined colors, for more information see: [Get predefined colors](#operation/System_GetColors).",
            "nullable": true
          },
          "IsPublic": {
            "type": "boolean",
            "description": "Indicates whether the view is public or not.",
            "nullable": true
          },
          "FieldsData": {
            "description": "Contains all data of the user view which depends on\nthe item type.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiUserViewUpdateFieldsData"
              }
            ]
          },
          "ApplicableItemTypes": {
            "type": "array",
            "description": "List of ApiItemTypes for wich this user view is applicable.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiItemType"
            }
          }
        }
      },
      "ApiUserViewUpdateFieldsData": {
        "type": "object",
        "description": "Contains all changes of a user view which depend on the\nitem type: filter, sorting/grouping and columns.",
        "additionalProperties": false,
        "required": [
          "ItemType"
        ],
        "properties": {
          "ItemType": {
            "description": "The item type to which the filter, sorting/grouping and\ncolumn information applies.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiItemType"
              }
            ]
          },
          "Filter": {
            "description": "The filter of the view.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiFilterUpdate"
              }
            ]
          },
          "Columns": {
            "type": "array",
            "description": "Contains the list of columns.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiUserViewColumnUpdate"
            }
          },
          "SortingGrouping": {
            "type": "array",
            "description": "Contains the list of sorting and grouping information for columns.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiUserViewColumnSortGroupUpdate"
            }
          }
        }
      },
      "ApiUserViewColumnUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The id of the field for which the column is\ndefined.",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "description": "The width of the column. The minimal width is 25px, if the set value is lower, the minimum width is automatically applied.",
            "format": "int32"
          }
        }
      },
      "ApiUserViewColumnSortGroupUpdate": {
        "type": "object",
        "description": "Specifies sorting and grouping for a single column.",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The name of the column.",
            "nullable": true
          },
          "SortOrder": {
            "description": "The sort order of the column.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiColumnSortOrder"
              }
            ]
          },
          "IsGrouped": {
            "type": "boolean",
            "description": "Indicates if the column is grouped."
          }
        }
      },
      "ApiColumnSortOrder": {
        "type": "string",
        "description": "Represents the sort orders.\r\nThis enum has the following values:\r\n  - `Ascending` Sorts the columns in descending order.\r\n  - `Descending` Sorts the columns in descending order.\r\n",
        "x-enumNames": [
          "Ascending",
          "Descending"
        ],
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "ApiUserView": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserViewInfo"
          },
          {
            "type": "object",
            "description": "Contains information about the user view.",
            "additionalProperties": false,
            "properties": {
              "Filter": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApiFilter"
                  }
                ]
              },
              "SortingGrouping": {
                "type": "array",
                "description": "Contains the list of sorting and grouping information for columns.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserViewColumnSortGroupInfo"
                }
              },
              "Columns": {
                "type": "array",
                "description": "Contains the list of columns.",
                "nullable": true,
                "items": {
                  "$ref": "#/components/schemas/ApiUserViewColumnInfo"
                }
              }
            }
          }
        ]
      },
      "ApiUserViewColumnSortGroupInfo": {
        "type": "object",
        "description": "Contains the user view column sorting and grouping information.",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The name of the column.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "The label of the column.",
            "nullable": true
          },
          "SortOrder": {
            "description": "The sort order of the column.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiColumnSortOrder"
              }
            ]
          },
          "IsGrouped": {
            "type": "boolean",
            "description": "Indicates if the column is grouped."
          }
        }
      },
      "ApiUserViewColumnInfo": {
        "type": "object",
        "description": "Represents the user view column information.",
        "additionalProperties": false,
        "properties": {
          "FieldId": {
            "type": "string",
            "description": "The name of the column.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "The label of the column.",
            "nullable": true
          },
          "Width": {
            "type": "integer",
            "description": "The width of the column.",
            "format": "int32"
          }
        }
      },
      "ApiUserViewPatchCollectionResponse": {
        "type": "object",
        "description": "Represent the response for the user view patch collection operation.",
        "x-abstract": true,
        "additionalProperties": false
      },
      "ApiUserViewPatchCollectionOperation": {
        "type": "object",
        "discriminator": {
          "propertyName": "PatchOperation",
          "mapping": {
            "Copy": "#/components/schemas/ApiUserViewPatchCopyCollectionOperation"
          }
        },
        "description": "Represents data required to execute userview-modify collection operation. \nThere are multiple project modify operations supported - see ApiUserViewPatchCollectionTypes. \nDepending on the type the actual properties can differ. See subclasses for details. ",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "PatchOperation"
        ],
        "properties": {
          "PatchOperation": {
            "type": "string"
          }
        }
      },
      "ApiUserViewPatchCopyCollectionOperation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApiUserViewPatchCollectionOperation"
          },
          {
            "type": "object",
            "description": "Represent the necessary information to copy user view.",
            "additionalProperties": false,
            "properties": {
              "UserViewId": {
                "type": "integer",
                "description": "The id of the user view.",
                "format": "int32"
              },
              "TargetProjectId": {
                "type": "integer",
                "description": "The id of the target project.",
                "format": "int32"
              },
              "NewName": {
                "type": "string",
                "description": "The new name for the user view, if empty the old name will be kept.",
                "nullable": true
              }
            }
          }
        ]
      },
      "ApiWorkflow": {
        "type": "object",
        "description": "Represents a workflow. ",
        "additionalProperties": false,
        "properties": {
          "Nodes": {
            "type": "array",
            "description": "A list of all workflow nodes.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiWorkflowNodeModel"
            }
          },
          "Actions": {
            "type": "array",
            "description": "A list of all workflow transitions.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiWorkflowTransitionModel"
            }
          },
          "Graph": {
            "description": "Graph contains information about transition between \nnodes and the information where to draw the nodes.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWorkflowGraphModel"
              }
            ]
          }
        }
      },
      "ApiWorkflowNodeModel": {
        "type": "object",
        "description": "Represents a workflow node",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "node name.",
            "nullable": true
          },
          "IsInitialNode": {
            "type": "boolean",
            "description": "true if this node is intial node."
          }
        }
      },
      "ApiWorkflowTransitionModel": {
        "type": "object",
        "description": "Represents a workflow transition. ",
        "additionalProperties": false,
        "properties": {
          "NodeFrom": {
            "description": "Node from which you are changing.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWorkflowNodeModel"
              }
            ]
          },
          "NodeTo": {
            "description": "Node to which you want to switch.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ApiWorkflowNodeModel"
              }
            ]
          }
        }
      },
      "ApiWorkflowGraphModel": {
        "type": "object",
        "description": "Represents a workflow graph. ",
        "additionalProperties": false,
        "properties": {
          "Nodes": {
            "type": "array",
            "description": "List of nodes with coordinates.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiWorkflowGraphNodeModel"
            }
          },
          "Transitions": {
            "type": "array",
            "description": "List of transitions.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ApiWorkflowGraphTransitionModel"
            }
          }
        }
      },
      "ApiWorkflowGraphNodeModel": {
        "type": "object",
        "description": "Represents a workflow graph node. ",
        "additionalProperties": false,
        "properties": {
          "Name": {
            "type": "string",
            "description": "node name.",
            "nullable": true
          },
          "X": {
            "type": "number",
            "description": "X coordinate to draw.",
            "format": "float"
          },
          "Y": {
            "type": "number",
            "description": "Y coordinate to draw.",
            "format": "float"
          }
        }
      },
      "ApiWorkflowGraphTransitionModel": {
        "type": "object",
        "description": "Represents a workflow graph transition. ",
        "additionalProperties": false,
        "properties": {
          "NodeFrom": {
            "type": "string",
            "description": "Node name from which you are changing.",
            "nullable": true
          },
          "NodeTo": {
            "type": "string",
            "description": "Node name to which you want to switch.",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "description": "ï»¿The aqua REST API supports authentication using OAuth 2. Only the grant type `password` is supported.\r\nThe provided credentials must be valid aqua credentials. As specified for OAuth 2, a token can be requested from\r\nthe `api/token` endpoint using a POST request. The following key/value pairs must be included in the request:\r\n\r\n  - grant_type : password\r\n  - username : _aqua username_\r\n  - password : _aqua password_\r\n\r\nThe data must be sent as url-encoded form data (`Content-Type: application/x-www-form-urlencoded`).\r\n\r\nThe response is a JSON object which contains the access token in the property `access_token`. This access token\r\nmust be sent with each request as a bearer token in the Authorization header, e.g:\r\n\r\n    Authorization: Bearer EL4P...Sp1c\r\n\r\nThe token is only valid for a couple of minutes. The exact time remaining until the token expires can be found\r\nin the property `expires_in` in the response. You can use the refresh token provided in the property\r\n`refresh_token` to request a new API token. The new token is requested by sending the following key/value pairs\r\nto the endpoint `api/token` as described above:\r\n\r\n  - grant_type : refresh_token\r\n  - refresh_token : _refresh token_\r\n\r\nWhen a valid authentication token exists for a user, this user is considered active. This has two main effects:\r\n  - The user requires a license and consequently consumes a floating licence when the user has a floating license assigned\r\n  - Edit locks acquired using this authentication token stay active\r\n\r\nIt is recommended to actively invalidate an authentication token when it is no longer used. This can be done with a DELETE request to `api/Session`.",
        "flows": {
          "password": {
            "tokenUrl": "api/token"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Agent",
      "description": "This controller offers endpoints for agent management."
    },
    {
      "name": "Agile",
      "description": "This controller offers endpoints for agile working."
    },
    {
      "name": "BatchOperation",
      "description": "This controller offers endpoints related to batch operations."
    },
    {
      "name": "Config",
      "description": "This controller offers certain operations related to reading and storing client-specific configuration."
    },
    {
      "name": "DashboardNG",
      "description": "This controller offers endpoints for dashboard and widget managment."
    },
    {
      "name": "Defect",
      "description": "This controller offers endpoints for defect management and all operations related to these item types."
    },
    {
      "name": "Environment",
      "description": "Provides actions to get information about environment settings"
    },
    {
      "name": "Export",
      "description": "This controller offers endpoints related to file managment (e.g. upload and download)."
    },
    {
      "name": "File",
      "description": "This controller offers endpoints related to file management (e.g. upload and download)."
    },
    {
      "name": "GlobalSearch",
      "description": "Exposes the endpoints for a global search implementation"
    },
    {
      "name": "Image",
      "description": "This controller offers endpoints related to image managment (e.g. upload and download)."
    },
    {
      "name": "Import",
      "description": "This controller offers endpoints related to file managment (e.g. upload and download)."
    },
    {
      "name": "Integrations",
      "description": "This controller offers endpoints for integration managment on global and project level."
    },
    {
      "name": "Label",
      "description": ""
    },
    {
      "name": "Navigation",
      "description": "This controller offers endpoints for the navigation."
    },
    {
      "name": "OperationLog",
      "description": "This controller offers endpoints for retrieving log information."
    },
    {
      "name": "Project",
      "description": "This controller offers endpoints for project and folder managment."
    },
    {
      "name": "ProjectMeta",
      "description": "This controller offers endpoints for project managment on meta level."
    },
    {
      "name": "ProjectNotification",
      "description": "This controller offers endpoints for project notification managment."
    },
    {
      "name": "Report",
      "description": "This controller offers endpoints for report managment."
    },
    {
      "name": "Requirement",
      "description": "This controller offers endpoints for requirement management and all operations related to these item types."
    },
    {
      "name": "ResetPassword",
      "description": "Provides actions for resetting password for the user"
    },
    {
      "name": "Script",
      "description": "This controller offers endpoints for script management and all operations related to these item types."
    },
    {
      "name": "ServerAdministrator",
      "description": "This controller offers endpoints for server administrator operations only."
    },
    {
      "name": "Session",
      "description": "This controller offers endpoints that relate to the current session."
    },
    {
      "name": "System",
      "description": "This controller offers certain system wide operations."
    },
    {
      "name": "TestCase",
      "description": "This controller offers endpoints for test case management and all operations related to these item types."
    },
    {
      "name": "TestExecution",
      "description": "This controller offers endpoints for test execution managment."
    },
    {
      "name": "TestScenario",
      "description": "This controller offers endpoints for test scenario management and all operations related to these item types."
    },
    {
      "name": "User",
      "description": "This controller offers endpoints for the user to manage their own configurations at the project level."
    },
    {
      "name": "UserImage",
      "description": "This controller offers endpoints related to user image managment (e.g. download)."
    },
    {
      "name": "UserView",
      "description": "This controller offers endpoints for user view managment."
    },
    {
      "name": "Workflow",
      "description": "This controller offers endpoints for workflow managment."
    }
  ]
}